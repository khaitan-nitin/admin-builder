{"version":3,"sources":["../../../projects/admin-builder/src/lib/utility/badge.utility.ts","../../../projects/admin-builder/src/lib/utility/collection.utility.ts","../../../projects/admin-builder/src/lib/utility/button.utility.ts","../../../node_modules/tslib/tslib.es6.js","../../../projects/admin-builder/src/lib/utility/dependent.utility.ts","../../../projects/admin-builder/src/lib/utility/object.utility.ts","../../../projects/admin-builder/src/lib/utility/string.utility.ts","../../../projects/admin-builder/src/lib/utility/form.utility.ts","../../../projects/admin-builder/src/lib/utility/master-data.utility.ts","../../../projects/admin-builder/src/lib/utility/field.utility.ts","../../../projects/admin-builder/src/lib/utility/form-custom.utility.ts","../../../projects/admin-builder/src/lib/utility/list.utility.ts","../../../projects/admin-builder/src/lib/utility/property.utility.ts","../../../projects/admin-builder/src/lib/utility/security.utility.ts","../../../projects/admin-builder/src/lib/utility/dropdown.utility.ts","../../../projects/admin-builder/src/lib/utility/crud.utility.ts","../../../projects/admin-builder/src/lib/utility/keymap.utility.ts","../../../projects/admin-builder/src/lib/utility/ability.utility.ts","../../../projects/admin-builder/src/lib/button/component/button-delete-confirmation/button-delete-confirmation.component.ts","../../../projects/admin-builder/src/lib/button/component/button/button.component.ts","../../../projects/admin-builder/src/lib/button/component/button-group/button-group.component.ts","../../../projects/admin-builder/src/lib/crud/component/crud-form/crud-form.component.ts","../../../projects/admin-builder/src/lib/crud/component/crud-list/crud-list.component.ts","../../../projects/admin-builder/src/lib/field/component/file-uploader/file-uploader.component.ts","../../../projects/admin-builder/src/lib/field/component/field/html.editor.configuration.ts","../../../projects/admin-builder/src/lib/field/component/field/field.component.ts","../../../projects/admin-builder/src/lib/field/component/field-layout/field-layout.component.ts","../../../projects/admin-builder/src/lib/field/component/field-layout/field-horizontal-layout/field-horizontal-layout.component.ts","../../../projects/admin-builder/src/lib/field/component/field-layout/field-inline-layout/field-inline-layout.component.ts","../../../projects/admin-builder/src/lib/field/component/field-layout/field-vertical-layout/field-vertical-layout.component.ts","../../../projects/admin-builder/src/lib/list/component/list.component.ts","../../../projects/admin-builder/src/lib/list/component/static-list/static-list.component.ts","../../../projects/admin-builder/src/lib/list/component/dynamic-list/dynamic-list.component.ts","../../../projects/admin-builder/src/lib/modal/component/modal/modal.component.ts","../../../projects/admin-builder/src/lib/page/component/admin-layout/admin-layout.component.ts","../../../projects/admin-builder/src/lib/crud/component/crud-header/crud-header.component.ts","../../../projects/admin-builder/src/lib/form/component/form-header/form-header.component.ts","../../../projects/admin-builder/src/lib/form/component/form/form.component.ts","../../../projects/admin-builder/src/lib/crud/interface/crud-list/crud-list-interface.component.ts","../../../projects/admin-builder/src/lib/field/component/chips/chips.component.ts","../../../projects/admin-builder/src/lib/field/component/toolbar/toolbar.component.ts","../../../projects/admin-builder/src/lib/field/component/multi-image/multi-image.component.ts","../../../projects/admin-builder/src/lib/field/component/paragraph/paragraph.component.ts","../../../projects/admin-builder/src/lib/field/pipes/highlightPipe.ts","../../../projects/admin-builder/src/lib/field/component/tooltip/tooltip.component.ts","../../../projects/admin-builder/src/lib/list/directives/ngInit.directive.ts","../../../projects/admin-builder/src/lib/list/pipes/safeHtml.pipe.ts","../../../projects/admin-builder/src/lib/list/directives/compile.directive.ts","../../../projects/admin-builder/src/lib/admin-builder.module.ts","../../../projects/admin-builder/src/lib/modal/utility/modal.util.ts"],"names":["CollectionUtils","isEmpty","value","undefined","length","ButtonUtils","instanceOfButton","object","instanceOfChipButton","instanceOfButtonGroup","instanceOfHoverButton","instanceOfAnyButtonType","isButton","this","hasWidth","buttons","hasButtonWidth","filter","button","width","setEqualWidth","buttonWidth_1","forEach","getAction","sourceIdentifier","sourceIndex","widgetArrayIndex","identifier","parentHierarchy","event","originalData","context","actionDialog","data","Object","assign","action","actionData","isDisable","displayMode","extendStatics","d","b","setPrototypeOf","__proto__","Array","p","prototype","hasOwnProperty","call","__extends","__","constructor","create","__assign","t","s","i","n","arguments","apply","__rest","e","indexOf","getOwnPropertySymbols","propertyIsEnumerable","__decorate","decorators","target","key","desc","c","r","getOwnPropertyDescriptor","Reflect","decorate","defineProperty","__param","paramIndex","decorator","__metadata","metadataKey","metadataValue","metadata","__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","step","next","rejected","result","done","then","__generator","body","f","y","g","_","label","sent","trys","ops","verb","throw","return","Symbol","iterator","v","op","TypeError","pop","push","__createBinding","o","m","k","k2","enumerable","get","__exportStar","__values","__read","ar","error","__spread","concat","__spreadArrays","il","a","j","jl","__await","__asyncGenerator","asyncIterator","q","resume","fulfill","settle","shift","__asyncDelegator","__asyncValues","__makeTemplateObject","cooked","raw","__setModuleDefault","__importStar","mod","__esModule","__importDefault","default","__classPrivateFieldGet","receiver","privateMap","has","__classPrivateFieldSet","set","DependentUtils","displayDependencyField","dependentOnFields","supportingRecord","record","displaySupportingDependencyField","dependentField","dependencyValue","eval","condition","hasMatch_1","dependentOnFields_1","dependentOnFields_1_1","hasMatch_2","dependentOnFields_2","dependentOnFields_2_1","getDependencyTree","formFields","dependency","formFields_1","formFields_1_1","formField","field","_c","e_4","_d","getDependencyTreeForButton","buttonLayout","_f","_g","_h","e_6","_j","cells","_k","_l","cell","_m","e_8","_o","_p","e_9","_q","ObjectUtils","obj","keys","text","replace","unflatten","_json","jsonToObj","reduce","acc","current","index","inlineKeys","split","firstProp","parsedKey","parseInt","isNextKeyNumber","isNaN","_nextData","_index","isValueInArray","currentValueObj","join","StringUtils","FormUtils","isFormDisable","disableField","form","disable","disableFieldControl","fieldControl","checkUniqueIdentifier","forms","getRawValue","formValue","initFormGroup","fieldControls","initFieldGroup","FormGroup","getFieldValidation","validations","_b","val","type","addMore","fieldValue","getValueViaEval","options","FormArray","vCnt","opts","getCheckboxOption","setFormGroup","option","dateRange","controls","FormControl","fieldContexts","values","getFormFieldValue","setFormControl","getParagraphFields","dateRangeValidation","mismatch","opt","checked","optionSelected","FieldUtils","isFieldDisabled","fieldValues","Map","fieldContextKey","formGroup","isReadOnly","formControl","enable","elements","isArray","cnt","getFieldValue","recordValue","JSON","stringify","reset","formConfig","setOptionsUsingKey","fieldKey","masterDataKey","setOptionsUsingValues","keyMap","relaodAll","isMatchingDependendKeyMap","optionDependsOn","optionDependsOnValue","changeButtonLabelIcon","buttonIdentifier","icon","MasterDataUtils","getMasterDataFromLocalStore","parse","localStorage","getItem","getMasterDataAsOptions","masterData","items","currentDisplayMode","isDisabled","isUnique","displayEllipsis","charLimit","showEllipsis","strValue","readOnlyField","isEllipsisField","hasEllipsis","ellipsis","FormCustomUtils","setCustomLayout","layout","_this","control","resolvedControl","getControl","console","log","cellControl","getButtonControl","getFieldControl","controlKey","ListUtils","addColoumn","hideColoumn","list","columns","column","fields","getColumnKey","getColumnLabel","getColumnSelectorField","listConfig","disabled","selected","show","appearance","fieldDisplayType","placeholder","multiselect","getMobileConfig","mobile","setCustomLayouts","hasRowHover","row","hover","template","hasCustomCellLayout","hasCustomRowLayout","hasHoverConfig","colIndex","cControlIndex","actions","getColumnControl","cControlIndex_1","PropertyUtils","getPropertyFromLocalStore","SecurityUtils","encrypt","CryptoJS.AES","toString","Error","decrypt","bytes","CryptoJS.enc","Utf8","DropdownUtils","getValue","CrudUtils","crud","tabs","tab","widgets","widget","widgetType","lists","search","setDisplayType","crudTabs","formDisplayMode","KeyMapUtils","keyMaps","associations","optionType","optionComponent","generateKeyMap","setOptionssUsingValues","optionsDD","association","valueAsKey","AbilityUtils","setAbility","ability","user","rules","update","ButtonDeleteConfirmationComponent","dialogRef","ngOnInit","title","confirmationConfig","message","displayOnlyIcon","displayIcon","click","close","Component","args","selector","MatDialogRef","Inject","MAT_DIALOG_DATA","Ability","ButtonComponent","dialog","router","route","onClick","EventEmitter","onIconClick","routerLink","displayButton","isButtonDisabled","isDisplayOnlyIcon","hasIconDisplay","isFlatButton","isGhostButton","isRaisedButton","isStrokedButton","isFabButton","isChip","isLink","isGroupButton","isMenuButton","buttonWithoutPadding","state","_button","document","documentElement","style","setProperty","iconPosition","setLabel","setButtonEnable","formSubscription","valueChanges","subscribe","setButtonDisplay","setOnlyIconDisplay","setIconDisplay","setLink","setGroupButton","setFlatButton","setGhostButton","setRaisedButton","setStrokedButton","setFabButton","setChip","setButtonWithoutPadding","setMenuButton","displayInFormModes","confirmationConfiguration","invokeAction","openDialog","open","buttonRoute","afterClosed","navigate","skipLocationChange","replaceUrl","addSearchParamsInUrl","emit","iconClick","filterData","queryParams","relativeTo","queryParamsHandling","valid","alwaysEnable","onlyIcon","groupIdentifier","ngOnDestroy","unsubscribe","MatDialog","Router","ActivatedRoute","Input","Output","ButtonGroupComponent","buttonLists","buttonListsType","displayDesktopDD","displayTabletDD","displayMobileDD","hoverButtonLists","_buttons","btns","getButtonList","getButtonType","hasMobileButton","changeButtonTypeToGhost","displayIn","hasButtonsForDropdown","buttonArray","buttonArrayIndex","getGroupButton","hoverButton","getHoverButtons","hoverButtons","isGroupAdded","groupAdded","buttonList","bgAdded","gButtons","map","gButton","fullWidth","buttonWidth","groupButtons","groupLabel","groupIcon","badge","buttonType","isButtonGroup","isChipGroup","isButtonHover","isButtonArray","encapsulation","ViewEncapsulation","None","CrudFormComponent","onFormChange","onFieldChange","onButtonClick","onSortClick","onPageClick","formsConfigToDisplay","rowsInTab","filterForms","drawTabs","setConfigAsPerTab","addWidget","addWidgetButton","tabIdentifier","configData","badges","pageBackRoute","configPerTabs","tabIndex_1","tabConfigData","tabKey","getTabIdentifier","tabTitle","tIndex","permission","can","drawTab","tabIndex","rows","rIndex","this_1","colCount_1","colSpan","e_2","displayWidget","formIdentifiers","actionPages","_e","actionPage","associatedFormIdentifiers","color","size","fieldChange","formChange","buttonClick","onTabChange","textLabel","onAccordianChange","onSort","onPage","CrudListComponent","_bottomSheet","_expanded","onButtonIconClick","onTabClick","showSearchForm","listHeaders","searchOnFieldsCount","searchOnFieldsButtons","_configData","searchButton","setSearchButton","searchModalButton","displaySearchForm","setListHeaders","setCrudHeader","searchConfig","displayType","displayInColumns","records","searchData","filterButton","setSelectedFilterButton","header","listType","sidenav","buttonIconClick","openBottomSheet","BottomSearchSheet","formReset","buttonSubscriber","instance","fieldSubscriber","formSubscriber","dialogRefSubscriber","afterDismissed","bottomUnsubscribe","MatBottomSheet","ViewChild","_bottomSheetRef","openLink","dismiss","preventDefault","MatBottomSheetRef","MAT_BOTTOM_SHEET_DATA","FileUploaderComponent","_http","param","fileList","multiple","fileType","fileIcon","hideDownloadButton","hideDeleteFileButton","hideUploadButton","hideFileIconButton","hideDeleteAllButton","hideActionStrip","isUploaded","isUploadingInProgress","isFileImageType","setFileTypeAndIcon","getImageFileType","onUploadClick","fileInput","nativeElement","onchange","files","file","name","onDeleteAllClick","isFunctionDefined","onDeleteFileClick","delFile","onShowAllItems","showLess","func","subFileType","x","toLowerCase","defaultUploadBtnText","uploadButtonText","setFieldDisabled","setHideDeleteAllButton","setHideActionStrip","HttpClient","static","quillConfiguration","formula","toolbar","font","align","indent","background","script","FieldErrorStateMatcher","isErrorState","invalid","dirty","touched","FieldComponent","onDependentFieldChange","ellipsisRequired","editorOptions","onListSelectionFuc","listOptions","minLengthForTrigger","highlightAutoCompleteText","onShowAllOptions","autoCompleteInputHasValue","onListImageLoadError","$event","src","defaultImageUrl","_displayMode","fieldDisabled","isEditorErrorState","matcher","isRequired","required","hasFieldNavigate","fieldNavigate","hasHintIcon","displayHintIcon","setMaxLength","setNumberMinMax","setAppearance","setOptionInDisplay","getImagePath","setRows","setHeight","setClear","setAsBubble","setTextAlign","setAddMoreDisplayInColumn","setMinLengthForTrigger","setDisplayTemplate","setCalendar","setShowLess","textClearButton","setTextClearButton","routeToButton","routeTo","helpModalButton","setHelpButton","plusButton","addRemoveButton","minusButton","displayTemplate","isAddMore","device","addMoreFieldDisplayInColumns","addMoreButtonDisplayInColumns","height","asBubble","bubbleColor","textAlign","maxLength","min","max","help","resolvedValue","txt","initialLength","finalLength","objs","hasAssociation","element","componentIdentifier","substr","displayFullText","resolvedValueStr","displayShortText","invokeOnChangeOnField","input","invokeOnChange","autocompleteDisplayFn","_filter","filterValue","includes","autoCompleteResultCount","hasClear","cleanValue","setValue","getResolveTextWithKey","getDropdownValue","isSelected","String","imagePath","onAutocompleteChange","autocomplate","onChangeEvent","onToggleChange","toggle","onSliderChange","slider","onRadioChange","radio","onCheckboxChange","checkbox","onOptionChange","listView","selectedOptions","source","_value","currentOptions","onHtmlEditorChange","html","onChipsListChange","onInputChange","onDateChange","date","onChange","dropdown","onFileChange","reader","FileReader","readAsDataURL","onload","_event","imgURL","onParagraphChange","setTimeout","dependencies","fieldIndex","errors","keyError","validation","addField","removeField","splice","onFileComplete","FieldLayoutComponent","initField","isValidDisplayType","fieldDiaplyType","FieldHorizontalLayoutComponent","_super","displayHorizonalForm","FieldInlineLayoutComponent","displayInlineForm","FieldVerticalLayoutComponent","displayVerticalForm","ListComponent","breakpointObserver","onPageChange","onSortChange","dataSource","MatTableDataSource","cellCount","displayVertical","formIndex","inlineEditButtons","hasDisplayActions","isInlineEditable","inlineButtonSize","childRows","displayModes","columnNames","columnConfigs","selection","SelectionModel","hideCard","hideHeader","hideFooter","pageSizeOptions","rowCount","limit","rowColors","cellColors","showCard","sortDirection","_listConfig","setColumnNames","setDetailColumnCount","setCardVisibility","_record","parent","init","_listReset","resetInlineEditButton","pagination","paginator","sort","getLayout","setPageSize","total","pageNo","populateAllChilds","showRowEditable","initCommonFormGroup","setColors","setIconPosition","setFilterBar","sticky","header1","querySelectorAll","getElementById","offsetTop","window","pageYOffset","classList","add","el","remove","onScrolled","staticList","hasOnPageFilter","hasColumnSelection","contentFilterColumnSpan","columnSelectionColumnSpan","pageSize","position","getFilterField","filterField","columnSelectorField","updateColumnDisplay","inlinEditButton","cIndex","e_3","setRowEditablity","inlineButtonTemp","getChildRows","child","recordIdentifier","childData","cFieldIndex","updateFilter","trim","firstPage","getCurrentRecord","e_5","uniqueKeys","commonFieldControls","commonListForm","getObjectTree","currentRow","values_1","objectTree","hierarchyUp","isAllSelected","masterToggle","clear","select","checkboxLabel","description","totalDispalyableWidth","selectable","selectableExist","unshift","selectableButton","hasDisplayableField","actionWidth","childColumnCount","bgColor","textColor","rowColor","rowBgColor","rowTextColor","cellColor","stopPropagation","breakpointSubscription","observe","Breakpoints","XSmall","Small","Medium","Large","XLarge","breakpoints","isMobile","isTablet","isDesktop","resetVerticalDisplay","rowClick","rowIndex","actionButton","rowAction","actionObj","getButton","onHover","hoverRowData","hoverRowIndex","animations","trigger","minHeight","transition","animate","BreakpointObserver","MatPaginator","MatSort","StaticListComponent","onscroll","isList","sorton","sortdir","expandedRow","pageInfo","DynamicListComponent","ModalComponent","AdminLayoutComponent","CrudHeaderComponent","badgeButtons","_pageBackRoute","addBackButton","transformBadgeButtons","content","badgeColorToButtonColor","buttonColor","backButton","backAlreadyAdded","FormHeaderComponent","getFormHeader","saperateFormActions","formHeaderConfig","subtitle","searchModeTitle","addModeTitle","editModeTitle","viewModeTitle","formActions","formAction","FormComponent","showButtons","formLayouts","_supportingRecord","_reset","getActions","getCustomLayout","showCustomLayout","formButton","formButtonLayout","dependentFieldChange","newRecord","fieldDefaultSetting","setTitle","resetDisplayInColumn","getFormValue","transformRows","sectionLabel","separator","sectionIcon","sectionExpandable","expandable","rLength","formFieldRowColumnCount","colCount","cCnt","toggleList","formLayout","allowed","resetButtonDisplay","getNewDisplayInColumn","displayInColumn","displayInColumnMap","mobileMap","tabletMap","CrudListComponentInterface","setCommonConfig","setListConfig","setBadges","setCommonConfigUsingCrud","listReset","setListConfigUsingCrud","quickLinks","setConfigListData","loadFilterParams","filterStr","configListData","configListDataNew","getRowKey","lIndex","getChildRowKey","getChildRecordIdentifier","beforeChangeMerge","isMatchingRow","keys_1","e_1","keys_1_1","addRow","afterChangeMerge","beforeChildChangeMerge","keys_2","keys_2_1","childRecordIdentifier","keys_4","isChildMatchingRow","keys_3","keys_3_1","addChildRow","keys_5","keys_5_1","setTabDisplayMode","afterChildChangeMerge","setHeaderTitle","setHeaderDescription","ChipsComponent","onListChange","separatorKeysCodes","ENTER","chips","addOnBlur","addItem","keyExists","removable","triggerChangedEvent","removeItem","item","drop","moveItemInArray","previousIndex","currentIndex","onSelected","setDescribedByIds","ids","onContainerClick","orientation","setChips","optionMatch_1","chip","ToolbarComponent","onMenuClick","menuItems","MultiImageComponent","onShowAllClick","count","images","radius","showCount","showAll","lastItemLabel","hideTooltip","ParagraphComponent","tokens","paragraphField","words","word","slice","buttonContexts","isButtonDisable","HighlightPipe","transform","pattern","regex","RegExp","match","Pipe","TooltipComponent","placement","NgInit","ngInit","Directive","SafeHtmlPipe","sanitizer","bypassSecurityTrustHtml","DomSanitizer","cfTemplateDirective","vcRef","compiler","ngOnChanges","cfTemplate","componentRef","updateProperties","component","createDynamicComponent","module","createDynamicModule","compileModuleAndAllComponentsAsync","moduleWithFactories","componentFactory","componentFactories","find","componentType","createComponent","catch","prop","cfTemplateContext","CustomDynamicComponent","DynamicModule","NgModule","imports","CommonModule","declarations","ViewContainerRef","Compiler","HttpClientModule","RouterModule","MdePopoverModule","ReactiveFormsModule","TooltipModule","LayoutModule","MatButtonModule","MatButtonToggleModule","MatMenuModule","MatChipsModule","MatIconModule","MatBadgeModule","MatDialogModule","MatCardModule","MatTabsModule","MatExpansionModule","MatSidenavModule","MatBottomSheetModule","MatDividerModule","MatFormFieldModule","MatInputModule","MatSelectModule","MatAutocompleteModule","MatCheckboxModule","MatRadioModule","MatDatepickerModule","MatMomentDateModule","MatSliderModule","MatSlideToggleModule","MatListModule","MatTableModule","MatSortModule","MatPaginatorModule","MatGridListModule","MatProgressBarModule","MatProgressSpinnerModule","DragDropModule","MatTooltipModule","QuillModule","forRoot","AbilityModule","FlexLayoutModule","MatToolbarModule","InfiniteScrollModule","exports","providers","provide","useValue","ɵ0","PureAbility","useExisting","ModalUitls","modal","widgetConfig","componentInstance"],"mappings":"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","sourcesContent":["export class BadgeUitls {\n}","export class CollectionUtils {\n\n  static isEmpty(value) {\n    if (value == null || value == undefined || value == \"\" || value.length == 0) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n}\n","import { Button, ButtonGroup, ButtonType, HoverButton, Action, ObjectTree } from '../button/model';\nimport { FormDiaplyMode } from '../form/model';\nimport { CollectionUtils } from './collection.utility';\n\nexport class ButtonUtils {\n    static instanceOfButton(object: any): object is Button {\n        return 'type' in object &&\n//            !('groupIdentifier' in object) &&\n            (object['type'] != ButtonType.CHIP && object['type'] != ButtonType.GROUP && object['type'] != ButtonType.DROPDOWN) &&\n            (object['type'] == ButtonType.FLAT || object['type'] == ButtonType.GHOST || object['type'] == ButtonType.RAISED || object['type'] == ButtonType.FAB || object['type'] == ButtonType.STROKED)\n    }\n\n    static instanceOfChipButton(object: any): object is ButtonGroup {\n        return 'type' in object && 'groupIdentifier' in object && object['type'] == ButtonType.CHIP;\n    }\n\n    static instanceOfButtonGroup(object: any): object is ButtonGroup {\n        return 'type' in object && 'groupIdentifier' in object && object['type'] == ButtonType.GROUP;\n    }\n\n    static instanceOfHoverButton(object: any): object is HoverButton {\n        return 'type' in object && 'groupIdentifier' in object && object['type'] == ButtonType.DROPDOWN;\n    }\n\n    static instanceOfAnyButtonType(object: any): boolean {\n        let isButton: boolean = false;\n        if (this.instanceOfButton(object) || this.instanceOfChipButton(object) || this.instanceOfButtonGroup(object) || this.instanceOfHoverButton(object)) {\n            isButton = true;\n        }\n\n        return isButton;\n    }\n\n    static hasWidth(buttons: Array<Button>): boolean {\n        let hasButtonWidth: boolean = false;\n\n        if (!CollectionUtils.isEmpty(buttons) && buttons.filter(button => button.width != null && button.width != \"\").length > 0) {\n            hasButtonWidth = true;\n        }\n\n        return hasButtonWidth;\n    }\n\n    static setEqualWidth(buttons: Array<Button>): void {\n        if (!CollectionUtils.isEmpty(buttons)) {\n            let buttonCount = buttons.length;\n            let buttonWidth = 100 / buttonCount;\n\n            buttons.forEach(button => {\n                button.width = \"\" + buttonWidth;\n            });\n        }\n    }\n\n    static getAction(sourceIdentifier: string, sourceIndex: number, widgetArrayIndex: number, identifier: string, parentHierarchy: ObjectTree, event: any, originalData: any, context: any, actionDialog: any): Action {\n        let data = null;\n        if (originalData) {\n            data = { ...originalData, ...context };\n        } else {\n            data = context;\n            originalData = context;\n        }\n        let action: Action = {\n            sourceIdentifier: sourceIdentifier,\n            sourceIndex: sourceIndex,\n            widgetArrayIndex: widgetArrayIndex,\n            action: identifier,\n            actionData: actionDialog,\n            data: data,\n            originalData: originalData,\n            parentHierarchy: parentHierarchy,\n            event: event\n        };\n\n        return action;\n    }\n    \n    static isDisable(displayMode: FormDiaplyMode): boolean {\n        if (displayMode == FormDiaplyMode.BLOCKED || displayMode == FormDiaplyMode.VIEW) {\n          return true;\n        } else {\n          return false;\n        }\n      }\n    }","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n});\r\n\r\nexport function __exportStar(m, o) {\r\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nvar __setModuleDefault = Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","import { DependentOnField } from \"../field/model\";\nimport { FormButton, FormButtonLayout, FormField } from \"../form/model\";\nimport { CollectionUtils } from \"./collection.utility\";\n\nexport class DependentUtils {\n  static displayDependencyField(dependentOnFields: Array<DependentOnField>, supportingRecord: any, record: any): boolean {\n    let displayDependencyField: boolean = true;\n    let displaySupportingDependencyField: boolean = true;\n\n    if (dependentOnFields && dependentOnFields.length > 0 && record) {\n      for (let dependentField of dependentOnFields) {\n        let dependencyValue: any = \"\";\n        try {\n          dependencyValue = eval(\"record.\" + dependentField.key);\n        } catch (e) {\n\n        }\n\n        if (dependencyValue != undefined) {\n          if (dependentField.condition instanceof Array) {\n            if (dependencyValue instanceof Array) {\n              let hasMatch: boolean = false;\n              (<Array<any>>dependencyValue).forEach(value => {\n                if ((<Array<string>>dependentField.condition).indexOf(value) > -1) {\n                  hasMatch = true;\n                }\n              });\n              if (hasMatch) {\n                displayDependencyField = false;\n              }\n            } else {\n              if ((<Array<string>>dependentField.condition).indexOf(dependencyValue) <= -1) {\n                displayDependencyField = false;\n              }\n            }\n          } else {\n            if (dependencyValue instanceof Array) {\n              if (dependencyValue.indexOf(dependentField.condition) <= -1) {\n                displayDependencyField = false;\n              }\n            } else {\n              if (dependencyValue != dependentField.condition) {\n                displayDependencyField = false;\n              }\n            }\n          }\n        }\n      }\n    }\n\n    if (dependentOnFields && dependentOnFields.length > 0 && supportingRecord) {\n      for (let dependentField of dependentOnFields) {\n        let dependencyValue: any = \"\";\n        try {\n          dependencyValue = eval(\"supportingRecord.\" + dependentField.key);\n        } catch (e) {\n\n        }\n\n        if (dependencyValue != undefined) {\n          if (dependentField.condition instanceof Array) {\n            if (dependencyValue instanceof Array) {\n              let hasMatch = false;\n              (<Array<any>>dependencyValue).forEach(value => {\n                if ((<Array<string>>dependentField.condition).indexOf(value) > -1) {\n                  hasMatch = true;\n                }\n              });\n              if (!hasMatch) {\n                displaySupportingDependencyField = false;\n              }\n            } else {\n              if ((<Array<string>>dependentField.condition).indexOf(dependencyValue) <= -1) {\n                displaySupportingDependencyField = false;\n              }\n            }\n          } else {\n            if (dependencyValue instanceof Array) {\n              if (dependencyValue.indexOf(dependentField.condition) <= -1) {\n                displaySupportingDependencyField = false;\n              }\n            } else {\n              if (dependencyValue != dependentField.condition) {\n                displaySupportingDependencyField = false;\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return displayDependencyField && displaySupportingDependencyField;\n  }\n\n  static getDependencyTree(formFields: Array<FormField>): any {\n    let dependency: any = {};\n\n    for (let formField of formFields) {\n      if (formField.field.dependentOnFields && formField.field.dependentOnFields.length > 0) {\n        for (let dependentField of formField.field.dependentOnFields) {\n          if (dependency[dependentField.key] == undefined || dependency[dependentField.key] == null) {\n            dependency[dependentField.key] = new Array<string>();\n          }\n          dependency[dependentField.key].push(formField.field.key);\n        }\n      }\n    }\n\n    return dependency;\n  }\n\n  static getDependencyTreeForButton(buttonLayout: FormButton | FormButtonLayout): any {\n    let dependency: any = {};\n\n    if (!CollectionUtils.isEmpty((<FormButton>buttonLayout).buttons)) {\n      for (let button of (<FormButton>buttonLayout).buttons) {\n        if (button.dependentOnFields && button.dependentOnFields.length > 0) {\n          for (let dependentField of button.dependentOnFields) {\n            if (dependency[dependentField.key] == undefined || dependency[dependentField.key] == null) {\n              dependency[dependentField.key] = new Array<string>();\n            }\n            dependency[dependentField.key].push(button.identifier);\n          }\n        }\n      }\n    }\n\n    if (!CollectionUtils.isEmpty((<FormButtonLayout>buttonLayout).cells)) {\n      for (let cell of (<FormButtonLayout>buttonLayout).cells) {\n        for (let button of (<FormButton>cell.buttons).buttons) {\n          if (button.dependentOnFields && button.dependentOnFields.length > 0) {\n            for (let dependentField of button.dependentOnFields) {\n              if (dependency[dependentField.key] == undefined || dependency[dependentField.key] == null) {\n                dependency[dependentField.key] = new Array<string>();\n              }\n              dependency[dependentField.key].push(button.identifier);\n            }\n          }\n        }\n      }\n    }\n\n    return dependency;\n  }\n}","export class ObjectUtils {\n    static isEmpty(obj: any) {\n        return obj == undefined || Object.keys(obj).length === 0;\n    }\n\n    static resolve(text: string, obj: any): string {\n        if (!this.isEmpty(obj)) {\n            for (var key in obj) {\n                text = text.replace('{' + key + '}', obj[key]);\n            }\n        }\n\n        return text;\n    }\n\n    static unflatten(_json: any) {\n        function jsonToObj(data: any, result) {\n            return Object.keys(data).reduce((acc, current, index) => {\n                const inlineKeys = current.split('.');\n                let firstProp = inlineKeys.shift();\n                const hasProps = inlineKeys.length >= 1;\n                if (hasProps) {\n                    const parsedKey = parseInt(inlineKeys[0], 10);\n                    const isNextKeyNumber = !isNaN(parsedKey);\n                    let _nextData = {};\n                    if (!acc[firstProp]) {\n                        acc[firstProp] = isNextKeyNumber ? [] : {};\n                    }\n                    if (isNextKeyNumber) {\n                        const _index = parseInt(inlineKeys.shift(), 10);\n                        const isValueInArray = acc[firstProp].length - 1 >= _index;\n                        const currentValueObj = acc[firstProp][_index];\n                        _nextData[inlineKeys.join('.')] = data[current];\n                        acc[firstProp][_index] = isValueInArray\n                            ? Object.assign(currentValueObj, jsonToObj(_nextData, currentValueObj))\n                            : jsonToObj(_nextData, {});\n                    } else {\n                        _nextData[inlineKeys.join('.')] = data[current];\n                        Object.assign(acc[firstProp], jsonToObj(_nextData, acc[firstProp]));\n                    }\n                } else {\n                    acc[firstProp] = data[current];\n                }\n                return acc;\n            }, result);\n        }\n        return jsonToObj(_json, {});\n    };\n}\n","export class StringUtils {\n  static isEmpty(value) {\n    if (value == null || value == undefined || value == \"\" || value.length == 0) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n}\n","import { FormDiaplyMode, Form, FormField, FormButton } from '../form/model';\nimport { Field, FieldType, AutocompleteField, RadioField, CheckboxField, DropdownField, KeyMap, DependentOnField, CalendarField, ParagraphField } from '../field/model';\nimport { FormGroup, FormControl, ValidatorFn, FormArray } from '@angular/forms';\nimport { isArray } from 'util';\nimport { ObjectUtils } from './object.utility';\nimport { CollectionUtils } from './collection.utility';\nimport { StringUtils } from './string.utility';\nimport { FieldUtils } from './field.utility';\nimport { DependentUtils } from '.';\n\nexport class FormUtils {\n  static isFormDisable(displayMode: FormDiaplyMode): boolean {\n    if (displayMode == FormDiaplyMode.BLOCKED || displayMode == FormDiaplyMode.VIEW) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  static disableField(form: FormGroup, field: Field): void {\n    if (form && form.get(field.key)) {\n      form.get(field.key).disable();\n    }\n  }\n\n  static disableFieldControl(fieldControl: FormControl): void {\n    if (fieldControl) {\n      fieldControl.disable();\n    }\n  }\n\n  static checkUniqueIdentifier(forms: Array<Form>) {\n    //  TODO: \n  }\n\n  static getRawValue(form: FormGroup) {\n    let formValue: any = {};\n\n    if (form) {\n      formValue = form.getRawValue();\n    }\n\n    return formValue;\n  }\n\n  static initFormGroup(formFields: Array<FormField>, supportingRecord: any, record: any, displayMode: FormDiaplyMode): FormGroup {\n    let fieldControls = {};\n\n    let isFormDisabled = this.isFormDisable(displayMode);\n\n    for (let formField of formFields) {\n      // if (!CollectionUtils.isEmpty(record)) {\n      FormUtils.initFieldGroup(fieldControls, formField, supportingRecord, record, displayMode);\n      // }\n    }\n\n    return new FormGroup(fieldControls);\n  }\n\n  static getFieldValidation(field: Field): Array<ValidatorFn> {\n    let validations: Array<ValidatorFn> = new Array<ValidatorFn>();\n    if (field.validations && field.validations.length > 0) {\n      for (let val of field.validations) {\n        validations.push(val.type);\n      }\n    }\n\n    return validations;\n  }\n\n  static initFieldGroup(fieldControls: any, formField: FormField, supportingRecord: any, record: any, displayMode: FormDiaplyMode): any {\n    //        field.hide = false;\n    if (!DependentUtils.displayDependencyField(formField.field.dependentOnFields, supportingRecord, record)) {\n      if (record == null) {\n        record = {};\n      }\n      if (formField.addMore) {\n        record[formField.field.key] = [];\n      } else {\n        record[formField.field.key] = null;\n      }\n      //          field.hide = true;\n      return;\n    }\n\n    let validations: Array<ValidatorFn> = this.getFieldValidation(formField.field);\n\n    if (formField.field.type == FieldType.CHECKBOX) {\n      let fieldValue = FormUtils.getValueViaEval(record, formField.field.key);\n      if (formField.addMore) {\n        let options: Array<any> = record && fieldValue ? fieldValue : new Array<any>();\n\n        fieldControls[formField.field.key] = new FormArray([]);\n        for (let vCnt = 0; vCnt < options.length; vCnt++) {\n          let opts = this.getCheckboxOption(displayMode, formField.field, options[vCnt]);\n          fieldControls[formField.field.key].push(this.setFormGroup(displayMode, formField.field, opts, validations));\n        }\n      } else {\n        let option = record && fieldValue ? fieldValue : null;\n\n        let opts = this.getCheckboxOption(displayMode, formField.field, option);\n        fieldControls[formField.field.key] = this.setFormGroup(displayMode, formField.field, opts, validations);\n      }\n    } else if (formField.field.type == FieldType.CALENDAR && (<CalendarField>formField.field).dateRange) {\n      let controls = {};\n      if (validations && validations.length > 0) {\n        controls['startDate'] = new FormControl('',validations);\n        controls['endDate'] = new FormControl('', validations);\n      } else {\n        controls['startDate'] = new FormControl('');\n        controls['endDate'] = new FormControl('');\n      }\n      fieldControls[formField.field.key] = this.setFormGroup(displayMode, formField.field, controls, validations);\n    } else if (formField.field.type == FieldType.PARAGRAPH && !CollectionUtils.isEmpty((<ParagraphField>formField.field).fieldContexts)) {\n      let fieldValue = FormUtils.getValueViaEval(record, formField.field.key);\n      let controls = this.getParagraphFields(displayMode, formField.field, fieldValue);\n\n      fieldControls[formField.field.key] = this.setFormGroup(displayMode, formField.field, controls, validations);\n    } else {\n      if (formField.addMore) {\n        let values: Array<any> = this.getFormFieldValue(record, formField);\n\n        fieldControls[formField.field.key] = new FormArray([]);\n        if (CollectionUtils.isEmpty(values)) {\n          fieldControls[formField.field.key].push(this.setFormControl(displayMode, formField.field, \"\", validations));\n        } else {\n          for (let vCnt = 0; vCnt < values.length; vCnt++) {\n            fieldControls[formField.field.key].push(this.setFormControl(displayMode, formField.field, values[vCnt], validations));\n          }\n        }\n      } else {\n        let value: any = this.getFormFieldValue(record, formField)\n\n        fieldControls[formField.field.key] = this.setFormControl(displayMode, formField.field, value, validations);\n      }\n    }\n\n    return fieldControls;\n  }\n\n  static dateRangeValidation(g: FormGroup) : any{\n    return g.get('startDate').value || g.get('endDate').value\n    ? null : {'mismatch': true};\n  }\n  static getCheckboxOption(displayMode: FormDiaplyMode, field: Field, options: Array<string>): any {\n    let opts = {};\n\n    if (field['options'] && field['options'].length > 0) {\n      for (let opt of field['options']) {\n        if (ObjectUtils.isEmpty(options)) {\n          if (opt['selected'])  {\n            opt.checked = true;\n          } else  {\n            opt.checked = false;\n          }\n        } else {\n          let optionSelected: boolean = options.indexOf(opt.key) > -1;\n          if (options && optionSelected) {\n            opt.checked = true;\n          } else {\n            opt.checked = false;\n          }\n        }\n        opts[opt.key] = new FormControl(opt.checked);\n\n        if (FieldUtils.isFieldDisabled(field, displayMode, \"\")) {\n          opts[opt.key].disable();\n        }\n\n      }\n    }\n\n    return opts;\n  }\n\n  static getParagraphFields(displayMode: FormDiaplyMode, field: Field, fieldValues: Map<string, any>): any {\n    let fieldContexts = {};\n\n    if (CollectionUtils.isEmpty(fieldValues)) {\n      fieldValues = new Map<string, any>();\n    }\n\n    if ((<ParagraphField> field).fieldContexts && Object.keys((<ParagraphField> field).fieldContexts).length > 0) {\n      for (let key of Object.keys((<ParagraphField> field).fieldContexts)) {\n        let fieldContextKey = (<ParagraphField> field).fieldContexts[key];\n\n        let validations: Array<ValidatorFn> = this.getFieldValidation(fieldContextKey);\n        fieldContexts[fieldContextKey.key] = new FormControl(fieldValues[fieldContextKey.key], validations);\n\n        if (FieldUtils.isFieldDisabled(field, displayMode, \"\")) {\n          fieldContexts[fieldContextKey.key].disable();\n        }\n      }\n    }\n\n    return fieldContexts;\n  }\n\n  static setFormGroup(displayMode: FormDiaplyMode, field: Field, value: any, validations: Array<ValidatorFn>): FormGroup {\n    let formGroup: FormGroup;\n\n    if (field.validations && field.validations.length > 0) {\n      formGroup = new FormGroup(value, validations);\n    } else {\n      formGroup = new FormGroup(value);\n    }\n\n    if ((FieldUtils.isFieldDisabled(field, displayMode, value) || field.isReadOnly || field.type == FieldType.HIDDEN) && !StringUtils.isEmpty(value)) {\n      formGroup.disable();\n    }\n\n    return formGroup;\n  }\n\n  static setFormControl(displayMode: FormDiaplyMode, field: Field, value: any, validations: Array<ValidatorFn>): FormControl {\n    let formControl: FormControl;\n\n    if (field.validations && field.validations.length > 0) {\n      formControl = new FormControl(value, validations);\n    } else {\n      formControl = new FormControl(value);\n    }\n\n    if (FieldUtils.isFieldDisabled(field, displayMode, value)) {\n      formControl.disable();\n    } else {\n      formControl.enable();\n    }\n\n    return formControl;\n  }\n\n  static getFormFieldValue(record: any, formField: FormField): any {\n    let value: any;\n    let fieldValue = FormUtils.getValueViaEval(record, formField.field.key);\n\n    if (formField.addMore) {\n      let elements: Array<any> = new Array<any>();\n      if (!ObjectUtils.isEmpty(record) && !CollectionUtils.isEmpty(fieldValue) && isArray(fieldValue)) {\n        elements = fieldValue;\n      } else {\n        elements.push(\"\");\n      }\n\n      for (let cnt = 0; cnt < elements.length; cnt++) {\n        elements[cnt] = this.getFieldValue(elements[cnt], formField.field);\n      }\n      value = elements;\n    } else {\n      let recordValue = \"\";\n      if (record && fieldValue) {\n        recordValue = fieldValue;\n      }\n      value = this.getFieldValue(recordValue, formField.field);\n    }\n    return value\n  }\n\n  static getFieldValue(recordValue: any, field: Field): any {\n    let value: any = null;\n\n    if (field.value) {\n      value = field.value;\n    }\n    if (!StringUtils.isEmpty(recordValue)) {\n      value = recordValue;\n    }\n    if (value == undefined || JSON.stringify(value) === '{}') {\n      value = \"\";\n    }\n\n    return value;\n  }\n\n  static reset(form: FormGroup, formConfig?: Form): void {\n    form.reset();\n\n    if (formConfig != null) {\n      for (let field of formConfig.formFields) {\n        if ((<Field>field.field).type == FieldType.AUTOCOMPLETE) {\n          field['default'] = null;\n        }\n      }\n    }\n  }\n\n  static getValueViaEval(record: any, key: string): any {\n    let value = \"\";\n    try {\n      if (StringUtils.isEmpty(value)) {\n        value = record[key];\n      }\n      value = eval(\"record.\" + key);\n    } catch (e) { }\n\n    return value;\n  }\n\n  static setOptionsUsingKey(form: Form, fieldKey: string, masterDataKey: string) {\n    if (!CollectionUtils.isEmpty(form) && !CollectionUtils.isEmpty(form.formFields)) {\n      form.formFields.forEach(formField => {\n        if (!CollectionUtils.isEmpty(formField) && !CollectionUtils.isEmpty(formField.field)) {\n          if (formField.field.key == fieldKey && (formField.field.type == FieldType.AUTOCOMPLETE || formField.field.type == FieldType.CHECKBOX || formField.field.type == FieldType.RADIO || formField.field.type == FieldType.DROPDOWN)) {\n            FieldUtils.setOptionsUsingKey(<AutocompleteField | RadioField | CheckboxField | DropdownField>formField.field, masterDataKey);\n          }\n        }\n      })\n    }\n  }\n\n  static setOptionsUsingValues(form: Form, fieldKey: string, keyMap: KeyMap, relaodAll: boolean, record: any) {\n    if (!CollectionUtils.isEmpty(form) && !CollectionUtils.isEmpty(form.formFields)) {\n      form.formFields.forEach(formField => {\n        if (!CollectionUtils.isEmpty(formField) && !CollectionUtils.isEmpty(formField.field)) {\n          let isMatchingDependendKeyMap: boolean = false;\n          if (!StringUtils.isEmpty((<AutocompleteField | RadioField | CheckboxField | DropdownField>formField.field).optionDependsOn)) {\n            //  get optionDependsOn field value\n            let optionDependsOnValue = FormUtils.getValueViaEval(record, (<AutocompleteField | RadioField | CheckboxField | DropdownField>formField.field).optionDependsOn);\n\n            if (keyMap.optionDependsOnValue == optionDependsOnValue) {\n              isMatchingDependendKeyMap = true;\n            }\n          } else {\n            isMatchingDependendKeyMap = true;\n          }\n\n          if (formField.field.key == fieldKey && (formField.field.type == FieldType.AUTOCOMPLETE || formField.field.type == FieldType.CHECKBOX || formField.field.type == FieldType.RADIO || formField.field.type == FieldType.DROPDOWN)) {\n            if (isMatchingDependendKeyMap) {//} || relaodAll) {\n              FieldUtils.setOptionsUsingValues(<AutocompleteField | RadioField | CheckboxField | DropdownField>formField.field, keyMap);\n            }\n          }\n        }\n      })\n    }\n  }\n\n  static changeButtonLabelIcon(form: Form, buttonIdentifier: string, label?: string, icon?: string) {\n    if (!CollectionUtils.isEmpty(form) && !CollectionUtils.isEmpty(<FormButton>form.action) && !CollectionUtils.isEmpty((<FormButton>form.action).buttons)) {\n      (<FormButton>form.action).buttons.forEach(button => {\n\n        if (!CollectionUtils.isEmpty(button) && button.identifier == buttonIdentifier) {\n          if (!StringUtils.isEmpty(label)) {\n            button.label = label;\n          }\n          if (!StringUtils.isEmpty(icon)) {\n            button.icon = icon\n          }\n        }\n      })\n    }\n  }\n}","import { DropdownOption } from '../field/model';\nimport { MasterData } from '../setting/model';\n\nexport class MasterDataUtils {\n    static getMasterDataFromLocalStore(key: string): MasterData {\n        let masterDataMap: Map<string, MasterData> = JSON.parse(localStorage.getItem(\"masterData\"));\n \n        return masterDataMap[key];\n    } \n\n    static getMasterDataAsOptions(masterDataKey: string): Array<DropdownOption> {\n        let masterData = MasterDataUtils.getMasterDataFromLocalStore(masterDataKey);\n\n        let options: Array<DropdownOption> = new Array<DropdownOption>();\n  \n        masterData.items.forEach(record => {\n          options.push({ key: record.key, value: record.label });\n        });  \n\n        return options;\n    }\n}\n","import { FormUtils } from './form.utility';\nimport { Field, FieldType, TextField, AutocompleteField, CheckboxField, RadioField, DropdownField, DropdownOption, KeyMap, DisplayMode } from '../field/model';\nimport { FormDiaplyMode } from '../form/model';\nimport { StringUtils } from './string.utility';\nimport { MasterDataUtils } from './master-data.utility'; \nimport { CollectionUtils } from '.';\n\nexport class FieldUtils {\n  static isFieldDisabled(field: Field, currentDisplayMode: FormDiaplyMode, value: string | Array<string>): boolean {\n    let isDisabled: boolean = false;\n    if (FormUtils.isFormDisable(currentDisplayMode) || field.displayMode == DisplayMode.DISABLED || field.type == FieldType.HIDDEN || field.isReadOnly || (field.isUnique && currentDisplayMode == FormDiaplyMode.EDIT && !StringUtils.isEmpty(value))) {\n      isDisabled = true;\n    }\n\n    return isDisabled;\n  }\n\n  static displayEllipsis(charLimit: number, value: any): boolean {\n    let showEllipsis: boolean = false;\n\n    let strValue = JSON.stringify(value);\n    if (charLimit && charLimit > 0 && !StringUtils.isEmpty(strValue) && strValue.length > charLimit) {\n      showEllipsis = true;\n    }\n    return showEllipsis;\n  }\n\n  static readOnlyField(): Array<string> {\n    return [FieldType.IMAGE, FieldType.IMAGE_AND_TEXT, FieldType.JSON, FieldType.LABEL, FieldType.BOOLEAN];\n  }\n\n  static isEllipsisField(field: Field) {\n    let hasEllipsis: boolean;\n\n    if ((field.type == FieldType.LABEL || field.type == FieldType.TEXT || field.type == FieldType.TEXTAREA || field.type == FieldType.EMAIL || field.type == FieldType.PASSWORD) && (<TextField>field).ellipsis > 0) {\n      hasEllipsis = true;\n    }\n\n    return hasEllipsis;\n  }\n\n  static setOptionsUsingKey(field: AutocompleteField | CheckboxField | RadioField | DropdownField, masterDataKey: string) {\n    if (!CollectionUtils.isEmpty(field)) {\n      let options: Array<DropdownOption> = MasterDataUtils.getMasterDataAsOptions(masterDataKey);\n\n      field.options = options;\n    }\n  }\n\n  static setOptionsUsingValues(field: AutocompleteField | CheckboxField | RadioField | DropdownField, keyMap: KeyMap) {\n    if (!CollectionUtils.isEmpty(field)) {\n      field.options = keyMap.options; \n    }\n  }\n}","import { Form, FormButton, FormButtonLayout, FormCellControl, FormCellControlType, FormCustomLayout, FormField } from \"../form/model\";\nimport { CollectionUtils } from \"./collection.utility\";\nimport { StringUtils } from \"./string.utility\";\n\n\nexport class FormCustomUtils {\n    static setCustomLayout(formConfig: Form, layout: FormCustomLayout) { \n        if (layout && !CollectionUtils.isEmpty(layout.cells)) {\n            layout.cells.forEach(cell => {\n                if (!CollectionUtils.isEmpty(cell.controls)) {\n                    cell.controls.forEach(control => {\n                        if (CollectionUtils.isEmpty(control.control))   {\n                            let resolvedControl: any = {};\n                            resolvedControl = this.getControl(formConfig, control);\n\n                            control.control = resolvedControl;\n\n                            // if (control.type == CellControllType.BUTTON && control.control['type'] == ButtonType.CHIP) {\n                            //     control.control['groupIdentifier'] = control.control.identifier + cell.rows + cell.cols;\n                            // }\n                        }\n                    });\n                }\n            })\n        }\n        console.log(formConfig.layout)\n    }\n\n    static getControl(formConfig: Form, cellControl: FormCellControl): any {\n        let control: any = {};\n\n        if (cellControl.control) {\n            control = cellControl.control;\n        } else if (!CollectionUtils.isEmpty(formConfig) && !CollectionUtils.isEmpty(formConfig.formFields) && cellControl.type == FormCellControlType.FIELD) {\n            control = this.getFieldControl(formConfig.formFields, cellControl.key);\n        } else if (!CollectionUtils.isEmpty(formConfig) && !CollectionUtils.isEmpty(formConfig.action) && cellControl.type == FormCellControlType.BUTTON) {\n            control = this.getButtonControl(formConfig.action, cellControl.key);\n        }\n\n        return control;\n    }\n\n    static getFieldControl(formFields: Array<FormField>, controlKey: string): any {\n        let control: any = {};\n\n        formFields.forEach(formField => {\n            if (!CollectionUtils.isEmpty(formField.field) && formField.field.key == controlKey) {\n                control = formField;\n            }\n        })\n\n        return control;\n    }\n\n    static getButtonControl(action: FormButton | FormButtonLayout, controlKey: string): any {\n        let control: any;\n\n        if (StringUtils.isEmpty(action['rowHeight']))   {\n            (<FormButton>action).buttons.forEach(button => {\n                if (button.identifier == controlKey) {\n                    control = button;\n                }\n            });\n        }   else    {\n            (<FormButtonLayout>action).cells.forEach(cell => {\n                cell.buttons.buttons.forEach(button => {\n                    if (button.identifier == controlKey) {\n                        control = button;\n                    }\n                });\n            })\n        }\n\n        return control;\n    }\n}","import { CellControl, CellControllType, Column, List, ListCustomLayout } from '../list/model';\nimport { CollectionUtils, FormUtils } from '.';\nimport { FieldType, AutocompleteField, RadioField, CheckboxField, DropdownField, DropdownOption, KeyMap, FieldAppearance, FieldDiaplyType } from '../field/model';\nimport { FieldUtils } from './field.utility';\nimport { StringUtils } from './string.utility';\nimport { Button, ButtonType } from '../button/model';\n\nexport class ListUtils {\n    static addColoumn() {\n\n    }\n\n    static hideColoumn() {\n\n    }\n\n    static setOptionsUsingKey(list: List, fieldKey: string, masterDataKey: string) {\n        if (!CollectionUtils.isEmpty(list) && !CollectionUtils.isEmpty(list.columns)) {\n            list.columns.forEach(column => {\n                if (!CollectionUtils.isEmpty(column) && !CollectionUtils.isEmpty(column.fields)) {\n                    column.fields.forEach(field => {\n                        if (!CollectionUtils.isEmpty(field) && field.key == fieldKey && (field.type == FieldType.AUTOCOMPLETE || field.type == FieldType.CHECKBOX || field.type == FieldType.RADIO || field.type == FieldType.DROPDOWN)) {\n                            FieldUtils.setOptionsUsingKey(<AutocompleteField | RadioField | CheckboxField | DropdownField>field, masterDataKey);\n                        }\n                    })\n                }\n            })\n        }\n    }\n\n    static setOptionsUsingValues(list: List, fieldKey: string, keyMap: KeyMap, relaodAll: boolean, record: any) {\n        if (!CollectionUtils.isEmpty(list) && !CollectionUtils.isEmpty(list.columns)) {\n            list.columns.forEach(column => {\n                if (!CollectionUtils.isEmpty(column) && !CollectionUtils.isEmpty(column.fields)) {\n                    column.fields.forEach(field => {\n                        let isMatchingDependendKeyMap: boolean = false;\n                        if (!StringUtils.isEmpty((<AutocompleteField | RadioField | CheckboxField | DropdownField>field).optionDependsOn)) {\n                            //  get optionDependsOn field value\n                            let optionDependsOnValue = FormUtils.getValueViaEval(record, (<AutocompleteField | RadioField | CheckboxField | DropdownField>field).optionDependsOn);\n\n                            if (keyMap.optionDependsOnValue == optionDependsOnValue) {\n                                isMatchingDependendKeyMap = true;\n                            }\n                        } else {\n                            isMatchingDependendKeyMap = true;\n                        }\n\n                        if (!CollectionUtils.isEmpty(field) && field.key == fieldKey && (field.type == FieldType.AUTOCOMPLETE || field.type == FieldType.CHECKBOX || field.type == FieldType.RADIO || field.type == FieldType.DROPDOWN)) {\n                            if (isMatchingDependendKeyMap) {//} || relaodAll)   {\n                                FieldUtils.setOptionsUsingValues(<AutocompleteField | RadioField | CheckboxField | DropdownField>field, keyMap);\n                            }\n                        }\n                    })\n                }\n            })\n        }\n    }\n\n\n    static getColumnKey(column: Column): string {\n        let key;\n        if (column.key) {\n            key = column.key;\n        } else {\n            if (column.fields && column.fields.length > 0) {\n                key = column.fields[0].key;\n            }\n        }\n\n        return key;\n    }\n\n\n    static getColumnLabel(column: Column): string {\n        let label;\n        if (column.label) {\n            label = column.label;\n        } else {\n            if (column.fields && column.fields.length > 0) {\n                label = column.fields[0].label;\n            }\n        }\n\n        return label;\n    }\n\n    static getColumnSelectorField(listConfig: List): DropdownField {\n        let options: Array<DropdownOption> = new Array<DropdownOption>();\n\n        let values: Array<string> = new Array<string>();\n        for (let column of listConfig.columns) {\n            let key: string = this.getColumnKey(column);\n            let label: string = this.getColumnLabel(column);\n\n            options.push({\n                key: key,\n                value: label,\n                disabled: false,\n                selected: column.show\n            });\n\n            if (column.show) {\n                values.push(key)\n            }\n        }\n\n        let columnSelectorField: DropdownField = {\n            key: \"columnSelector\",\n            label: \"Display Column\",\n            type: FieldType.DROPDOWN,\n            appearance: FieldAppearance.STANDARD,\n            isReadOnly: false,\n            fieldDisplayType: FieldDiaplyType.INLINE,\n            placeholder: \"Columns to display\",\n            options: options,\n            multiselect: true,\n            value: values\n        };\n\n        return columnSelectorField;\n    }\n\n    static getMobileConfig(listConfig: List) {\n        if (!CollectionUtils.isEmpty(listConfig) && !CollectionUtils.isEmpty(listConfig.mobile) && !CollectionUtils.isEmpty(listConfig.mobile.cells)) {\n            this.setCustomLayout(listConfig, listConfig.mobile);\n        }\n    }\n\n    static setCustomLayouts(listConfig: List) {\n        if (this.hasRowHover(listConfig)) {\n            this.setCustomLayout(listConfig, listConfig.row.hover.template.layout);\n        }\n        if (this.hasCustomCellLayout(listConfig)) {\n            listConfig.columns.forEach(column => {\n                if (column.template && column.template.layout)  {\n                    this.setCustomLayout(listConfig, column.template.layout);\n                }\n            })\n        }\n        if (this.hasCustomRowLayout(listConfig)) {\n            this.setCustomLayout(listConfig, listConfig.row.template.layout);\n        }\n    }\n\n    static hasRowHover(listConfig: List): boolean {\n        let hasHoverConfig: boolean = false;\n        \n        if (listConfig && listConfig.row && listConfig.row.hover && listConfig.row.hover.template && listConfig.row.hover.template.layout)  {\n            hasHoverConfig = true;\n        }\n\n        return hasHoverConfig;\n    }\n\n    static hasCustomRowLayout(listConfig: List): boolean {\n        let hasCustomRowLayout: boolean = false;\n        \n        if (listConfig && listConfig.row && listConfig.row.template && listConfig.row.template.layout)  {\n            hasCustomRowLayout = true;\n        }\n        \n        return hasCustomRowLayout;\n    }\n\n    static hasCustomCellLayout(listConfig: List): boolean {\n        let hasCustomCellLayout: boolean = false;\n        \n        if (listConfig && !CollectionUtils.isEmpty(listConfig.columns))  {\n            listConfig.columns.forEach(column => {\n                if (column.template && column.template.layout)  {\n                    hasCustomCellLayout = true;\n                }\n            })\n        }\n        \n        return hasCustomCellLayout;\n    }\n\n    static setCustomLayout(listConfig: List, layout: ListCustomLayout) {\n        if (layout && !CollectionUtils.isEmpty(layout.cells)) {\n            layout.cells.forEach(cell => {\n                if (!CollectionUtils.isEmpty(cell.controls)) {\n                    cell.controls.forEach(control => {\n                        if (CollectionUtils.isEmpty(control.control))   {\n                            let resolvedControl: { control?: any, colIndex?: number, cControlIndex?: number } = {};\n                            resolvedControl = this.getControl(listConfig, control);\n\n                            control.control = resolvedControl.control;\n                            control.colIndex = resolvedControl.colIndex;\n                            control.cControlIndex = resolvedControl.cControlIndex;\n\n                            // if (control.type == CellControllType.BUTTON && control.control['type'] == ButtonType.CHIP) {\n                            //     control.control['groupIdentifier'] = control.control.identifier + cell.rows + cell.cols;\n                            // }\n                        }\n                    });\n                }\n            })\n        }\n    }\n\n    static getControl(listConfig: List, cellControl: CellControl): { control?: any, colIndex?: number, cControlIndex?: number } {\n        let control: { control?: any, colIndex?: number, cControlIndex?: number } = {};\n\n        if (cellControl.control) {\n            control = { control: cellControl.control, colIndex: 0, cControlIndex: 0 };\n        } else if (!CollectionUtils.isEmpty(listConfig) && !CollectionUtils.isEmpty(listConfig.columns) && cellControl.type == CellControllType.FIELD) {\n            control = this.getColumnControl(listConfig.columns, cellControl.key);\n        } else if (!CollectionUtils.isEmpty(listConfig) && !CollectionUtils.isEmpty(listConfig.actions) && cellControl.type == CellControllType.BUTTON) {\n            control.control = this.getButtonControl(listConfig.actions, cellControl.key);\n            control.colIndex = listConfig.columns.length;\n        }\n\n        return control;\n    }\n\n    static getColumnControl(columns: Array<Column>, controlKey: string): { control?: any, colIndex?: number, cControlIndex?: number } {\n        let control: { control?: any, colIndex?: number, cControlIndex?: number } = {};\n\n        let colIndex = 0;\n        columns.forEach(column => {\n            if (!CollectionUtils.isEmpty(column.fields) && CollectionUtils.isEmpty(control.control)) {\n                let cControlIndex = 0;\n                column.fields.forEach(field => {\n                    if (CollectionUtils.isEmpty(control.control)) {\n                        control = ListUtils.getFieldControl(field, controlKey, colIndex, cControlIndex);\n                        cControlIndex++;\n                    }\n                })\n            }\n            colIndex++;\n        })\n\n        return control;\n    }\n\n    static getFieldControl(field: any, controlKey: string, colIndex: number, cControlIndex: number): { control?: any, colIndex?: number, cControlIndex?: number } {\n        let control: { control?: any, colIndex?: number, cControlIndex?: number } = {};\n\n        if (field.key == controlKey) {\n            control.control = field;\n            control.colIndex = colIndex;\n            control.cControlIndex = cControlIndex;\n            console.log(\"1111111\");\n            console.log(control);\n        }\n\n        return control;\n    }\n\n    static getButtonControl(buttons: Array<Button>, controlKey: string): any {\n        let control: any;\n\n        buttons.forEach(button => {\n            if (button.identifier == controlKey) {\n                control = button;\n            }\n        })\n\n        return control;\n    }\n}","import { Property } from '../setting/model';\n\nexport class PropertyUtils {\n    static getPropertyFromLocalStore(key: string): Property {\n        let propertiesMap: Map<string, Property> = JSON.parse(localStorage.getItem(\"properties\"));\n\n        return propertiesMap[key];\n    }\n}\n","import * as CryptoJS from 'crypto-js';\n\nexport class SecurityUtils {\n  static encrypt(data: any) {\n    try {\n      return CryptoJS.AES.encrypt(JSON.stringify(data), 'key').toString();\n    } catch (e) {\n      Error(e);\n    }\n  }\n\n  static decrypt(data: any) {\n    try {\n      const bytes = CryptoJS.AES.decrypt(data, 'key');\n      if (bytes.toString()) {\n        return JSON.parse(bytes.toString(CryptoJS.enc.Utf8));\n      }\n      return data;\n    } catch (e) {\n      Error(e);\n    }\n  }\n}","import { DropdownOption } from '../field/model';\nimport { CollectionUtils } from '.';\n\nexport class DropdownUtils {\n  static getValue(key: string, options: Array<DropdownOption>): any  {\n    let value: any;\n\n    if (!CollectionUtils.isEmpty(options))  {\n      options.forEach(option => {\n        if (option.key == key)  {\n          value = option.value;\n        }\n      })\n    }\n\n    return value;\n  }\n}\n","import { Form, FormDiaplyMode } from '../form/model';\nimport { CollectionUtils } from './collection.utility';\nimport { Crud, CrudWidgetType, CrudTab } from '../crud/model';\nimport { FormUtils } from './form.utility';\nimport { ListUtils } from './list.utility';\nimport { List } from '../list/model';\nimport { DropdownOption, KeyMap } from '../field/model';\n\nexport class CrudUtils {\n  static setOptionsUsingKey(crud: Crud, fieldKey: string, masterDataKey: string) {\n    if (!CollectionUtils.isEmpty(crud) && !CollectionUtils.isEmpty(crud.form) && !CollectionUtils.isEmpty(crud.form.tabs)) {\n      crud.form.tabs.forEach(tab => {\n        if (!CollectionUtils.isEmpty(tab) && !CollectionUtils.isEmpty(tab.widgets)) {\n          tab.widgets.forEach(widget => {\n            if (!CollectionUtils.isEmpty(widget) && widget.widgetType == CrudWidgetType.FORM) {\n              FormUtils.setOptionsUsingKey(<Form>widget.widget, fieldKey, masterDataKey);\n            }\n            if (!CollectionUtils.isEmpty(widget) && widget.widgetType == CrudWidgetType.LIST) {\n              ListUtils.setOptionsUsingKey(<List>widget.widget, fieldKey, masterDataKey);\n            }\n          })\n        }\n      })\n    }\n\n    if (!CollectionUtils.isEmpty(crud) && !CollectionUtils.isEmpty(crud.list) && !CollectionUtils.isEmpty(crud.list.lists)) {\n      crud.list.lists.forEach(list => {\n        if (!CollectionUtils.isEmpty(list)) {\n          ListUtils.setOptionsUsingKey(list, fieldKey, masterDataKey);\n        }\n      })\n    }\n\n    if (!CollectionUtils.isEmpty(crud) && !CollectionUtils.isEmpty(crud.search) && !CollectionUtils.isEmpty(crud.search.form))  {\n      FormUtils.setOptionsUsingKey(crud.search.form, fieldKey, masterDataKey);\n    }\n  }\n\n  static setOptionsUsingValues(crud: Crud, fieldKey: string, keyMap: KeyMap, relaodAll: boolean, record: any) {\n    if (!CollectionUtils.isEmpty(crud) && !CollectionUtils.isEmpty(crud.form) && !CollectionUtils.isEmpty(crud.form.tabs)) {\n      crud.form.tabs.forEach(tab => {\n        if (!CollectionUtils.isEmpty(tab) && !CollectionUtils.isEmpty(tab.widgets)) {\n          tab.widgets.forEach(widget => {\n            if (!CollectionUtils.isEmpty(widget) && widget.widgetType == CrudWidgetType.FORM) {\n              FormUtils.setOptionsUsingValues(<Form>widget.widget, fieldKey, keyMap, relaodAll, record);\n            }\n            if (!CollectionUtils.isEmpty(widget) && widget.widgetType == CrudWidgetType.LIST) {\n              ListUtils.setOptionsUsingValues(<List>widget.widget, fieldKey, keyMap, relaodAll, record);\n            }\n          })\n        }\n      })\n    }\n\n    if (!CollectionUtils.isEmpty(crud) && !CollectionUtils.isEmpty(crud.list) && !CollectionUtils.isEmpty(crud.list.lists)) {\n      crud.list.lists.forEach(list => {\n        if (!CollectionUtils.isEmpty(list)) {\n          ListUtils.setOptionsUsingValues(list, fieldKey, keyMap, relaodAll, record);\n        }\n      })\n    }\n\n    if (!CollectionUtils.isEmpty(crud) && !CollectionUtils.isEmpty(crud.search) && !CollectionUtils.isEmpty(crud.search.form))  {\n      FormUtils.setOptionsUsingValues(crud.search.form, fieldKey, keyMap, relaodAll, record);\n    }\n  }\n\n  static setDisplayType(crudTabs: Array<CrudTab>, formDisplayMode: FormDiaplyMode) {\n    if (!CollectionUtils.isEmpty(crudTabs)) {\n      crudTabs.forEach(tab => {\n        if (!CollectionUtils.isEmpty(tab) && !CollectionUtils.isEmpty(tab.widgets)) {\n          tab.widgets.forEach(widget => {\n            if (!CollectionUtils.isEmpty(widget) && widget.widgetType == CrudWidgetType.FORM) {\n              (<Form>widget.widget).displayMode = formDisplayMode;\n            }\n          })\n        }\n      })\n    }\n  }\n\n  static changeButtonLabelIcon(crudTabs: Array<CrudTab>, buttonIdentifier: string, label?: string, icon?: string)  {\n    if (!CollectionUtils.isEmpty(crudTabs)) {\n      crudTabs.forEach(tab => {\n        if (!CollectionUtils.isEmpty(tab) && !CollectionUtils.isEmpty(tab.widgets)) {\n          tab.widgets.forEach(widget => {\n            if (!CollectionUtils.isEmpty(widget) && widget.widgetType == CrudWidgetType.FORM) {\n              FormUtils.changeButtonLabelIcon((<Form>widget.widget), buttonIdentifier, label, icon);\n            }\n          })\n        }\n      })\n    }\n  }\n}","import { KeyMap, KeyMapAssociation, DropdownOption, KeyMapOptionType } from '../field/model';\nimport { CollectionUtils, FormUtils, ListUtils } from '.';\nimport { CrudUtils } from './crud.utility';\nimport { Crud } from '../crud/model';\nimport { Form } from '../form/model';\nimport { List } from '../list/model';\nimport { MasterDataUtils } from './master-data.utility';\n\nexport class KeyMapUtils {\n  static push(keyMaps: Array<KeyMap>, associations: Array<KeyMapAssociation>, options: Array<DropdownOption> | string, optionType: KeyMapOptionType, optionComponent: Crud | Form | List, optionDependsOnValue?: string, record?: any): Array<KeyMap> {\n    // if (CollectionUtils.isEmpty(keyMaps)) {\n    //   keyMaps = new Array<KeyMap>();\n    // }\n\n    let optionsDD: Array<DropdownOption>;\n    if (!(options instanceof Array)) {\n      optionsDD = MasterDataUtils.getMasterDataAsOptions(<string>options);\n    } else {\n      optionsDD = options;\n    }\n\n    if (!CollectionUtils.isEmpty(associations)) {\n      keyMaps.push(KeyMapUtils.generateKeyMap(associations, options, optionDependsOnValue));\n\n      KeyMapUtils.setOptionssUsingValues(keyMaps, true, optionType, optionComponent, record);\n    }\n\n    return keyMaps;\n  }\n\n  static generateKeyMap(associations: Array<KeyMapAssociation>, options: Array<DropdownOption> | string, optionDependsOnValue?: string): KeyMap {\n    // if (CollectionUtils.isEmpty(keyMaps)) {\n    //   keyMaps = new Array<KeyMap>();\n    // }\n\n    let optionsDD: Array<DropdownOption>;\n    if (!(options instanceof Array)) {\n      optionsDD = MasterDataUtils.getMasterDataAsOptions(<string>options);\n    } else {\n      optionsDD = options;\n    }\n\n    let keyMap: KeyMap;\n    if (!CollectionUtils.isEmpty(associations)) {\n      keyMap = { associations: associations, options: optionsDD, optionDependsOnValue: optionDependsOnValue };\n    }\n\n    return keyMap;\n  }\n\n  static setOptionssUsingValues(keyMaps: Array<KeyMap>, relaodAll: boolean, optionType: KeyMapOptionType, optionComponent: Crud | Form | List, record?: any): void {\n    if (!CollectionUtils.isEmpty(keyMaps)) {\n      keyMaps.forEach(keyMap => {\n        if (!CollectionUtils.isEmpty(keyMap.associations)) {\n          keyMap.associations.forEach(association => {\n            if (optionType != null && KeyMapOptionType.CRUD == optionType) {\n              CrudUtils.setOptionsUsingValues(<Crud>optionComponent, association.fieldKey, keyMap, relaodAll, record);\n            }\n            if (KeyMapOptionType.FORM == optionType) {\n              FormUtils.setOptionsUsingValues(<Form>optionComponent, association.fieldKey, keyMap, relaodAll, record);\n            }\n            if (KeyMapOptionType.LIST == optionType) {\n              ListUtils.setOptionsUsingValues(<List>optionComponent, association.fieldKey, keyMap, relaodAll, record);\n            }\n          });\n        }\n      })\n    }\n  }\n\n  static getValue(keyMaps: Array<KeyMap>, fieldKey: string, valueAsKey: any): any {\n    let value: any = \"\";\n\n    if (!CollectionUtils.isEmpty(keyMaps)) {\n      keyMaps.forEach(keyMap => {\n        if (!CollectionUtils.isEmpty(keyMap.associations)) {\n          keyMap.associations.forEach(association => {\n            if (association.fieldKey == fieldKey && !CollectionUtils.isEmpty(keyMap.options)) {\n              keyMap.options.forEach(option => {\n                if (option.key == valueAsKey) {\n                  value = option.value;\n                }\n              });\n            }\n          })\n        }\n      });\n    }\n\n    return value;\n  }\n}\n","import { Ability, RawRule } from '@casl/ability';\n\nexport class AbilityUtils {\n    static setAbility(ability: Ability): void {\n        let user: any = JSON.parse(localStorage.getItem(\"user\"));\n\n        if (user && user['permissions']) {\n            let rules: Array<RawRule> = <Array<RawRule>>user['permissions'];\n            ability.update(<any>rules);\n        }\n    }\n}\n","import { Component, OnInit, Inject } from '@angular/core';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { ObjectUtils, StringUtils } from '../../../utility';\nimport { ConfirmationPopupButton, ConfirmationPopup, ObjectTree } from '../../model';\nimport { FormGroup } from '@angular/forms';\nimport { AbilityUtils } from '../../../utility/ability.utility';\nimport { Ability } from '@casl/ability';\n\nexport interface DialogData {\n  form: FormGroup,\n  sourceIdentifier: string,\n  sourceIndex: number,\n  widgetArrayIndex: number,\n  context: any,\n  originalData: any, \n  buttonRoute: Array<string>,\n  parentHierarchy: ObjectTree,\n  confirmationConfig: ConfirmationPopup;\n}\n\n@Component({\n  selector: 'cf-button-delete-confirmation',\n  templateUrl: './button-delete-confirmation.component.html',\n  styleUrls: ['./button-delete-confirmation.component.scss']\n})\nexport class ButtonDeleteConfirmationComponent implements OnInit {\n\n  constructor(public dialogRef: MatDialogRef<ButtonDeleteConfirmationComponent>,\n    @Inject(MAT_DIALOG_DATA) public data: DialogData,\n    private ability: Ability) { \n      AbilityUtils.setAbility(this.ability);\n    } \n\n  title: string;\n  message: string;\n\n  ngOnInit(): void {\n    this.title = this.resolve(this.data.confirmationConfig.title);\n    this.message = this.resolve(this.data.confirmationConfig.message);\n  }\n\n  displayOnlyIcon(button: ConfirmationPopupButton): boolean {\n    return button && !StringUtils.isEmpty(button.icon) && StringUtils.isEmpty(button.label) ? true : false;\n  }\n\n  displayIcon(button: ConfirmationPopupButton): boolean {\n    return button && !StringUtils.isEmpty(button.icon) ? true : false;\n  }\n\n  resolve(text: string): string {\n    return ObjectUtils.resolve(text, this.data.originalData);\n  }\n\n  click(event: any) {\n    this.dialogRef.close(event);\n  }\n}\n","import { Component, OnInit, Input, Output, EventEmitter, OnDestroy } from '@angular/core';\nimport { Button, ObjectTree, ReservedButton, Action, ButtonType, HoverButton, ButtonGroup, ButtonColor, ButtonSize, IconPosition } from '../../model';\nimport { FormGroup } from '@angular/forms';\nimport { MatDialog } from '@angular/material/dialog';\nimport { ButtonDeleteConfirmationComponent } from '../button-delete-confirmation/button-delete-confirmation.component';\nimport { Subscription } from 'rxjs';\nimport { Params, Router, ActivatedRoute } from '@angular/router';\nimport { FormDiaplyMode } from '../../../form/model';\nimport { StringUtils, CollectionUtils, FormUtils, SecurityUtils, ButtonUtils, DependentUtils } from '../../../utility';\nimport { AbilityUtils } from '../../../utility/ability.utility';\nimport { Ability } from '@casl/ability';\n\n@Component({\n  selector: 'cf-button',\n  templateUrl: './button.component.html',\n  styleUrls: ['./button.component.scss']\n})\nexport class ButtonComponent implements OnInit, OnDestroy {\n  @Input() form: FormGroup;\n  @Input() formDisplayMode: FormDiaplyMode;\n\n  @Input() sourceIdentifier: string;\n  @Input() sourceIndex: number;\n  @Input() widgetArrayIndex: number;\n  @Input() identifier: string;\n  @Input() context: any;\n  @Input() originalData: any;\n  @Input() label: string;\n  @Input() buttonRoute: Array<string>;\n  @Input() parentHierarchy: ObjectTree;\n  @Input() disabled: boolean;\n  @Output() onClick = new EventEmitter();\n  @Output() onIconClick = new EventEmitter();\n\n  @Input() _button: Button | ButtonGroup | HoverButton;\n  get button(): Button | ButtonGroup | HoverButton {\n    return this._button;\n  }\n  @Input()\n  set button(_button: Button | ButtonGroup | HoverButton) {\n    this._button = _button;\n    if (StringUtils.isEmpty(this.label) || !StringUtils.isEmpty(this._button.label)) {\n      this.label = this._button.label;\n    }\n    if (StringUtils.isEmpty(this._button.width)) {\n      this._button.width = '';\n    } else {\n      this._button.width = this._button.width + '%';\n      document.documentElement.style.setProperty('--width', this._button.width + '%');\n    }\n    if (StringUtils.isEmpty(this._button.iconPosition)) {\n      this._button.iconPosition = IconPosition.LEFT;\n    }\n  }\n\n  routerLink = [];\n\n  displayButton: boolean = true;\n  isButtonDisabled: boolean = false;\n  isDisplayOnlyIcon: boolean = false;\n  hasIconDisplay: boolean = false;\n  isFlatButton: boolean = false;\n  isGhostButton: boolean = false;\n  isRaisedButton: boolean = false;\n  isStrokedButton: boolean = false;\n  isFabButton: boolean = false;\n  isChip: boolean = false;\n  isLink: boolean = false;\n  isGroupButton: boolean = false;\n  isMenuButton: boolean = false;\n  buttonWithoutPadding: boolean = false;\n\n\n  formSubscription: Subscription;\n\n  constructor(\n    public dialog: MatDialog,\n    private router: Router,\n    private route: ActivatedRoute,\n    private ability: Ability\n  ) {\n    AbilityUtils.setAbility(this.ability);\n  }\n\n  ngOnInit() {\n    if (this.displayButton) {\n      this.setLabel();\n\n      this.setButtonEnable();\n      if (this.form) {\n        this.formSubscription = this.form.valueChanges.subscribe(obj => {\n          this.setButtonEnable();\n        });\n      }\n\n      this.setButtonDisplay();\n      this.setOnlyIconDisplay();\n      this.setIconDisplay();\n      this.setLink();\n      this.setGroupButton();\n      this.setFlatButton();\n      this.setGhostButton();\n      this.setRaisedButton();\n      this.setStrokedButton();\n      this.setFabButton();\n      this.setChip();\n      this.setButtonWithoutPadding();\n      this.setMenuButton();\n    }\n  }\n\n  setButtonDisplay() {\n    if ((!CollectionUtils.isEmpty(this._button.displayInFormModes) && this._button.displayInFormModes.indexOf(this.formDisplayMode) <= -1) || !DependentUtils.displayDependencyField(this._button.dependentOnFields, null, this.context ? this.context : this.originalData)) {\n      this.displayButton = false;\n    }\n  }\n\n  setButtonWithoutPadding() {\n    if (this._button.identifier == \"fieldTextClearBtn\" || this._button.identifier == \"fieldRouteToBtn\" || this._button.identifier == \"listFieldAsLink\" || this.identifier == \"listFieldAsLink\") {\n      this.buttonWithoutPadding = true;\n    }\n  }\n  setLabel(): void {\n    if (StringUtils.isEmpty(this.label)) {\n      this.label = this._button.label;\n    }\n  }\n\n  state: boolean = true;\n  click(event: any) {\n    if (!CollectionUtils.isEmpty(this._button.confirmationConfiguration)) {\n      this.openDialog(event);\n    } else {\n      this.invokeAction(null, event);\n    }\n  }\n\n  openDialog(event: any): void {\n    const dialogRef = this.dialog.open(ButtonDeleteConfirmationComponent, {\n      width: this._button.confirmationConfiguration.width ? this._button.confirmationConfiguration.width : '250px',\n      data: {\n        form: this.form,\n        sourceIdentifier: this.sourceIdentifier,\n        sourceIndex: this.sourceIndex,\n        widgetArrayIndex: this.widgetArrayIndex,\n        context: this.context,\n        originalData: this.originalData,\n        buttonRoute: this.buttonRoute,\n        parentHierarchy: this.parentHierarchy,\n        confirmationConfig: this._button.confirmationConfiguration,\n      }\n    });\n\n    dialogRef.afterClosed().subscribe(result => {\n      console.log('The dialog was closed');\n      this.invokeAction(result, event);\n    });\n  }\n\n  invokeAction(actionDialog: any, event: any): void {\n    if (this._button.identifier == \"crudBackButton\" && this.buttonRoute && this.buttonRoute.length > 0) {\n      this.router.navigate(this.buttonRoute, { skipLocationChange: false, replaceUrl: true });\n      return;\n    }\n\n    if (this._button.identifier == ReservedButton.RESET) {\n      FormUtils.reset(this.form);\n      this.context = {};\n    }\n\n    let action: Action = ButtonUtils.getAction(\n                            this.sourceIdentifier, \n                            this.sourceIndex, \n                            this.widgetArrayIndex, \n                            this._button.identifier, \n                            this.parentHierarchy, \n                            event, \n                            this.originalData, \n                            this.context, \n                            actionDialog);\n\n    if (this._button.identifier == ReservedButton.SEARCH || this._button.identifier == ReservedButton.RESET) {\n      this.addSearchParamsInUrl(action.data);\n    } else {\n      this.onClick.emit(action);\n    }\n  }\n\n  iconClick(event: any): void {\n    let action: Action = ButtonUtils.getAction(\n                            this.sourceIdentifier, \n                            this.sourceIndex, \n                            this.widgetArrayIndex, \n                            this._button.identifier, \n                            this.parentHierarchy, \n                            event, \n                            this.originalData, \n                            this.context, \n                            null);\n\n    if (this._button['groupIdentifier'] == ReservedButton.CLEAR_FILTER_FIELD) {\n      delete action.data[action.action];\n      this.addSearchParamsInUrl(action.data);\n    } else  {\n      this.onIconClick.emit(action);\n    }\n  }\n  \n  public addSearchParamsInUrl(filterData: any) {\n    const queryParams: Params = { filter: SecurityUtils.encrypt(filterData) };\n\n    this.router.navigate(\n      [],\n      {\n        relativeTo: this.route,\n        queryParams: queryParams,\n        queryParamsHandling: 'merge', // remove to replace all query params by provided\n        skipLocationChange: false,\n        replaceUrl: true\n      });\n  }\n\n  setButtonEnable(): void {\n    let isButtonDisabled: boolean = false;\n\n    if (this.form) {\n      isButtonDisabled = !this.form.valid;\n    }\n    if (this.form && this.form.disabled) {\n      isButtonDisabled = false;\n    }\n    if (this._button.identifier == ReservedButton.SEARCH || this._button.identifier == ReservedButton.CANCEL || this._button.identifier == ReservedButton.RESET || this._button.identifier == ReservedButton.ADD_FIELD || this._button.identifier == ReservedButton.REMOVE_FIELD || this._button.alwaysEnable == true) {\n      isButtonDisabled = false;\n    }\n    if (this.disabled) {\n      isButtonDisabled = this.disabled;\n    }\n    this.isButtonDisabled = isButtonDisabled;\n  }\n\n  setOnlyIconDisplay(): void {\n    this.isDisplayOnlyIcon = this._button && this._button.onlyIcon && !StringUtils.isEmpty(this._button.icon) ? true : false;\n  }\n\n  setIconDisplay(): void {\n    this.hasIconDisplay = this._button && this._button.icon ? true : false;\n  }\n\n  setFlatButton(): void {\n    this.isFlatButton = this._button && ButtonUtils.instanceOfButton(this._button) ? (<Button>this._button).type == ButtonType.FLAT && !this.isGroupButton && !this.isLink : false;\n  }\n\n  setGhostButton(): void {\n    this.isGhostButton = this._button && ButtonUtils.instanceOfButton(this._button) ? (<Button>this._button).type == ButtonType.GHOST && !this.isGroupButton && !this.isLink : false;\n  }\n\n  setRaisedButton(): void {\n    this.isRaisedButton = this._button && ButtonUtils.instanceOfButton(this._button) ? (<Button>this._button).type == ButtonType.RAISED && !this.isGroupButton && !this.isLink : false;\n  }\n\n  setStrokedButton(): void {\n    this.isStrokedButton = this._button && ButtonUtils.instanceOfButton(this._button) ? (<Button>this._button).type == ButtonType.STROKED && !this.isGroupButton && !this.isLink : false;\n  }\n\n  setFabButton(): void {\n    this.isFabButton = this._button && ButtonUtils.instanceOfButton(this._button) ? (<Button>this._button).type == ButtonType.FAB && !this.isGroupButton && !this.isLink : false;\n  }\n\n  setChip(): void {\n    this.isChip = this._button && ButtonUtils.instanceOfChipButton(this._button) && !StringUtils.isEmpty((<ButtonGroup>this._button).groupIdentifier) ? true : false;\n  }\n\n  setLink(): void {\n    this.isLink = this._button && !StringUtils.isEmpty(this.label) ? !CollectionUtils.isEmpty((<Button>this._button).routerLink) : false;\n    this.routerLink = (<Button>this._button).routerLink;\n  }\n\n  setGroupButton(): void {\n    this.isGroupButton = this._button && ButtonUtils.instanceOfButtonGroup(this._button) && !StringUtils.isEmpty((<ButtonGroup>this._button).groupIdentifier) ? true : false;\n  }\n\n  setMenuButton(): void {\n    this.isMenuButton = this._button && ButtonUtils.instanceOfHoverButton(this._button) ? true : false;\n  }\n\n  ngOnDestroy() {\n    if (this.formSubscription) {\n      this.formSubscription.unsubscribe();\n    }\n  }\n}\n","import { Component, OnInit, Input, ViewEncapsulation, Output, EventEmitter } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { Button, ObjectTree, ButtonGroup, HoverButton, Badge, ButtonType } from '../../model';\nimport { ButtonGroupList, HoverButtonList } from '../../model/button-group.model';\nimport { FormDiaplyMode } from '../../../form/model';\nimport { ObjectUtils, ButtonUtils, StringUtils, CollectionUtils } from '../../../utility';\nimport { AbilityUtils } from '../../../utility/ability.utility';\nimport { Ability } from '@casl/ability';\n\n@Component({\n  selector: 'cf-button-group',\n  templateUrl: './button-group.component.html',\n  styleUrls: ['./button-group.component.scss', '../button/button.component.scss'],\n  encapsulation: ViewEncapsulation.None\n})\nexport class ButtonGroupComponent implements OnInit {\n  @Input() form: FormGroup;\n  @Input() formDisplayMode: FormDiaplyMode;\n\n  @Input() sourceIdentifier: string;\n  @Input() sourceIndex: number;\n  @Input() widgetArrayIndex: number;\n  @Input() _buttons: Array<Button | ButtonGroup | HoverButton>;\n\n  get buttons(): Array<Button | ButtonGroup | HoverButton> {\n    return this._buttons;\n  }\n  @Input()\n  set buttons(_buttons: Array<Button | ButtonGroup | HoverButton>) {\n    if (!(_buttons instanceof Array)) {\n      let btns = new Array<Button | ButtonGroup | HoverButton>();\n      btns.push(_buttons);\n      _buttons = btns;\n    }\n    this._buttons = _buttons;\n\n    this.getButtonList();\n    this.getButtonType();\n\n    this.displayDesktopDD = this.hasMobileButton('showOnDesktop');\n    this.displayTabletDD = this.hasMobileButton('showOnTablet');\n    this.displayMobileDD = this.hasMobileButton('showOnMobile');\n\n    if (this.displayDesktopDD || this.displayMobileDD || this.displayTabletDD)  {\n      this.changeButtonTypeToGhost();\n    }\n  }\n\n  @Input() context: any;\n  @Input() originalData: any;\n  @Input() buttonRoute: Array<string>;\n  @Input() parentHierarchy: ObjectTree;\n  @Input() disabled: boolean;\n  @Output() onClick = new EventEmitter();\n  @Output() onIconClick = new EventEmitter();\n\n  buttonLists: Array<Array<Button> | ButtonGroupList | HoverButtonList> = new Array<Array<Button> | ButtonGroupList | HoverButtonList>();\n  buttonListsType: Array<string> = new Array<string>();\n\n  displayDesktopDD: boolean = false;\n  displayTabletDD: boolean = false;\n  displayMobileDD: boolean = false;\n  hoverButtonLists: Array<Array<Button> | ButtonGroupList | HoverButtonList> = new Array<Array<Button> | ButtonGroupList | HoverButtonList>();\n\n  constructor(private ability: Ability) {\n    AbilityUtils.setAbility(this.ability);\n  }\n\n  ngOnInit(): void {\n    // this.getButtonList();\n    // this.getButtonType();\n  }\n\n  hasMobileButton(displayIn: string): boolean {\n    let hasButtonsForDropdown: boolean = false;\n\n    if (!CollectionUtils.isEmpty(this.buttonLists)) {\n      this.buttonLists.forEach(buttons => {\n        if (!CollectionUtils.isEmpty(buttons) && buttons instanceof Array) {\n          (<Array<Button>>buttons).forEach(button => {\n            if (button['showOnDesktop'] == null && button['showOnTablet'] == null && button['showOnMobile'] == null)  {\n              button['showOnDesktop'] = true;\n              button['showOnTablet'] = true;\n              button['showOnMobile'] = true; \n            }\n\n            if (button[displayIn]) {\n              hasButtonsForDropdown = true;\n            }\n          })\n        }\n      });\n    }\n\n    return hasButtonsForDropdown;\n  }\n \n  changeButtonTypeToGhost() {\n    this.hoverButtonLists = JSON.parse(JSON.stringify(this.buttonLists));\n\n    if (!CollectionUtils.isEmpty(this.hoverButtonLists)) {\n      this.hoverButtonLists.forEach(buttons => {\n        if (!CollectionUtils.isEmpty(buttons) && buttons instanceof Array) {\n          (<Array<Button>>buttons).forEach(button => {\n            button.type = ButtonType.GHOST;\n          })\n        }\n      });\n    }\n  }\n\n  getButtonList() {\n    this.buttonLists = new Array<Array<Button> | ButtonGroupList | HoverButtonList>();\n    let buttonArray: Array<Array<Button>> = new Array<Array<Button>>();\n    let buttonArrayIndex: number = 0;\n\n    if (this._buttons) {\n      for (let index = 0; index < this._buttons.length; index++) {\n        if (ButtonUtils.instanceOfButton(this._buttons[index])) {\n          if (ObjectUtils.isEmpty(buttonArray[buttonArrayIndex])) {\n            buttonArray[buttonArrayIndex] = new Array<Button>();\n\n            this.buttonLists.push(buttonArray[buttonArrayIndex]);\n          }\n\n          buttonArray[buttonArrayIndex].push(<Button>this._buttons[index]);\n        }\n        if (ButtonUtils.instanceOfButtonGroup(this._buttons[index]) || ButtonUtils.instanceOfChipButton(this._buttons[index])) {\n          let bgAdded = this.getGroupButton((<ButtonGroup>this._buttons[index]).groupIdentifier, this.buttonLists)\n\n          if (bgAdded) {\n            buttonArrayIndex++;\n          }\n        }\n      }\n\n      let hoverButton: HoverButtonList = this.getHoverButtons();\n      if (hoverButton && hoverButton.hoverButtons && hoverButton.hoverButtons.length > 0) {\n        this.buttonLists.push(hoverButton);\n        buttonArrayIndex++;\n      }\n    }\n  }\n\n  isGroupAdded(groupIdentifier: string, buttonLists: Array<Array<Button> | ButtonGroupList | HoverButtonList>): boolean {\n    let groupAdded: boolean = false;\n\n    if (buttonLists) {\n      groupAdded = buttonLists.filter(buttonList => buttonList && (<ButtonGroupList>buttonList).groupIdentifier == groupIdentifier).length > 0;\n    }\n\n    return groupAdded;\n  }\n\n  getGroupButton(groupIdentifier: string, buttonLists: Array<Array<Button> | ButtonGroupList | HoverButtonList>): boolean {\n    let bgAdded: boolean = false;\n    let gButtons: Array<ButtonGroup> = new Array<ButtonGroup>();\n\n    if (this._buttons && this.isGroupAdded(groupIdentifier, buttonLists) == false) {\n      gButtons = this._buttons.filter(button => (<ButtonGroup>button).groupIdentifier == groupIdentifier).map(button => {\n        button.width = '100';\n        return <ButtonGroup>button;\n      });\n\n      // To check if any button is fullwidth\n      let width = gButtons.filter(gButton => gButton.fullWidth == true).length > 0 ? '100' : 'auto';\n      let buttonWidth: any = 'auto';\n      if (width != 'auto') {\n        buttonWidth = (+width / gButtons.length);\n      }\n\n      buttonLists.push({\n        groupIdentifier: groupIdentifier,\n        width: width,\n        buttonWidth: buttonWidth,\n        groupButtons: gButtons\n      });\n      bgAdded = true;\n    }\n\n    return bgAdded;\n  }\n\n  getHoverButtons(): HoverButtonList {\n    let hoverButtons: Array<HoverButton> = new Array<HoverButton>();\n    let groupIdentifier: string;\n    let groupLabel: string;\n    let groupIcon: string;\n    let badge: Badge;\n    let width: string = 'auto';\n\n    if (this._buttons) {\n      this._buttons.filter(button => ButtonUtils.instanceOfHoverButton(button)).forEach(button => {\n        if (StringUtils.isEmpty(groupIdentifier)) {\n          groupIdentifier = (<HoverButton>button).groupIdentifier;\n        }\n        if (StringUtils.isEmpty(groupLabel)) {\n          groupLabel = (<HoverButton>button).groupLabel;\n        }\n        if (StringUtils.isEmpty(groupIcon)) {\n          groupIcon = (<HoverButton>button).groupIcon;\n        }\n        if (CollectionUtils.isEmpty(badge)) {\n          badge = (<HoverButton>button).badge;\n        }\n        if ((<HoverButton>button).fullWidth) {\n          width = '100';\n          button.width = '100';\n        }\n\n        hoverButtons.push(<HoverButton>button);\n      });\n    }\n\n    return { groupIdentifier: groupIdentifier, groupLabel: groupLabel, groupIcon: groupIcon, badge: badge, width: width, hoverButtons: hoverButtons };\n  }\n\n  getButtonType(): void {\n    this.buttonListsType = new Array<string>();\n\n    if (this.buttonLists && this.buttonLists.length > 0) {\n      for (let buttonList of this.buttonLists) {\n        let buttonType: string = \"\";\n        if (this.isButtonGroup(buttonList)) {\n          buttonType = 'ButtonGroup';\n        } else if (this.isChipGroup(buttonList)) {\n          buttonType = 'ChipGroup';\n        } else if (this.isButtonHover(buttonList)) {\n          buttonType = 'ButtonHover';\n        } else if (this.isButtonArray(buttonList)) {\n          buttonType = 'ButtonArray';\n        }\n\n        this.buttonListsType.push(buttonType);\n      }\n    }\n  }\n\n  isButtonGroup(buttonList: Array<Button> | ButtonGroupList | HoverButtonList): boolean {\n    let isButtonGroup: boolean = false;\n\n    if (buttonList && (<ButtonGroupList>buttonList).groupButtons && (<ButtonGroupList>buttonList).groupButtons.length > 0 && !StringUtils.isEmpty((<ButtonGroupList>buttonList).groupIdentifier)) {\n      isButtonGroup = (<ButtonGroupList>buttonList).groupButtons.filter(button => ButtonUtils.instanceOfButtonGroup(button)).length > 0;\n    }\n\n    return isButtonGroup;\n  }\n\n  isChipGroup(buttonList: Array<Button> | ButtonGroupList | HoverButtonList): boolean {\n    let isChipGroup: boolean = false;\n\n    if (buttonList && (<ButtonGroupList>buttonList).groupButtons && (<ButtonGroupList>buttonList).groupButtons.length > 0 && !StringUtils.isEmpty((<ButtonGroupList>buttonList).groupIdentifier)) {\n      isChipGroup = (<ButtonGroupList>buttonList).groupButtons.filter(button => ButtonUtils.instanceOfChipButton(button)).length > 0;\n\n      if (isChipGroup) {\n        (<ButtonGroupList>buttonList).groupButtons.forEach(button => ButtonUtils.instanceOfChipButton(button));\n      }\n    }\n\n    return isChipGroup;\n  }\n\n  isButtonHover(buttonList: Array<Button> | ButtonGroupList | HoverButtonList): boolean {\n    return buttonList && (<HoverButtonList>buttonList).hoverButtons && (<HoverButtonList>buttonList).hoverButtons.length > 0\n  }\n\n  isButtonArray(buttonList: Array<Button> | ButtonGroupList | HoverButtonList): boolean {\n    return buttonList instanceof Array;\n  }\n\n  click(event: any) {\n    this.onClick.emit(event);\n  }\n\n  iconClick(event: any) {\n    this.onIconClick.emit(event);\n  }\n}\n","import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\nimport { CrudHeader, ActionPage, CrudTab, CrudWidget, CrudWidgetType, CrudFormData, CrudFormTabData, CrudForm, CrudStyle } from '../../model';\nimport { Badge, ButtonGroup, HoverButton, Button, ButtonColor, ButtonType, ButtonSize, Action } from '../../../button/model';\nimport { CollectionUtils, DependentUtils, FormUtils } from '../../../utility';\nimport { Form } from '../../../form/model';\nimport { Wizard } from '../../../wizard/model';\nimport { List } from '../../../list/model';\nimport { FieldChange, KeyMap } from '../../../field/model';\nimport { Ability } from '@casl/ability';\nimport { AbilityUtils } from '../../../utility/ability.utility';\n\n@Component({\n  selector: 'cf-crud-form',\n  templateUrl: './crud-form.component.html',\n  styleUrls: ['./crud-form.component.scss'] \n})\nexport class CrudFormComponent implements OnInit {\n  @Input() identifier: string;\n  @Input() header: CrudHeader;\n  @Input() actions: Array<Button | HoverButton | ButtonGroup>;\n  @Input() actionPages: Array<ActionPage>;\n\n  @Input() form: CrudForm;\n\n  @Input() reset: boolean;\n  @Input() configData: CrudFormData;\n  @Input() keyMap: Array<KeyMap>;\n\n  @Output() onFormChange = new EventEmitter();\n  @Output() onFieldChange = new EventEmitter();\n  @Output() onButtonClick = new EventEmitter();\n  @Output() onSortClick = new EventEmitter();\n  @Output() onPageClick = new EventEmitter();\n\n  backButton: Button;\n  formsConfigToDisplay: Array<Form | List | Wizard> = new Array<Form | List | Wizard>();\n  rowsInTab: Array<Array<Array<CrudWidget>>> = new Array<Array<Array<CrudWidget>>>();\n\n  badges: Array<Badge>;\n  pageBackRoute: Array<string>;\n  record: any;\n\n  addWidget: Button;\n\n  constructor(private ability: Ability) { \n    AbilityUtils.setAbility(this.ability);\n  }\n\n  ngOnInit() {\n    this.filterForms();\n\n    this.drawTabs();\n\n    this.setConfigAsPerTab();\n\n    this.addWidget = this.addWidgetButton(\"addWidget\", \"Add\", \"add\", ButtonColor.PRIMARY);\n  }\n\n  setConfigAsPerTab(tabIdentifier?: string): void {\n    if (this.configData) {\n      this.badges = this.configData.badges;\n      this.pageBackRoute = this.configData.pageBackRoute;\n      this.record = this.configData.record;\n\n      if (this.configData.configPerTabs) {\n        let tabIndex = 0;\n        this.configData.configPerTabs.forEach((tabConfigData: CrudFormTabData, tabKey: string) => {\n          if ((tabKey == tabIdentifier || (tabIndex == 0 && tabIdentifier == null)) && tabConfigData) {\n            if (tabConfigData.badges) {\n              this.badges = tabConfigData.badges;\n            }\n            if (tabConfigData.pageBackRoute) {\n              this.pageBackRoute = tabConfigData.pageBackRoute;\n            }\n            if (tabConfigData.record) {\n              this.record = this.configData.record; \n            }\n          }\n          tabIndex++;\n        })\n      }\n    }\n  }\n\n  getTabIdentifier(tabTitle: string): string {\n    let tabIdentifier = '';\n    if (this.form && this.form.tabs) {\n      for (let tab of this.form.tabs) {\n        if (tab.label == tabTitle) {\n          tabIdentifier = tab.identifier;\n          break;\n        }\n      }\n    }\n\n    return tabIdentifier;\n  }\n\n  drawTabs(): void { \n    if (this.form && this.form.tabs && this.form.tabs.length > 0) {\n      for (let tIndex = 0; tIndex < this.form.tabs.length; tIndex++) {\n        if (this.form.tabs[tIndex] && (this.form.tabs[tIndex].permission == null || (this.form.tabs[tIndex].permission && (this.ability.can(this.form.tabs[tIndex].permission['action'], this.form.tabs[tIndex].permission['subject']))))) {\n          this.rowsInTab.push(this.drawTab(tIndex));\n        }\n      }\n    }\n  }\n \n  drawTab(tabIndex: number): Array<Array<CrudWidget>> {\n    let rows: Array<Array<CrudWidget>> = new Array<Array<CrudWidget>>();\n    let rIndex = 0;\n\n    if (this.form && this.form.tabs && this.form.tabs.length > 0) {\n      for (let tIndex = 0; tIndex < this.form.tabs.length; tIndex++) {\n        if (this.form.tabs[tIndex].widgets && this.form.tabs[tIndex].widgets.length > 0 && tIndex == tabIndex) {\n          for (let widget of this.form.tabs[tIndex].widgets) {\n            if (\n              widget && \n              (\n                widget.permission == null || \n                (widget.permission && (this.ability.can(widget.permission['action'], widget.permission['subject']))\n              )\n            )) {\n              if (CollectionUtils.isEmpty(rows[rIndex])) {\n                rows[rIndex] = new Array<CrudWidget>();\n              }\n\n              let colCount = 0;\n              rows[rIndex].forEach(row => colCount += row.colSpan);\n\n              if (colCount < 2) {\n                rows[rIndex].push(widget);\n              } else {\n                rIndex++;\n                rows[rIndex] = new Array<CrudWidget>();\n                rows[rIndex].push(widget);\n              }\n            }\n          }\n        }\n      }\n    }\n \n    console.log(rows);\n    return rows;\n  }\n\n  displayWidget(widget: CrudWidget, supportingRecord: any, record: any): boolean {\n    return DependentUtils.displayDependencyField(widget.dependentOnFields, supportingRecord, record);\n  }\n\n  filterForms() {\n    let formIdentifiers: Array<string>;\n    if (this.actionPages && this.actions) {\n      for (let actionPage of this.actionPages) {\n        for (let action of this.actions) {\n          if (actionPage.buttonIdentifier == action.identifier) {\n            formIdentifiers = actionPage.associatedFormIdentifiers;\n          }\n        }\n      }\n\n      if (this.form && this.form.tabs && formIdentifiers) {\n        for (let tab of this.form.tabs) {\n          for (let widget of tab.widgets) {\n            if (formIdentifiers.indexOf((<Form>widget.widget).identifier) > -1) {\n              widget.widget['display'] = true;\n            }\n          }\n        }\n      } else {\n        this.form.tabs.forEach(tab => tab.widgets.forEach(widget => widget.widget['display'] = true));\n      }\n    } else {\n      this.form.tabs.forEach(tab => tab.widgets.forEach(widget => widget.widget['display'] = true));\n    }\n  }\n\n  addWidgetButton(identifier: string, label: string, icon: string, color: ButtonColor): Button {\n    let buttonConfig: Button = {\n      identifier: identifier,\n      type: ButtonType.GHOST,\n      label: label,\n      color: color,\n      size: ButtonSize.SMALL,\n      icon: icon,\n      onlyIcon: false,\n      alwaysEnable: true\n    }\n\n    return buttonConfig;\n  }\n\n  fieldChange(fieldChange: FieldChange) {\n    console.log(fieldChange);\n    this.onFieldChange.emit(fieldChange);\n  }\n\n  formChange(form: any) {\n    this.onFormChange.emit(form);\n  }\n\n  buttonClick(action: Action) {\n    console.log(action);\n    if (action.action == \"addWidget\")  {\n      if (this.record[action.sourceIdentifier] && this.record[action.sourceIdentifier] instanceof Array) {\n        (<Array<any>>this.record[action.sourceIdentifier]).push({});\n      } else {\n        this.record[action.sourceIdentifier] = new Array<any>();\n        this.record[action.sourceIdentifier].push({});\n      }\n    }\n    this.onButtonClick.emit(action);\n  }\n\n  onTabChange(event: any) {\n    console.log(event);\n\n    this.setConfigAsPerTab(this.getTabIdentifier(event.tab.textLabel));\n  }\n\n  onAccordianChange(event) {\n    console.log(event);\n  }\n\n  onSort(event: any) {\n    console.log(event);\n    this.onSortClick.emit(event);\n  }\n\n  onPage(event: any) {\n    console.log(event);\n    this.onPageClick.emit(event);\n  }\n}\n","import { Component, OnInit, Input, Output, EventEmitter, ViewChild, Inject, OnDestroy } from '@angular/core';\nimport { Record, ListType, ListHeader } from '../../../list/model';\nimport { Button, HoverButton, ButtonGroup, ButtonColor, ButtonType, ButtonSize, Badge, IconPosition, Action, ReservedButton } from '../../../button/model';\nimport { KeyMap, FieldChange } from '../../../field/model';\nimport { Subscription } from 'rxjs';\nimport { Ability, RawRule } from '@casl/ability';\nimport { CrudHeader, CrudList, CrudSearch, SearchDisplayType, ActionPage, CrudListData, CrudListTabData, CrudListDisplayType, CrudStyle } from '../../model';\nimport { MatSidenav } from '@angular/material/sidenav';\nimport { MatBottomSheetRef, MatBottomSheet } from '@angular/material/bottom-sheet';\nimport { MAT_BOTTOM_SHEET_DATA } from '@angular/material/bottom-sheet';\nimport { AbilityUtils, StringUtils, CollectionUtils } from '../../../utility';\n\n@Component({\n  selector: 'cf-crud-list',\n  templateUrl: './crud-list.component.html',\n  styleUrls: ['./crud-list.component.scss']\n})\nexport class CrudListComponent implements OnInit, OnDestroy {\n  @Input() identifier: string;\n  @Input() header: CrudHeader;\n  @Input() actions: Array<Button | HoverButton | ButtonGroup>;\n  @Input() actionPages: Array<ActionPage>;\n\n  @Input() quickLinks: Array<Button | HoverButton | ButtonGroup>;\n  @Input() searchConfig: CrudSearch;\n  @Input() listConfig: CrudList;\n\n  @Input() formReset: boolean;\n\n  @Input() originalData: any;\n  @Input() _configData: CrudListData;\n  get configData(): CrudListData {\n    return this._configData;\n  }\n  @Input()\n  set configData(_configData: CrudListData) {\n    this._configData = _configData;\n    this.setConfigAsPerTab();\n  }\n\n  @Input() keyMap: Array<KeyMap>;\n\n  @Input() listReset: boolean;\n\n  _expanded: boolean = false;\n  get expanded(): boolean {\n    return this._expanded;\n  }\n  @Input()\n  set expanded(_expanded: boolean) {\n    this._expanded = _expanded;\n  }\n  @Input()\n  expandRowIndex: number;\n\n  @Output() onFormChange = new EventEmitter();\n  @Output() onFieldChange = new EventEmitter();\n  @Output() onButtonClick = new EventEmitter();\n  @Output() onButtonIconClick = new EventEmitter();\n\n  @Output() onSortClick = new EventEmitter();\n  @Output() onPageClick = new EventEmitter();\n  @Output() onTabClick = new EventEmitter();\n\n  title: string;\n  showSearchForm: boolean = false;\n  searchButton: Button;\n  searchModalButton: Button;\n  listHeaders: Array<ListHeader> = new Array<ListHeader>();\n\n  badges: Array<Badge>;\n  pageBackRoute: Array<string>;\n  records: Array<Record>;\n  searchData: any;\n  searchOnFieldsCount: number = 0;\n  searchOnFieldsButtons: Array<Button> = new Array<Button>();\n\n  buttonSubscriber: Subscription;\n  fieldSubscriber: Subscription;\n  formSubscriber: Subscription;\n  dialogRefSubscriber: Subscription;\n\n  constructor(private _bottomSheet: MatBottomSheet, private ability: Ability) {\n    AbilityUtils.setAbility(this.ability);\n  }\n\n  ngOnInit() {\n    this.searchButton = this.setSearchButton('searchButton', 'Search', 'search');\n    this.searchModalButton = this.setSearchButton('searchCloseButton', 'Close', 'close');\n    this.displaySearchForm();\n\n    this.setListHeaders();\n    this.setCrudHeader();\n\n    if (this.searchConfig && this.searchConfig.displayType != SearchDisplayType.ABOVE_LIST) {\n      this.searchConfig.form.displayInColumns = 1;\n    }\n    this.setConfigAsPerTab(); \n  }\n\n  setConfigAsPerTab(tabIdentifier?: string): void {\n    if (this._configData) {\n      this.badges = this._configData.badges;\n      this.pageBackRoute = this._configData.pageBackRoute;\n\n      this.records = this._configData.records;\n\n      this.searchData = this._configData.searchData;\n\n      this.searchOnFieldsCount = 0;\n      this.searchOnFieldsButtons = new Array<Button | ButtonGroup>();\n      if (this.searchData && !CollectionUtils.isEmpty(this.searchData)) {\n        for (let cnt = 0; cnt < Object.keys(this.searchData).length; cnt++) {\n          if (!StringUtils.isEmpty(this.searchData[Object.keys(this.searchData)[cnt]])) {\n            this.searchOnFieldsCount++; \n\n            let filterButton: Button | ButtonGroup = this.setSelectedFilterButton(Object.keys(this.searchData)[cnt], this.searchData[Object.keys(this.searchData)[cnt]]);\n            this.searchOnFieldsButtons.push(filterButton);\n          }\n        }\n      }\n\n      if (this._configData.configPerTabs) {\n        let tabIndex = 0;\n        this._configData.configPerTabs.forEach((tabConfigData: CrudListTabData, tabKey: string) => {\n          if ((tabKey == tabIdentifier || (tabIndex == 0 && tabIdentifier == null)) && tabConfigData) {\n            if (tabConfigData.badges) {\n              this.badges = tabConfigData.badges;\n            }\n            if (tabConfigData.pageBackRoute) {\n              this.pageBackRoute = tabConfigData.pageBackRoute;\n            }\n            if (tabConfigData.records && tabConfigData.records.length > 0) {\n              this.records = this._configData.records;\n            }\n          }\n          tabIndex++;\n        })\n      }\n    }\n  }\n\n  getTabIdentifier(tabTitle: string): string {\n    let tabIdentifier = '';\n    if (this.listConfig && this.listConfig.displayType == CrudListDisplayType.TAB) {\n      for (let index = 0; index < this.listConfig.lists.length; index++) {\n        if (this.listHeaders[index].title == tabTitle) {\n          tabIdentifier = this.listConfig.lists[index].identifier;\n          break;\n        }\n      }\n    }\n\n    return tabIdentifier;\n  }\n\n  setListHeaders(): void {\n    if (this.listConfig.lists) {\n      for (let index = 0; index < this.listConfig.lists.length; index++) {\n        this.listHeaders.push(this.listConfig.lists[index].header);\n        // this.listConfig.lists[index].header = \"\";\n      }\n    }\n  }\n\n  setCrudHeader(): void {\n    let title = \"\";\n\n    if (this.header) {\n      title = this.header.title;\n    }\n\n    if (this.listConfig.lists && this.listConfig.lists.length == 1 && this.listConfig.lists[0].header && this.listConfig.lists[0].header.title) {\n      title = this.listConfig.lists[0].header.title;\n\n      this.listConfig.lists[0].header.title = \"\";\n    }\n    this.title = title;\n  }\n\n  displaySearchForm(): void {\n    if (this.listConfig && this.listConfig.lists && this.listConfig.lists.length > 0) {\n      for (let lConfig of this.listConfig.lists) {\n        if (lConfig.listType == ListType.DYNAMIC && this.searchConfig) {\n          this.showSearchForm = true;\n          break;\n        }\n      }\n    }\n  }\n\n  setSearchButton(identifier: string, label: string, icon: string): Button {\n    return {\n      identifier: identifier,\n      label: label,\n      color: ButtonColor.PRIMARY,\n      size: ButtonSize.SMALL,\n      icon: icon,\n      type: ButtonType.GHOST,\n      onlyIcon: true,\n    };\n  }\n\n  setSelectedFilterButton(identifier: string, label: string): Button | ButtonGroup {\n    return {\n      identifier: identifier,\n      groupIdentifier: ReservedButton.CLEAR_FILTER_FIELD,\n      label: label,\n      color: ButtonColor.PRIMARY,\n      size: ButtonSize.TINY,\n      icon: \"close\",\n      iconPosition: IconPosition.RIGHT,\n      type: ButtonType.STROKED,\n    };\n  }\n\n  @ViewChild('sidenav') sidenav: MatSidenav;\n  close() {\n    this.sidenav.close();\n  }\n\n\n  fieldChange(fieldChange: FieldChange) {\n    console.log(fieldChange);\n    this.onFieldChange.emit(fieldChange);\n  }\n\n  formChange(form: any) {\n    this.onFormChange.emit(form);\n  }\n\n  buttonClick(event: any) {\n    console.log(event);\n    this.onButtonClick.emit(event);\n  }\n\n  buttonIconClick(event: any)  {\n    this.onButtonIconClick.emit(event);\n  }\n\n  onSort(event: any) {\n    console.log(event);\n    this.onSortClick.emit(event);\n  }\n\n  onPage(event: any) {\n    console.log(event);\n    this.onPageClick.emit(event);\n  }\n\n  onAccordianChange(event) {\n    console.log(event);\n  }\n\n  onTabChange(event: any) {\n    console.log(event);\n\n    this.setConfigAsPerTab(this.getTabIdentifier(event.tab.textLabel));\n  }\n\n  openBottomSheet(): void {\n    let dialogRef = this._bottomSheet.open(BottomSearchSheet, {\n      data: { searchConfig: this.searchConfig, searchData: this.searchData, reset: this.formReset },\n    });\n\n    this.buttonSubscriber = dialogRef.instance.onButtonClick.subscribe(event => this.buttonClick(event));\n    this.fieldSubscriber = dialogRef.instance.onFieldChange.subscribe(event => this.fieldChange(event));\n    this.formSubscriber = dialogRef.instance.onFormChange.subscribe(event => this.formChange(event));\n\n    this.dialogRefSubscriber = dialogRef.afterDismissed().subscribe(() => {\n      this.bottomUnsubscribe();\n    });\n  }\n\n  ngOnDestroy() {\n    this.bottomUnsubscribe();\n    if (this.dialogRefSubscriber) {\n      this.dialogRefSubscriber.unsubscribe();\n    }\n  }\n\n  bottomUnsubscribe() {\n    if (this.buttonSubscriber) {\n      this.buttonSubscriber.unsubscribe();\n    }\n    if (this.fieldSubscriber) {\n      this.fieldSubscriber.unsubscribe();\n    }\n    if (this.formSubscriber) {\n      this.formSubscriber.unsubscribe();\n    }\n  }\n}\n\n@Component({\n  selector: 'bottom-search-sheet',\n  templateUrl: 'bottom-search-sheet.html',\n  styleUrls: ['./bottom-search-sheet.scss']\n})\nexport class BottomSearchSheet {\n  onFormChange = new EventEmitter();\n  @Output() onFieldChange = new EventEmitter();\n  @Output() onButtonClick = new EventEmitter();\n\n  constructor(private _bottomSheetRef: MatBottomSheetRef<BottomSearchSheet>, @Inject(MAT_BOTTOM_SHEET_DATA) public data: any) {\n    console.log(this.data)\n  }\n\n  openLink(event: MouseEvent): void {\n    this._bottomSheetRef.dismiss();\n    event.preventDefault();\n  }\n\n  fieldChange(fieldChange: FieldChange) {\n    this.onFieldChange.emit(fieldChange);\n  }\n\n  formChange(form: any) {\n    this.onFormChange.emit(form);\n  }\n\n  buttonClick(event: any) {\n    console.log(event);\n    this.onButtonClick.emit(event);\n  }\n\n}","import { HttpClient } from '@angular/common/http';\nimport { Component, ElementRef, Input, OnInit, ViewChild, ViewEncapsulation } from '@angular/core';\nimport { DisplayMode, FileField, UploadDeleteFunc, UploadFile, UploadFileType, UploadFunc } from '../../model';\n\n@Component({\n    selector: 'cf-file-uploader',\n    templateUrl: './file-uploader.component.html',\n    styleUrls: ['./file-uploader.component.scss'],\n    encapsulation: ViewEncapsulation.None\n})\nexport class FileUploaderComponent implements OnInit {\n    @Input() field: FileField = null;\n    @Input() isFieldDisabled: boolean = false;\n    @ViewChild(\"fileInput\", { static: false }) fileInput: ElementRef;\n    @Input() disabled: boolean;\n    param = 'file';\n    fileList: Array<UploadFile> = [];\n\n    multiple: boolean = false;\n\n    showLess: number;\n\n    browseButtonText: string;\n    uploadButtonText: string;\n\n    fileType: string = \"*.*\";\n    fileIcon: string = \"\"; \n\n    hideDownloadButton: boolean = false;\n    hideDeleteFileButton: boolean = false;\n    hideUploadButton: boolean = false;\n    hideFileIconButton: boolean = false;\n    hideDeleteAllButton: boolean = false;\n    hideActionStrip: boolean = false;\n\n    isUploaded: boolean = false;\n    isUploadingInProgress: boolean = false;\n    isFileImageType: boolean = false;\n\n    constructor(private _http: HttpClient) { }\n\n    ngOnInit() {\n        var defaultUploadBtnText = this.field.multiple ? \"Upload Files\" : \"Upload File\";\n        this.multiple = this.field.multiple;\n        this.uploadButtonText = this.field.uploadButtonText || defaultUploadBtnText;\n        this.setFileTypeAndIcon(this.field.fileType);\n        this.fileList = (<Array<UploadFile>>this.field.value) || [];\n\n        if (this.field.displayMode == DisplayMode.LABEL) {\n            this.hideDeleteFileButton = true;\n            this.hideUploadButton = true;\n            this.hideFileIconButton = true;\n            } else {\n            this.hideDeleteFileButton = this.field.hideDeleteFileButton !== undefined ? this.field.hideDeleteFileButton : false;\n            this.hideUploadButton = this.field.hideUploadButton !== undefined ? this.field.hideUploadButton : false;\n            this.hideFileIconButton = this.field.hideFileIconButton !== undefined ? this.field.hideFileIconButton : false;\n        }\n\n        this.hideDownloadButton = this.field.hideDownloadButton !== undefined ? this.field.hideDownloadButton : false;\n        this.showLess = this.field.showLess || this.fileList.length;\n        this.setFieldDisabled();\n        this.setHideDeleteAllButton();\n        this.setHideActionStrip();\n    }\n\n    private setFieldDisabled() {\n        if (this.isFieldDisabled) {\n            this.hideDeleteAllButton = true;\n            this.hideDeleteFileButton = true;\n            this.hideUploadButton = true;\n        }\n    }\n\n    private setHideDeleteAllButton() {\n        if (this.field.hideDeleteAllButton === undefined) {\n            this.hideDeleteAllButton = false;\n        }\n        if (this.fileList.length <= 1 || this.field.displayMode == DisplayMode.LABEL) {\n            this.hideDeleteAllButton = true;\n        }\n    }\n\n    private setHideActionStrip() {\n        if (this.hideDeleteAllButton && this.hideUploadButton && this.showLess <= this.fileList.length) {\n            this.hideActionStrip = true;\n        }\n    }\n\n    private setFileTypeAndIcon = (type: UploadFileType): void => {\n        switch (type) {\n            case UploadFileType.PDF:\n                this.fileType = \".pdf\";\n                this.fileIcon = \"picture_as_pdf\";\n                break;\n            case UploadFileType.WORD:\n                this.fileType = \".doc, .docx\";\n                this.fileIcon = \"attach_file\";\n                break;\n            case UploadFileType.IMAGE:\n                this.fileType = this.getImageFileType();\n                this.fileIcon = \"image\";\n                this.isFileImageType = true;\n                break;\n            case UploadFileType.VIDEO:\n                this.fileType = \"video/*\";\n                this.fileIcon = \"video_call\";\n                break;\n            case UploadFileType.EXCEL:\n                this.fileType = \".xlsx, .xls, .csv\";\n                this.fileIcon = \"attach_file\";\n                break;\n            default:\n                this.fileType = \".*\";\n                this.fileIcon = \"attach_file\";\n                break;\n        }\n    }\n\n    onUploadClick = (): void => {\n        const fileInput = this.fileInput.nativeElement;\n        fileInput.onchange = () => {\n            this.fileList = [];\n            this.isUploadingInProgress = true;\n            console.log(fileInput.files);\n            for (let index = 0; index < fileInput.files.length; index++) {\n                const file = fileInput.files[index];\n                this.fileList.push(<UploadFile>{\n                    data: file,\n                    size: file.size,\n                    name: file.name\n                });\n            }\n            this.field.onUploadClick(this.fileList).subscribe(result => {\n                this.isUploadingInProgress = false;\n                this.fileList = result;\n            });\n        };\n        fileInput.click();\n    }\n\n    onDeleteAllClick = (): void => {\n        if (this.isFunctionDefined(this.field.onDeleteAllClick)) {\n            this.isUploadingInProgress = true;\n            this.field.onDeleteAllClick(this.fileList).subscribe(result => {\n                this.isUploadingInProgress = false;\n                if (result) {\n                    this.fileList = [];\n                }\n            });\n        }\n    }\n\n    onDeleteFileClick = (delFile: UploadFile): void => {\n        if (this.isFunctionDefined(this.field.onDeleteFileClick)) {\n            this.isUploadingInProgress = true;\n            this.field.onDeleteFileClick(delFile).subscribe(result => {\n                this.isUploadingInProgress = false;\n                if (result) {\n                    this.fileList = this.fileList.filter(file => file !== delFile);\n                }\n            });\n        }\n    }\n\n    onShowAllItems = () => {\n        this.showLess = this.fileList.length\n    }\n\n    isFunctionDefined = (func: UploadFunc | UploadDeleteFunc) => {\n        return typeof func == 'function';\n    }\n\n    private getImageFileType = (): string => {\n        if (this.field.subFileType) {\n            return this.field.subFileType.map(x => 'image/' + x.toLowerCase()).join(',');\n        } else {\n            return \"image/*\";\n        }\n    }\n}","export const quillConfiguration = {\n    formula: true,\n    toolbar: [\n//      [{ 'size': ['small', false, 'large', 'huge'] }],  // custom dropdown\n      [{ 'header': [1, 2, 3, 4, 5, 6, false] }],\n      [{ 'font': [] }],\n      \n      ['bold', 'italic', 'underline', 'strike'],        // toggled buttons\n      ['blockquote'],\n//      ['blockquote', 'code-block'],\n//      [{ 'header': 1 }, { 'header': 2 }],               // custom button values\n      [{ 'align': [] }, { 'indent': '-1'}], \n      [{ 'indent': '+1' }],          // outdent/indent\n      [{ 'color': [] }, { 'background': [] }],          // dropdown with defaults from theme\n      [{ 'list': 'ordered'}, { 'list': 'bullet' }],\n      [{ 'script': 'sub'}, { 'script': 'super' }, 'formula'],      // superscript/subscript\n//      ['formula'],\n//      [{ 'direction': 'rtl' }],                         // text direction\n      ['link', 'image', 'video']                         // link and image, video\n      \n    ]\n  };\n  ","import { Component, OnInit, Input, ViewEncapsulation, Output, EventEmitter, ViewChild } from '@angular/core';\nimport { FormGroup, FormControl, FormGroupDirective, NgForm, ValidatorFn, FormArray } from '@angular/forms';\n\n\nimport { Field, KeyMap, AutocompleteField, DropdownOption, DropdownField, FieldType, HtmlEditorField, TextField, InputField, ImageField, CalendarField, CheckboxField, FileField, RadioField, ToggleField, SliderField, FieldChange, LabelField, LabelTextAlign, OptionDisplayTemplate } from '../../model';\nimport { FormDiaplyMode } from '../../../form/model';\nimport { StringUtils, FieldUtils, CollectionUtils, FormUtils } from '../../../utility';\n\nimport { startWith, switchMap, tap } from 'rxjs/operators';\nimport { Observable, of } from 'rxjs';\nimport { ErrorStateMatcher } from '@angular/material/core';\nimport { Router } from '@angular/router';\nimport { Action, ButtonColor, ButtonSize, ButtonType, Button, ReservedButton } from '../../../button/model';\nimport { MatDatepickerInputEvent } from '@angular/material/datepicker';\nimport { MatSidenav } from '@angular/material/sidenav';\nimport { quillConfiguration } from './html.editor.configuration';\nimport { MatSelectionList, MatSelectionListChange } from '@angular/material/list';\nimport { Permission } from '../../../privilege/model';\nimport { AbilityUtils } from '../../../utility/ability.utility';\nimport { Ability } from '@casl/ability';\n\nexport class FieldErrorStateMatcher implements ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n//    console.log(\"111\");\n    return !!(control && control.invalid && (control.dirty || control.touched));\n  }\n}\n\n@Component({\n  selector: 'cf-field',\n  templateUrl: './field.component.html',\n  styleUrls: ['./field.component.scss'],\n  encapsulation: ViewEncapsulation.None\n})\nexport class FieldComponent implements OnInit {\n  @Input() sourceType: string;\n  @Input() sourceIdentifier: string;\n  @Input() sourceIndex: number;\n  @Input() widgetArrayIndex: number;\n  @Input() form: FormGroup;\n  @Input() fieldControl: FormControl | FormGroup;\n  @Input() fieldIndex: number;\n  @Input() field: Field | TextField | LabelField | InputField | DropdownField | HtmlEditorField | ImageField | CalendarField | AutocompleteField | CheckboxField | FileField | RadioField | SliderField | ToggleField;\n  @Input() originalData: any;\n  @Input() _displayMode: FormDiaplyMode;\n  get displayMode(): FormDiaplyMode {\n    return this._displayMode;\n  }\n  @Input()\n  set displayMode(_displayMode: FormDiaplyMode) {\n    this._displayMode = _displayMode;\n    this.isFieldDisabled = this.fieldDisabled();\n  }\n\n  @Input() hideLabel: boolean;\n  @Input() value: any;\n  @Input() isAddMore: boolean;\n  @Input() addMorePermission: Permission;\n\n  @Input() device: string;\n  @Input() displayInColumns: number;\n  addMoreFieldDisplayInColumns: number;\n  addMoreButtonDisplayInColumns: number;\n\n  @Input() dependencies: any;\n  @Input() row: any;\n  @Input() keyMap: Array<KeyMap>;\n  @Output() onDependentFieldChange: EventEmitter<any> = new EventEmitter();\n  @Output() onFieldChange = new EventEmitter();\n  @Output() onFormChange = new EventEmitter();\n  @Output() onButtonClick = new EventEmitter();\n\n  charLimit: number;\n  ellipsisRequired: boolean = false;\n  resolvedValue: any;\n\n  matcher: ErrorStateMatcher;\n  isRequired: boolean;\n  isFieldDisabled: boolean;\n  hasFieldNavigate: boolean;\n  hasHintIcon: boolean;\n  maxLength: number;\n  min: number;\n  max: number;\n  imgURL: any;\n  imagePath: string;\n  appearance: string;\n  hasClear: boolean;\n  textClearButton: Button;\n  routeToButton: Button;\n  helpModalButton: Button;\n  rows: number;\n  height: number;\n\n  asBubble: boolean;\n  bubbleColor: ButtonColor;\n  textAlign: LabelTextAlign;\n\n  plusButton: Button;\n  minusButton: Button;\n\n  editorOptions = quillConfiguration;\n\n  onListSelectionFuc: Function = null;\n  listOptions: Array<DropdownOption> = null;\n  enableMultiSelection: boolean;\n  autoCompleteOptions: Observable<DropdownOption[]>;\n  autoCompleteResultCount: number;\n  dateRange: boolean = false;\n\n  minLengthForTrigger: number = 3;\n  highlightAutoCompleteText: string = '';\n\n  showLess: number;\n\n  isEditorErrorState(): boolean {\n    return !!(this.fieldControl && this.fieldControl.invalid && (this.fieldControl.dirty || this.fieldControl.touched));\n  }\n  @ViewChild('listView') listView: MatSelectionList;\n\n  constructor(public router: Router, public ability: Ability) {\n    AbilityUtils.setAbility(this.ability);\n  }\n\n  ngOnInit() {\n    if ((<TextField>this.field).placeholder == undefined) {\n      (<TextField>this.field).placeholder = \"\";\n    }\n    if ((<TextField>this.field).ellipsis && (<TextField>this.field).ellipsis > 0) {\n      this.charLimit = (<TextField>this.field).ellipsis;\n    }\n\n    this.matcher = new FieldErrorStateMatcher();\n    this.getValue(this.field, this.value);\n    this.isRequired = this.required();\n    this.isFieldDisabled = this.fieldDisabled();\n    this.hasFieldNavigate = this.fieldNavigate();\n    this.hasHintIcon = this.displayHintIcon();\n    this.setMaxLength();\n    this.setNumberMinMax();\n    this.setAppearance();\n    this.setOptionInDisplay();\n    this.getImagePath(this.field);\n    this.setRows();\n    this.setHeight();\n    this.setClear();\n    this.setAsBubble();\n    this.setTextAlign();\n    this.setAddMoreDisplayInColumn();\n    this.setMinLengthForTrigger();\n    //    this.autocompleteInit();\n    this.setDisplayTemplate();\n    this.setCalendar();\n    this.setShowLess();\n    this.textClearButton = this.setTextClearButton('fieldTextClearBtn', \"Clear Text\", \"cancel\", null);\n    if (this.field.navigate) {\n      this.routeToButton = this.setTextClearButton('fieldRouteToBtn', this.field.navigate.text, this.field.navigate.icon ? this.field.navigate.icon : \"call_made\", this.field.navigate.routeTo);\n    }\n    this.helpModalButton = this.setHelpButton('helpCloseButton', 'Close', 'close');\n\n    this.plusButton = this.addRemoveButton(ReservedButton.ADD_FIELD, \"Add\", \"add\");\n    this.minusButton = this.addRemoveButton(ReservedButton.REMOVE_FIELD, \"Minus\", \"remove\");\n  }\n\n  setDisplayTemplate(): void {\n    if ((this.field.type == FieldType.RADIO || this.field.type == FieldType.CHECKBOX) && StringUtils.isEmpty((<RadioField | CheckboxField>this.field).displayTemplate)) {\n      (<RadioField | CheckboxField>this.field).displayTemplate = OptionDisplayTemplate.CLASSIC;\n    }\n  }\n\n  setAddMoreDisplayInColumn(): void {\n    if (this.isAddMore) {\n      if (this.device == 'desktop') {\n        if (this.displayInColumns < 6) {\n          this.addMoreFieldDisplayInColumns = 10;\n          this.addMoreButtonDisplayInColumns = 2;\n        } else {\n          this.addMoreFieldDisplayInColumns = 11;\n          this.addMoreButtonDisplayInColumns = 1;\n        }\n      }\n\n      if (this.device == 'tablet') {\n        if (this.displayInColumns < 6) {\n          this.addMoreFieldDisplayInColumns = 6;\n          this.addMoreButtonDisplayInColumns = 2;\n        } else {\n          this.addMoreFieldDisplayInColumns = 7;\n          this.addMoreButtonDisplayInColumns = 1;\n        }\n      }\n\n      if (this.device == 'mobile') {\n        if (this.displayInColumns < 3) {\n          this.addMoreFieldDisplayInColumns = 3;\n          this.addMoreButtonDisplayInColumns = 2;\n        } else {\n          this.addMoreFieldDisplayInColumns = 3;\n          this.addMoreButtonDisplayInColumns = 1;\n        }\n      }\n\n    }\n  }\n\n  setMinLengthForTrigger(): void {\n    this.minLengthForTrigger = (<AutocompleteField>this.field).minLengthForTrigger ? (<AutocompleteField>this.field).minLengthForTrigger : 3;\n  }\n\n  setRows(): void {\n    this.rows = (<TextField>this.field).rows ? (<TextField>this.field).rows : 1;\n  }\n\n  setHeight(): void {\n    this.height = (<HtmlEditorField>this.field).height ? (<HtmlEditorField>this.field).height : 300;\n  }\n\n  setAppearance(): void {\n    this.appearance = (<TextField | InputField>this.field).appearance ? (<TextField | InputField>this.field).appearance : 'standard';\n  }\n\n  setAsBubble(): void {\n    this.asBubble = (<LabelField>this.field).asBubble ? (<LabelField>this.field).asBubble : false;\n    this.bubbleColor = (<LabelField>this.field).bubbleColor ? (<LabelField>this.field).bubbleColor : ButtonColor.DEFAULT;\n  }\n\n  setTextAlign(): void {\n    this.textAlign = (<LabelField>this.field).textAlign ? (<LabelField>this.field).textAlign : LabelTextAlign.LEFT;\n  }\n\n  setMaxLength(): void {\n    this.maxLength = (<TextField>this.field).maxLength ? (<TextField>this.field).maxLength : 1000000;\n  }\n\n  setNumberMinMax(): void {\n    this.min = (<InputField>this.field).min ? (<InputField>this.field).min : null;\n    this.max = (<InputField>this.field).max ? (<InputField>this.field).max : null;\n  }\n\n  displayHintIcon(): boolean {\n    return this.field.help && this.field.help.icon ? true : false;\n  }\n\n  @ViewChild('sidenav') sidenav: MatSidenav;\n  close() {\n    this.sidenav.close();\n  }\n  open() {\n    this.sidenav.open();\n  }\n\n  setHelpButton(identifier: string, label: string, icon: string): Button {\n    return {\n      identifier: identifier,\n      label: label,\n      color: ButtonColor.PRIMARY,\n      size: ButtonSize.SMALL,\n      icon: icon,\n      type: ButtonType.GHOST,\n      onlyIcon: true,\n    };\n  }\n\n  required(): boolean {\n    let isRequired: boolean = false;\n    if (this.field.validations && this.field.validations.length > 0) {\n      for (let validation of this.field.validations) {\n        if (validation.message.key == \"required\") {\n          isRequired = true;\n        }\n      }\n    }\n\n    if (StringUtils.isEmpty(this.field.label)) {\n      isRequired = false;\n    }\n\n    return isRequired;\n  }\n\n  fieldNavigate(): boolean {\n    let hasFieldNavigate: boolean = false;\n\n    if (\n      this.field.navigate &&\n      (!StringUtils.isEmpty(this.field.navigate.icon) || !StringUtils.isEmpty(this.field.navigate.text)) &&\n      !CollectionUtils.isEmpty(this.field.navigate.routeTo)\n    ) {\n      hasFieldNavigate = true;\n    }\n\n    return hasFieldNavigate;\n  }\n\n  fieldDisabled(): boolean {\n    let isDisabled: boolean = false;\n\n    isDisabled = FieldUtils.isFieldDisabled(this.field, this._displayMode, this.resolvedValue);\n    if (isDisabled) {\n      FormUtils.disableFieldControl(<FormControl>this.fieldControl);\n    }\n\n    return isDisabled;\n  }\n\n  getValue(field: Field, txt: any): any {\n    let value: string = \"\";\n    let initialLength = 0;\n    let finalLength = 0;\n\n    if (this.fieldControl != undefined) {\n      value = this.fieldControl.value;\n    } else {\n      value = txt;\n    }\n\n    if (field.type != FieldType.DROPDOWN) {\n      if (this.keyMap && this.keyMap.length > 0) {\n        this.keyMap\n          .filter(objs => {\n            let hasAssociation: boolean = false;\n            if (!CollectionUtils.isEmpty(objs) && !CollectionUtils.isEmpty(objs.associations)) {\n              objs.associations.forEach(element => {\n                if (element.fieldKey == field.key && element.componentIdentifier == this.sourceIdentifier) {\n                  hasAssociation = true;\n                }\n              });\n            }\n            return hasAssociation;\n          })\n          .forEach(field => {\n            if (field['options'] && field['options'].length > 0) {\n              for (let index = 0; index < field['options'].length; index++) {\n                if (field['options'][index].key == value) {\n                  value = field['options'][index].value;\n                  break;\n                }\n              }\n            }\n          });\n      }\n    }\n\n    this.resolvedValue = value;\n\n    if (FieldUtils.isEllipsisField(this.field) && FieldUtils.displayEllipsis(this.charLimit, this.resolvedValue)) {\n      value = JSON.stringify(value);\n      initialLength = value.length;\n\n      value = value.substr(0, (<TextField>this.field).ellipsis);\n      finalLength = value.length;\n\n      value += \"...\";\n\n      if (initialLength > finalLength) {\n        this.ellipsisRequired = true;\n      }\n    }\n\n    return value;\n  }\n\n  displayFullText() {\n    let resolvedValueStr = JSON.stringify(this.resolvedValue);\n    if (!StringUtils.isEmpty(resolvedValueStr)) {\n      this.charLimit = resolvedValueStr.length;\n    }\n  }\n\n  displayShortText() {\n    if ((<TextField>this.field).ellipsis && (<TextField>this.field).ellipsis > 0) {\n      this.charLimit = (<TextField>this.field).ellipsis;\n      this.displayEllipsis();\n    }\n  }\n\n  displayEllipsis(): boolean {\n    return FieldUtils.displayEllipsis(this.charLimit, this.resolvedValue);\n  }\n\n  setCalendar() {\n    if (this.field.type === FieldType.CALENDAR) {\n      this.dateRange = (<CalendarField>this.field).dateRange;\n    }\n  }\n\n  ///////////////////////////// AUTOCOMPLETE - START ///////////////////////////\n  private invokeOnChangeOnField(value: string, input: any): boolean {\n    let invokeOnChange: boolean = false;\n\n    if (this.field.type == FieldType.AUTOCOMPLETE) {\n      this.autoCompleteInputHasValue = !!value;\n\n      if (value.length >= this.minLengthForTrigger) {\n        this.autoCompleteInputHasValue = !!value;\n        this.highlightAutoCompleteText = value;\n      } else {\n        this.autoCompleteInputHasValue = false;\n        this.highlightAutoCompleteText = '';\n      }\n      invokeOnChange = true;\n    } else {\n      invokeOnChange = true;\n    }\n\n    return invokeOnChange;\n  }\n\n  autocompleteDisplayFn(option: DropdownOption | any): string {\n    let value: string;\n    if (option != null && option.key != null) {\n      value = option.value;\n    } else {\n      value = option;\n    }\n\n    return value;\n  }\n\n  private _filter(value: string): Array<DropdownOption> {\n    const filterValue = value.toLowerCase();\n    var result = (<AutocompleteField>this.field).options.filter(option => option.value.toLowerCase().includes(filterValue));\n    this.autoCompleteResultCount = result.length;\n    return result;\n  }\n  ///////////////////////////// AUTOCOMPLETE - END ///////////////////////////\n\n  ///////////////////////////// DROPDOWN OPTION - START ///////////////////////////\n  setOptionInDisplay(): void {\n    if (this.field['options'] && this.fieldControl) {\n      let key: any = this.fieldControl.value;\n\n      for (let cnt = 0; cnt < (this.field['options'] as Array<DropdownOption>).length; cnt++) {\n        if (this.field['options'][cnt].key === key) {\n          this.field['options'][cnt].checked = true;\n        }\n      }\n    }\n  }\n\n\n  setClear() {\n    let hasClear = false;\n    if (this.resolvedValue && (<TextField>this.field).hasClear && (\n      this.field.type == FieldType.TEXT ||\n      this.field.type == FieldType.TEXTAREA ||\n      this.field.type == FieldType.EMAIL ||\n      this.field.type == FieldType.PASSWORD ||\n      this.field.type == FieldType.COLOR ||\n      this.field.type == FieldType.MONTH ||\n      this.field.type == FieldType.WEEK ||\n      this.field.type == FieldType.NUMBER ||\n      this.field.type == FieldType.DROPDOWN ||\n      this.field.type == FieldType.AUTOCOMPLETE ||\n      this.field.type == FieldType.CHIPS ||\n      this.field.type == FieldType.TIME ||\n      this.field.type == FieldType.CALENDAR\n    )) {\n      hasClear = true;\n    }\n\n    this.hasClear = hasClear;\n  }\n\n  cleanValue() {\n    this.resolvedValue = \"\";\n    this.fieldControl.setValue(\"\");\n    this.setClear();\n  }\n\n  getResolveTextWithKey(field: any) {\n    let value: string = \"\";\n\n    if (this.row != undefined) {\n      if (this.row[field['resolveOptionWithKey']]) {\n        value = this.row[field['resolveOptionWithKey']];\n      }\n    }\n\n    return value;\n  }\n\n  getDropdownValue(field: Field, txt: any): any {\n    let value: any = \"\";\n\n    if (this.fieldControl != undefined) {\n      if (this.fieldControl.value) {\n        value = this.fieldControl.value;\n      }\n    } else {\n      value = txt;\n    }\n\n    if (field['options'] && field['options'].length > 0) {\n      for (let index = 0; index < field['options'].length; index++) {\n        let isSelected: boolean = false;\n        if (value instanceof Array) {\n          if (value.indexOf(field['options'][index].key) > -1)  {\n            isSelected = true;\n          }\n        } else if (value instanceof String) {\n          if (field['options'][index].key == value) {\n            isSelected = true;\n          }\n        } else if (value instanceof Object) {\n          if (value[field['options'][index].key])  {\n            isSelected = true;\n          }\n        }\n\n        if (isSelected) {\n          value = field['options'][index].value;\n          break;\n        }\n      }\n    }\n\n\n    return value;\n  }\n  ///////////////////////////// DROPDOWN OPTION - END ///////////////////////////\n\n  ///////////////////////////// UPLOAD - START ///////////////////////////\n  // imgURL: any;\n  // onUpload(event) {\n  //   let file: File = {\n  //     'source': this.sourceIdentifier,\n  //     'index': this.index,\n  //     'field': this.field.key,\n  //     'files': event.target.files\n  //   };\n  //   this.field['onUpload'](file);\n\n\n  //   var reader = new FileReader();\n  //   reader.readAsDataURL(file.files[0]);\n  //   reader.onload = (_event) => {\n  //     this.imgURL = reader.result;\n  //   }\n  // }\n  ///////////////////////////// UPLOAD - END ///////////////////////////\n\n  ///////////////////////////// IMAGE - START ///////////////////////////\n  getImagePath(field: Field): void {\n    //    console.log(path);\n    if (!StringUtils.isEmpty(this.resolvedValue) && this.resolvedValue instanceof String && this.resolvedValue.indexOf(\"http://\") <= -1) {\n      // if (this.resolvedValue.startsWith(\"/\")) {\n      //   this.resolvedValue = Properties.contentUrl + this.resolvedValue;\n      // } else {\n      //   this.resolvedValue = Properties.contentUrl + \"/\" + this.resolvedValue;\n      // }\n    }\n\n    this.imagePath = this.resolvedValue;\n  }\n  ///////////////////////////// IMAGE - END ///////////////////////////\n\n  ///////////////////////////// SLIDER - START ///////////////////////////\n  //   getSliderTickInterval(): number | 'auto' {\n  // //    if ((<SliderField>this.field)..showTicks) {\n  //       return (<SliderField>this.field).autoTicks ? 'auto' : this.tickInterval;\n  // //    }\n\n  //     return 0;\n  //   }\n  ///////////////////////////// SLIDER - END ///////////////////////////\n\n  ///////////////////////////// EVENTS - START ///////////////////////////\n  onAutocompleteChange(autocomplate: any) {\n    let value = autocomplate.option.value;\n    // console.log(value);\n\n    this.onChangeEvent(this.field.key, value, autocomplate);\n  }\n\n  onToggleChange(toggle: any) {\n    console.log(toggle);\n    let value = toggle.checked;\n    //    console.log(value);\n    this.onChangeEvent(this.field.key, value, toggle);\n  }\n\n  onSliderChange(slider: any) {\n    //    console.log(slider);\n    let value = slider.value;\n    //    console.log(value);\n    this.onChangeEvent(this.field.key, value, slider);\n  }\n\n  onRadioChange(radio: any) {\n    //    console.log(radio);\n    let value = radio.value;\n    //    console.log(value);\n    this.onChangeEvent(this.field.key, value, radio);\n  }\n\n  onCheckboxChange(option: any, checkbox: any) {\n    let key = option.key;\n    let value = checkbox.checked;\n    // console.log(key + \": \" + value);\n    this.onChangeEvent(key, value, checkbox);\n  }\n\n  setShowLess() {\n    if (this.field.type === FieldType.RADIO || this.field.type === FieldType.CHECKBOX) {\n      this.showLess = (<CheckboxField | RadioField>this.field).showLess || (<CheckboxField | RadioField>this.field).options.length;\n    }\n  }\n\n  onShowAllOptions = () => {\n    this.showLess = (<CheckboxField | RadioField>this.field).options.length;\n  }\n\n  onOptionChange(options: MatSelectionListChange) {\n    let value = this.listView.selectedOptions.selected.map(x => x.value);\n\n    if (this.field.type == 'CHECKBOX') {\n      let selectedOptions = options.source._value;\n      let currentOptions = <Map<any, boolean>>this.fieldControl.value;\n\n      for (let key in currentOptions) {\n        if (selectedOptions.indexOf(key) > -1) {\n          currentOptions[key] = true;\n        } else {\n          currentOptions[key] = false;\n        }\n      }\n\n      (<FormGroup>this.fieldControl).setValue(currentOptions);\n    } else if (this.field.type == 'RADIO') {\n      let selectedOptions = options.source._value;\n\n      if (CollectionUtils.isEmpty(selectedOptions)) {\n        (<FormControl>this.fieldControl).setValue(null);\n        value = null;\n      } else {\n        (<FormControl>this.fieldControl).setValue(selectedOptions[0]);\n        value = value[0];\n      }\n    }\n    this.onChangeEvent(this.field.key, value, options);\n  }\n\n  onHtmlEditorChange($event: any) {\n    // console.log($event);\n    //    console.log(value);\n    this.onChangeEvent(this.field.key, $event.html, $event);\n  }\n\n  onChipsListChange($event: any) {\n    this.onChangeEvent(this.field.key, $event.values, $event);\n  }\n\n  autoCompleteInputHasValue: boolean = false;\n  onInputChange(input: any) {\n    console.log(input);\n    let value = input.target.value;\n    //    console.log(value);\n\n    if (this.invokeOnChangeOnField(value, input)) {\n      this.onChangeEvent(this.field.key, value, input);\n    }\n  }\n\n  onDateChange(date: MatDatepickerInputEvent<Date>, type: string) {\n    let key: string = this.field.key;\n    if (!StringUtils.isEmpty(type)) {\n      key = this.field.key + \".\" + type;\n    }\n\n    //    console.log(date.value);\n    let value = date.value;\n    //    console.log(value);\n    this.onChangeEvent(key, value, date);\n  }\n\n  onChange(dropdown: any) {\n    //    console.log(dropdown.value);\n    let value = dropdown.value;\n\n    this.onChangeEvent(this.field.key, value, dropdown);\n  }\n\n  onFileChange(event: any) {\n    // console.log(event);\n\n    this.onChangeEvent(this.field.key, event, event);\n\n    var reader = new FileReader();\n    reader.readAsDataURL(event[0]);\n    reader.onload = (_event) => {\n      this.imgURL = reader.result;\n    }\n  }\n\n  onParagraphChange(event: any) {\n    //    console.log(event); \n    this.onChangeEvent(this.field.key, event, event);\n  }\n\n  buttonClick(event: any) {\n    this.onButtonClick.emit(event);\n  }\n\n  onChangeEvent(key: string, value: any, event: any) {\n    this.resolvedValue = value;\n    this.setClear();\n    setTimeout(() => { \n      //      if ((this.dependencies && this.dependencies[this.field.key]) || this.field.type == FieldType.CHECKBOX || this.field.type == FieldType.DROPDOWN) {\n      if ((this.dependencies && this.dependencies[this.field.key])) {\n        let action: Action = {\n          sourceIdentifier: this.sourceIdentifier,\n          sourceIndex: this.sourceIndex,\n          widgetArrayIndex: this.widgetArrayIndex,\n          fieldIndex: this.fieldIndex,\n          action: this.field.key,\n          data: this.form.getRawValue(),\n          parentHierarchy: null,\n          event: event\n        };\n        this.onDependentFieldChange.emit(action);\n      }\n    }, 200);\n\n    let fieldChange: FieldChange = {\n      sourceIdentifier: this.sourceIdentifier,\n      sourceIndex: this.sourceIndex,\n      widgetArrayIndex: this.widgetArrayIndex,\n      fieldIndex: this.fieldIndex,\n      fieldKey: key,\n      value: value,\n      event: event\n    }\n\n    this.onFieldChange.emit(fieldChange);\n  }\n\n  // onChangeSearch(val: string) {\n  //   console.log(\"onChangeSearch\");\n  //   let autocomplete: Autocomplete = {\n  //     'source': this.sourceIdentifier,\n  //     'index': this.index,\n  //     'field': this.field.key,\n  //     'searchText': val\n  //   };\n\n  //   this.autocompleteService.invoke(autocomplete);\n  // }\n  ///////////////////////////// EVENTS - END ///////////////////////////\n\n  ///////////////////////////// ERROR - START ///////////////////////////\n  errors(): Array<{ error: string, message: string }> {\n    let errors: Array<{ error: string, message: string }> = [];\n    if (this.fieldControl != undefined) {\n      if (this.fieldControl && this.fieldControl.errors) {\n        Object.keys(this.fieldControl.errors).forEach(keyError => {\n          if (this.field.validations) {\n            for (let validation of this.field.validations) {\n              if (keyError === validation.message.key) {\n                errors[errors.length] = { error: keyError, message: validation.message.message };\n              } else {\n                //errors[errors.length] = {error: keyError, message: this.fieldControl.errors[keyError]};\n              }\n            }\n          }\n        });\n      } else if (this.fieldControl instanceof FormGroup) {\n        if (this.fieldControl.controls && this.fieldControl.controls['startDate'] && this.fieldControl.controls['startDate'].errors) {\n          Object.keys(this.fieldControl.controls['startDate'].errors).forEach(keyError => {\n            if (this.field.validations) {\n              for (let validation of this.field.validations) {\n                if (keyError === validation.message.key) {\n                  errors[errors.length] = { error: keyError, message: validation.message.message };\n                }\n              }\n            }\n          });\n        }\n      }\n    }\n\n    return errors;\n  }\n\n  ///////////////////////////// ERROR - END ///////////////////////////\n  setTextClearButton(identifier: string, label: string, icon: string, routeTo: Array<string>): Button {\n    return {\n      identifier: identifier,\n      label: label,\n      color: ButtonColor.PRIMARY,\n      size: ButtonSize.SMALL,\n      icon: icon,\n      type: ButtonType.GHOST,\n      onlyIcon: true,\n      routerLink: routeTo\n    };\n  }\n\n  addField(field: Field) {\n    let validations: Array<ValidatorFn> = FormUtils.getFieldValidation(field);\n\n    (<FormArray>this.form.controls[field.key]).push(FormUtils.setFormControl(this.displayMode, field, null, validations));\n\n    this.onFormChange.emit(this.form);\n  }\n\n  removeField(field: Field, index: number) {\n    (<FormArray>this.form.controls[field.key]).controls.splice(index, 1);\n\n    this.onFormChange.emit(this.form);\n  }\n\n  addRemoveButton(identifier: string, label: string, icon: string): Button {\n    return {\n      identifier: identifier,\n      label: label,\n      color: ButtonColor.PRIMARY,\n      size: ButtonSize.SMALL,\n      icon: icon,\n      type: ButtonType.FLAT,\n      onlyIcon: true\n    };\n  }\n\n  onFileComplete(data: any) {\n    // console.log(data); // We just print out data bubbled up from event emitter.\n  }\n\n  onListImageLoadError = ($event): void => {\n    $event.target.src = (<RadioField | CheckboxField>this.field).defaultImageUrl;\n  }\n}\n","import { Component, OnInit, Input } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { FieldDiaplyType, Field, KeyMap } from '../../model';\nimport { FormDiaplyMode } from '../../../form/model';\nimport { AbilityUtils } from '../../../utility/ability.utility';\nimport { Ability } from '@casl/ability';\n\n@Component({\n  selector: 'cf-field-layout',\n  templateUrl: './field-layout.component.html',\n  styleUrls: ['./field-layout.component.scss']\n})\nexport class FieldLayoutComponent implements OnInit {\n  @Input() sourceIdentifier: string;\n  @Input() sourceIndex: number;\n  @Input() form: FormGroup;\n  @Input() field: Field;// | DropdownField | ImageField | CalendarField | AutocompleteField | FileField; \n  @Input() displayMode: FormDiaplyMode;\n  @Input() value: any;\n  @Input() dependencies: any;\n  @Input() row: any;\n  @Input() keyMap: Array<KeyMap>;\n\n  // radio: {} = {};\n\n  // minDate: Date;\n  // maxDate: Date;\n\n  //protected dateService: NbDateService<Date>, protected autocompleteSearch: AutocompleteService\n  constructor(private ability: Ability) { \n    AbilityUtils.setAbility(this.ability);\n  }\n\n  ngOnInit() {\n  }\n\n  initField() {\n    // if (this.field.type == FieldType.RADIO) {\n    //   this.radio[this.field.key] = null;\n    // }\n\n    // if (this.field.type == FieldType.CALENDAR)  {\n    //   this.minDate = this.dateService.addDay(this.dateService.today(), this.field['min']);\n    //   this.maxDate = this.dateService.addDay(this.dateService.today(), this.field['max']);\n    // }    \n  }\n\n  isRequired(): boolean {\n    let isRequired: boolean = false;\n    if (this.field.validations && this.field.validations.length > 0) {\n      for (let validation of this.field.validations) {\n        if (validation.message.key == \"required\") {\n          isRequired = true;\n        }\n      }\n    }\n\n    return isRequired;\n  }\n\n  isValidDisplayType(fieldDiaplyType: FieldDiaplyType): boolean {\n    if (this.field) {\n      return this.field.fieldDisplayType == fieldDiaplyType;\n    } else {\n      return false;\n    }\n  }\n}\n","import { Component, OnInit, ViewEncapsulation } from '@angular/core';\nimport { FieldLayoutComponent } from '../field-layout.component';\nimport { FieldDiaplyType } from '../../../model';\n\n@Component({\n  selector: 'cf-field-horizontal-layout',\n  templateUrl: './field-horizontal-layout.component.html',\n  styleUrls: ['./field-horizontal-layout.component.scss'],\n  encapsulation: ViewEncapsulation.None\n})\nexport class FieldHorizontalLayoutComponent extends FieldLayoutComponent implements OnInit {\n  //protected dateService: NbDateService<Date>, protected autocompleteSearch: AutocompleteService\n//  constructor() {\n//    super(dateService, autocompleteSearch);\n//  }\n\n  ngOnInit() {\n    this.initField();\n  }\n\n  displayHorizonalForm(): boolean {\n    return this.isValidDisplayType(FieldDiaplyType.HORIZONTAL);\n  }\n}\n","import { Component, OnInit, ViewEncapsulation } from '@angular/core';\nimport { FieldLayoutComponent } from '../field-layout.component';\nimport { FieldDiaplyType } from '../../../model';\n\n@Component({\n  selector: 'cf-field-inline-layout',\n  templateUrl: './field-inline-layout.component.html',\n  styleUrls: ['./field-inline-layout.component.scss'],\n  encapsulation: ViewEncapsulation.None\n})\nexport class FieldInlineLayoutComponent extends FieldLayoutComponent implements OnInit {\n  //protected dateService: NbDateService<Date>, protected autocompleteSearch: AutocompleteService\n//  constructor() {\n//    super(dateService, autocompleteSearch);\n//  }\n\n  ngOnInit() {\n    this.initField();\n  }\n  \n  displayInlineForm(): boolean {\n    return this.isValidDisplayType(FieldDiaplyType.INLINE);\n  }\n}\n","import { Component, OnInit, ViewEncapsulation } from '@angular/core';\nimport { FieldLayoutComponent } from '../field-layout.component';\nimport { FieldDiaplyType } from '../../../model';\n\n@Component({\n  selector: 'cf-field-vertical-layout',\n  templateUrl: './field-vertical-layout.component.html',\n  styleUrls: ['./field-vertical-layout.component.scss'],\n  encapsulation: ViewEncapsulation.None\n})\nexport class FieldVerticalLayoutComponent extends FieldLayoutComponent implements OnInit {\n  //protected dateService: NbDateService<Date>, protected autocompleteSearch: AutocompleteService\n//  constructor() {\n//    super(dateService, autocompleteSearch);\n//  }\n\n  ngOnInit() {\n    this.initField();\n  }\n  \n  displayVerticalForm(): boolean {\n    return this.isValidDisplayType(FieldDiaplyType.INLINE);\n  } \n}\n","import { Component, OnInit, OnDestroy, Input, EventEmitter, Output, ViewChild, ViewEncapsulation } from '@angular/core';\n\nimport { BreakpointObserver, Breakpoints, BreakpointState } from '@angular/cdk/layout';\n\nimport { List, Record, PaginationType, CellColor, Column, ChildListType, CustomLayoutCell, CellControllType, CellControl } from '../model';\nimport { ObjectTree, Button, ButtonType, ButtonColor, ButtonSize, Action, ReservedButton } from '../../button/model';\nimport { KeyMap, FieldType, FieldAppearance, FieldDiaplyType, TextField, DropdownOption, DropdownField, FieldChange, KeyMapOptionType, AutocompleteField, RadioField, CheckboxField } from '../../field/model';\nimport { FormDiaplyMode, FormField, FormTitleIconPosition } from '../../form/model';\nimport { FormGroup } from '@angular/forms';\nimport { MatTableDataSource } from '@angular/material/table';\nimport { MatPaginator } from '@angular/material/paginator';\nimport { MatSort } from '@angular/material/sort';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nimport { FieldUtils, FormUtils, CollectionUtils, StringUtils, KeyMapUtils, ListUtils } from '../../utility';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport { Ability } from '@casl/ability';\nimport { AbilityUtils, ButtonUtils } from '../../utility';\nimport { Subscription } from 'rxjs';\nimport { timeInterval } from 'rxjs/operators';\n\n@Component({\n  selector: 'cf-list',\n  templateUrl: './list.component.html',\n  styleUrls: ['./list.component.scss'],\n  animations: [\n    trigger('detailExpand', [\n      state('collapsed', style({ height: '0px', minHeight: '0' })),\n      state('expanded', style({ height: '*' })),\n      transition('expanded <=> collapsed', animate('225ms cubic-bezier(0.4, 0.0, 0.2, 1)')),\n    ]),\n  ],\n  encapsulation: ViewEncapsulation.None\n})\nexport class ListComponent implements OnInit, OnDestroy {\n  @Input() _listConfig: List;\n  get listConfig(): List {\n    return this._listConfig;\n  }\n  @Input()\n  set listConfig(_listConfig: List) {\n    this._listConfig = _listConfig;\n    this.setColumnNames();\n    this.setDetailColumnCount();\n    this.setCardVisibility();\n  }\n\n  @Input() _record: Record;\n  get record(): Record {\n    return this._record;\n  }\n  @Input()\n  set record(_record: Record) {\n    // console.log(\"-------------->\")\n    // console.log(_record);\n    // console.log(this._record);\n    // console.log(\"<--------------\")\n    if (!this.parent || (this.parent && JSON.stringify(_record) != JSON.stringify(this._record))) {\n      this._record = _record;\n\n      this.init();\n      this.setCardVisibility();\n    }\n  }\n\n  @Input() sourceIdentifier: string;\n  @Input() sourceIndex: number;\n  @Input() widgetArrayIndex: number;\n  @Input() originalData: any;\n  @Input() parent: ObjectTree;\n  @Input() _listReset: boolean;\n  get listReset(): boolean {\n    return this._listReset;\n  }\n  @Input()\n  set listReset(_listReset: boolean) {\n    this._listReset = _listReset;\n\n    if (this._listReset) {\n      this.resetInlineEditButton('inlineEditButton', 'Edit', 'edit');\n    }\n  }\n\n  @Input() disabled: boolean;\n  @Input() keyMap: Array<KeyMap>;\n  @Output() onFormChange = new EventEmitter();\n  @Output() onFieldChange = new EventEmitter();\n  @Output() onButtonClick = new EventEmitter();\n  @Output() onPageChange = new EventEmitter();\n  @Output() onSortChange = new EventEmitter();\n\n  _expanded: boolean = false;\n  get expanded(): boolean {\n    return this._expanded;\n  }\n  @Input()\n  set expanded(_expanded: boolean) {\n    this._expanded = _expanded;\n  }\n\n  @Input()\n  expandRowIndex: number;\n\n  dataSource: MatTableDataSource<any> = new MatTableDataSource();\n\n  @ViewChild(MatPaginator, { static: false }) set contentPage(pagination: MatPaginator) {\n    this.dataSource.paginator = pagination;\n  }\n\n\n  @ViewChild(MatSort, { static: false }) set contentSort(sort: MatSort) {\n    this.dataSource.sort = sort;\n  }\n\n  cellCount: number = 12;\n  isMobile: boolean;\n  isTablet: boolean;\n  isDesktop: boolean;\n  displayVertical: boolean = false;\n\n  form: FormGroup;\n  commonListForm: FormGroup;\n  formIndex: number = -1;\n\n  inlineEditButtons: Array<Button> = new Array<Button>();\n  hasDisplayActions: boolean = false;\n  isInlineEditable: boolean = false;\n  inlineButtonSize: ButtonSize = ButtonSize.DEFAULT;\n  childRows: Map<number, Record> = new Map<number, Record>();\n  childColumnCount: number;\n\n  displayModes: Array<FormDiaplyMode> = new Array<FormDiaplyMode>();\n  columnNames: Array<string> = new Array<string>();\n  columnConfigs: Array<Column> = new Array<Column>();\n  totalDispalyableWidth: number;\n\n  selection = new SelectionModel<any>(true, []);\n  hideCard: boolean = false;\n  hideHeader: boolean = false;\n  hideFooter: boolean = false;\n\n  pageSizeOptions: Array<number> = [5, 10, 25, 100];\n  rowCount: number = 0;\n  limit: number = 0;\n  expandedRow: any | null;\n  rowColors: Array<CellColor> = new Array<CellColor>();\n  cellColors: Array<Array<CellColor>> = new Array<Array<CellColor>>();\n  hoverRowData: any;\n  hoverRowIndex: number;\n\n  showCard = false;\n  iconPosition: FormTitleIconPosition;\n\n  breakpointSubscription: Subscription;\n\n  constructor(public ability: Ability, public breakpointObserver: BreakpointObserver) {\n    AbilityUtils.setAbility(this.ability);\n  }\n\n  ngOnInit() {\n  }\n\n  init() {\n    this.getLayout();\n\n    this.setPageSize();\n    if (this._record === undefined) {\n      this._record = { total: 10, pageNo: 1, rows: [] };\n    }\n\n    if (this._record && this._record.rows) {\n      if (this._record.rows.length != this.rowCount) {\n        this._record.rows = [...this._record.rows];\n\n        this.dataSource.data = this._record.rows;\n      }\n    }\n\n    this.resetInlineEditButton('inlineEditButton', 'Edit', 'edit');\n    this.populateAllChilds();\n\n    this.showRowEditable();\n    this.initCommonFormGroup();\n    this.setColors();\n    this.setIconPosition();\n    this.setFilterBar();\n\n    ListUtils.setCustomLayouts(this.listConfig);  \n  }\n\n  sortDirection: 'asc' | 'desc' | '' = 'asc';\n  sticky() {\n    let header1=document.querySelectorAll(\".mat-toolbar\");\n    let header = document.getElementById(\"mySearch\");\n    if(header){\n      let sticky = header.offsetTop;\n      if (window.pageYOffset > sticky) {\n        header.classList.add(\"sticky\");\n   \n        header1.forEach((el) => {\n          el.classList.add(\"sticky-header\");\n      });\n      } else {\n        header.classList.remove(\"sticky\");\n        header1.forEach((el) => {\n          el.classList.remove(\"sticky-header\");\n        });\n      }\n    }\n  }\n\n  onScrolled(event){\n  }\n\n\n  contentFilterColumnSpan: number;\n  columnSelectionColumnSpan: number;\n\n  setFilterBar() {\n    if (this._listConfig.staticList.hasOnPageFilter && !this._listConfig.hasColumnSelection)  {\n      this.contentFilterColumnSpan = 12;\n    }\n    if (!this._listConfig.staticList.hasOnPageFilter && this._listConfig.hasColumnSelection)  {\n      this.columnSelectionColumnSpan = 12;\n    }\n  }\n\n  setPageSize() {\n    if (this._listConfig.pagination == PaginationType.ALL) {\n      this.limit = this._record && this._record.rows ? this._record.rows.length : 10;\n    } else {\n      if (this._listConfig.pageSize) {\n        this.limit = this._listConfig.pageSize;\n      }\n    }\n  }\n\n  setIconPosition() {\n    this.iconPosition = FormTitleIconPosition.BEFORE_TITLE;\n    if (this._listConfig.header && this._listConfig.header.icon && this._listConfig.header.icon.position) {\n      this.iconPosition = this._listConfig.header.icon.position;\n    }\n  }\n\n  filterField: TextField;\n  getFilterField(): TextField {\n    this.filterField = {\n      key: \"pageFilter\",\n      label: \"Filter\",\n      type: FieldType.TEXT,\n      icon: \"search\",\n      appearance: FieldAppearance.STANDARD,\n      isReadOnly: false,\n      fieldDisplayType: FieldDiaplyType.INLINE,\n      placeholder: \"Type to display filtered list\",\n      value: \"\"\n    };\n\n    return this.filterField;\n  }\n\n  columnSelectorField: DropdownField;\n  getColumnSelectorField(): DropdownField {\n    this.columnSelectorField = ListUtils.getColumnSelectorField(this._listConfig);\n\n    return this.columnSelectorField;\n  }\n\n  updateColumnDisplay(event: any) {\n    console.log(event);\n    for (let column of this._listConfig.columns) {\n      if (event.value.indexOf(ListUtils.getColumnKey(column)) > -1) {\n        column.show = true;\n      } else {\n        column.show = false;\n      }\n    }\n\n    this.setColumnNames();\n    this.setDetailColumnCount();\n  }\n\n  inlinEditButton(identifier: string, label: string, icon: string): Button {\n    let buttonConfig: Button = {\n      identifier: identifier,\n      type: ButtonType.RAISED,\n      label: label,\n      color: ButtonColor.PRIMARY,\n      size: ButtonSize.SMALL,\n      icon: icon,\n      onlyIcon: false\n    }\n\n    return buttonConfig;\n  }\n\n  getColumnLabel(column: Column): string {\n    return ListUtils.getColumnLabel(column);\n  }\n\n  getColumnKey(column: Column): string {\n    return ListUtils.getColumnKey(column);\n  }\n\n  resetInlineEditButton(identifier: string, label: string, icon: string) {\n    for (let cIndex = 0; cIndex < this.columnConfigs.length; cIndex++) {\n\n      if (!CollectionUtils.isEmpty(this._listConfig.actions)) {\n        for (let action of this._listConfig.actions) {\n          if (action.permission == null || (this.ability.can(action.permission['action'], action.permission['subject']))) {\n            this.hasDisplayActions = true;\n            break;\n          }\n        }\n      }\n\n      if (this.hasDisplayActions) {\n        for (let field of this.columnConfigs[cIndex].fields) {\n          if (FieldUtils.readOnlyField().indexOf(field.type) > -1) { } else {\n            this.isInlineEditable = true;\n            break;\n          }\n        }\n      }\n    }\n\n    this.inlineEditButtons = new Array<Button>();\n\n    if (this._record && this._record.rows) {\n      for (let index = 0; index < this._record.rows.length; index++) {\n        this.inlineEditButtons.push(this.inlinEditButton(identifier, label, icon));\n\n        this.displayModes[index] = FormDiaplyMode.VIEW;\n      }\n    }\n    this.formIndex = -1;\n\n    this.setColumnNames();\n  }\n\n  showRowEditable() {\n    if (!CollectionUtils.isEmpty(this._listConfig.actions)) {\n      this.inlineButtonSize = this._listConfig.actions[0].size\n    }\n\n    if (this._record && this._record.rows) {\n      for (let index = 0; index < this._record.rows.length; index++) {\n        if (this._record.rows[index]['showRowEditable']) {\n          this.setRowEditablity(index);\n        }\n      }\n    }\n  }\n\n  setRowEditablity(index: number): void {\n    if (this.formIndex != -1 && this.formIndex != index) {\n      this.inlineEditButtons[this.formIndex].identifier = 'inlineEditButton';\n      this.inlineEditButtons[this.formIndex].label = 'Edit';\n      this.inlineEditButtons[this.formIndex].icon = 'edit';\n      this.inlineEditButtons[this.formIndex].size = this.inlineButtonSize;\n      this.formIndex = -1;\n    }\n    if (this.inlineEditButtons[index].label == 'Edit') {\n      this.inlineEditButtons[index].identifier = 'cancelInlineStaticList';\n      this.inlineEditButtons[index].label = 'Cancel';\n      this.inlineEditButtons[index].icon = 'close';\n      this.inlineEditButtons[index].size = this.inlineButtonSize;\n\n      if (this._record && this._record.rows) {\n        for (let rIndex = 0; rIndex < this._record.rows.length; rIndex++) {\n          this.displayModes[rIndex] = FormDiaplyMode.VIEW;\n\n          if (rIndex != index) {\n            this.inlineEditButtons[rIndex].identifier = 'inlineEditButton';\n            this.inlineEditButtons[rIndex].label = 'Edit';\n            this.inlineEditButtons[rIndex].icon = 'edit';\n            this.inlineEditButtons[rIndex].size = this.inlineButtonSize;\n          }\n        }\n\n        if (this._record.rows[index]['formDisplayMode']) {\n          this.displayModes[index] = this._record.rows[index]['formDisplayMode'];\n        } else {\n          this.displayModes[index] = FormDiaplyMode.EDIT;\n        }\n      }\n\n      this.initFormGroup(index);\n      this.formIndex = index;\n      this._listReset = false;\n    } else {\n      this.inlineEditButtons[index].identifier = 'inlineEditButton';\n      this.inlineEditButtons[index].label = 'Edit';\n      this.inlineEditButtons[index].icon = 'edit';\n      this.inlineEditButtons[index].size = this.inlineButtonSize;\n      this.formIndex = -1;\n    }\n\n    let inlineButtonTemp = this.inlineEditButtons[index];\n    this.inlineEditButtons[index] = undefined;\n    setTimeout(() => this.inlineEditButtons[index] = inlineButtonTemp, 100);\n  }\n\n  populateAllChilds(): void {\n    if (this._record && this._record.rows && this._record.rows.length > 0) {\n      for (let rIndex = 0; rIndex < this._record.rows.length; rIndex++) {\n        this.childRows[rIndex] = this.getChildRows(this._record.rows[rIndex]);\n      }\n    }\n  }\n\n  getChildRows(row: any): any {\n    if (this._listConfig && this._listConfig.child && row) {\n      let data: Array<any> | any = this._listConfig.child.recordIdentifier ? row[this._listConfig.child.recordIdentifier] : row;\n\n      if (this._listConfig.child.type == ChildListType.LIST) {\n        if (data) {\n          let childData: any;\n          if (data instanceof Array) {\n            childData = data;\n          } else {\n            childData = new Array<any>();\n            childData.push(data);\n          }\n\n          let record: Record = {\n            pageNo: 1,\n            total: childData.length,\n            rows: childData\n          };\n\n          return record;\n        }\n      } else {\n        return data;\n      }\n    }\n  }\n\n  getValue(colIndex: number, cFieldIndex: number, row: any, value: any): any {\n    try {\n      value = eval(\"row.\" + this.columnConfigs[colIndex].fields[cFieldIndex].key);\n    } catch (e) { }\n\n    return value;\n  }\n\n  updateFilter(field) {\n    const filterValue = field.value;\n    this.dataSource.filter = filterValue.trim().toLowerCase();\n\n    if (this.dataSource.paginator) {\n      this.dataSource.paginator.firstPage();\n    }\n  }\n\n  initFormGroup(cnt: number): void {\n    let fieldControls = {};\n\n    let row = this.getCurrentRecord(cnt);\n\n    KeyMapUtils.setOptionssUsingValues(this.keyMap, false, KeyMapOptionType.LIST, this._listConfig, row);\n\n    for (let column of this.columnConfigs) {\n      for (let field of column.fields) {\n        let formField: FormField = { field: field, addMore: false };\n\n        if (this._listConfig.uniqueKeys.indexOf(formField.field.key) > -1) {\n          formField.field.isUnique = true;\n        }\n        FormUtils.initFieldGroup(fieldControls, formField, null, row, this.displayModes[cnt]);\n      }\n    }\n\n    this.form = new FormGroup(fieldControls);\n    this.formIndex = cnt;\n  }\n\n  initCommonFormGroup(): void {\n    let commonFieldControls = {};\n\n    FormUtils.initFieldGroup(commonFieldControls, { field: this.getFilterField(), addMore: false }, {}, {}, FormDiaplyMode.EDIT);\n    FormUtils.initFieldGroup(commonFieldControls, { field: this.getColumnSelectorField(), addMore: false }, {}, {}, FormDiaplyMode.EDIT);\n\n    this.commonListForm = new FormGroup(commonFieldControls);\n  }\n\n  getCurrentRecord(cnt: number): any {\n    let record: any = {};\n\n    if (this.dataSource && this.dataSource['_renderData'] && this.dataSource['_renderData']['_value'] && this.dataSource['_renderData']['_value'][cnt]) {\n      record = this.dataSource['_renderData']['_value'][cnt];\n    } else if (this._record && this._record['rows'] && this._record['rows'][cnt]) {\n      record = this._record['rows'][cnt];\n    }\n\n    return record;\n  }\n\n  getObjectTree(currentRow: any): ObjectTree {\n    if (this._listConfig && this._listConfig.uniqueKeys && this._listConfig.uniqueKeys.length > 0) {\n      let keys = this._listConfig.uniqueKeys;\n\n      let values: Array<string> = new Array<string>();\n      keys.forEach(key => values.push(currentRow[key]));\n\n      let objectTree: ObjectTree = {\n        parent: {\n          key: values\n        }\n      };\n\n      if (this.parent) {\n        objectTree.hierarchyUp = JSON.parse(JSON.stringify(this.parent));\n      }\n      return objectTree;\n    } else {\n      return null;\n    }\n  }\n\n  /** Whether the number of selected elements matches the total number of rows. */\n  isAllSelected() {\n    const numSelected = this.selection.selected.length;\n    const numRows = this.dataSource.data.length;\n    return numSelected === numRows;\n  }\n\n  /** Selects all rows if they are not all selected; otherwise clear selection. */\n  masterToggle() {\n    this.isAllSelected() ?\n      this.selection.clear() :\n      this.dataSource.data.forEach(row => this.selection.select(row));\n  }\n\n  /** The label for the checkbox on the passed row */\n  checkboxLabel(row?: any): string {\n    if (!row) {\n      return `${this.isAllSelected() ? 'select' : 'deselect'} all`;\n    }\n    return `${this.selection.isSelected(row) ? 'deselect' : 'select'} row ${row.position + 1}`;\n  }\n\n  setCardVisibility(): void {\n    this.hideCard = false;\n    if (this._listConfig.hideCard || (this._listConfig.hideHeader && this._listConfig.hideFooter)) {\n      this.hideCard = true;\n    }\n\n    if (this.hideCard == false) {\n      if (this._record && this._record.rows && this._record.rows.length == this._record.total && (StringUtils.isEmpty(this._listConfig.header) && this._listConfig.description)) {\n        this.hideCard = true;\n      }\n    }\n\n    this.hideHeader = false;\n    if ((!this._listConfig.header || StringUtils.isEmpty(this._listConfig.header.title)) && StringUtils.isEmpty(this._listConfig.description) || this._listConfig.hideHeader) {\n      this.hideHeader = true;\n    }\n\n    this.hideFooter = false;\n    if ((this._record && this._record.rows && this._record.rows.length == this._record.total) || this._listConfig.hideFooter) {\n      this.hideFooter = true;\n    }\n  }\n\n  setColumnNames(): void {\n    this.columnNames = new Array<string>();\n    this.columnConfigs = new Array<Column>();\n\n    this.totalDispalyableWidth = 0;\n\n    if (this._listConfig.selectable) {\n      this.columnNames.push('select');\n\n      if (!this._listConfig.header) {\n        this._listConfig.header = { title: \"\" };\n      }\n\n      if (!this._listConfig.header || CollectionUtils.isEmpty(this._listConfig.header.actions)) {\n        this._listConfig.header.actions = new Array<Button>();\n      }\n\n      let selectableExist = false;\n      for (let button of this._listConfig.header.actions) {\n        if ((<Button>button).identifier == \"listCrudSelectionButton\") {\n          selectableExist = true;\n        }\n      }\n\n      if (!selectableExist) {\n        this._listConfig.header.actions.unshift(this.selectableButton(\"listCrudSelectionButton\", this._listConfig.selectable.label, this._listConfig.selectable.icon))\n      }\n    }\n\n    if (this._listConfig.columns && this._listConfig.columns.length > 0) {\n      this._listConfig.columns.filter(column => column.show == true).forEach(column => {\n        let hasDisplayableField = false;\n        for (let field of column.fields) {\n          if (field.permission == null || this.ability.can(field.permission['action'], field.permission['subject'])) {\n            hasDisplayableField = true;\n          }\n        }\n\n        if (hasDisplayableField) {\n          this.columnNames.push(ListUtils.getColumnKey(column));\n          this.columnConfigs.push(column);\n\n          this.totalDispalyableWidth += column.width;\n        }\n      });\n    }\n\n    if (this.hasDisplayActions) {\n      this.columnNames.push('action');\n\n      this.totalDispalyableWidth += this._listConfig.actionWidth;\n    }\n  }\n\n  setDetailColumnCount(): void {\n    this.childColumnCount = this.columnConfigs.length + (this._listConfig.actions && this._listConfig.actions.length > 0 ? 1 : 0) + (this._listConfig.selectable ? 1 : 0);\n  }\n\n  setColors(): void {\n    if (this._record && this._record.rows) {\n      for (let rIndex = 0; rIndex < this._record.rows.length; rIndex++) {\n        if (CollectionUtils.isEmpty(this.rowColors[rIndex])) {\n          this.rowColors.push({ bgColor: \"\", textColor: \"\" });\n        }\n        let rowColor: CellColor = this.rowColors[rIndex];\n        if (this._listConfig.rowBgColor) {\n          rowColor.bgColor = this._listConfig.rowBgColor(this._record.rows[rIndex]);\n        }\n        if (this._listConfig.rowTextColor) {\n          rowColor.textColor = this._listConfig.rowTextColor(this._record.rows[rIndex]);\n        }\n\n        for (let cIndex = 0; cIndex < this.columnConfigs.length; cIndex++) {\n          if (CollectionUtils.isEmpty(this.cellColors[rIndex])) {\n            this.cellColors.push(new Array<CellColor>());\n          }\n          if (CollectionUtils.isEmpty(this.cellColors[rIndex][cIndex])) {\n            this.cellColors[rIndex][cIndex] = { bgColor: \"\", textColor: \"\" };\n          }\n\n          let cellColor: CellColor = this.cellColors[rIndex][cIndex];\n          if (StringUtils.isEmpty(cellColor.bgColor)) {\n            cellColor.bgColor = rowColor.bgColor;\n          }\n          if (this.columnConfigs[cIndex].bgColor) {\n            cellColor.bgColor = this.columnConfigs[cIndex].bgColor(this._record.rows[rIndex]);\n          }\n\n          if (StringUtils.isEmpty(cellColor.textColor)) {\n            cellColor.textColor = rowColor.textColor;\n          }\n          if (this.columnConfigs[cIndex].textColor) {\n            cellColor.textColor = this.columnConfigs[cIndex].textColor(this._record.rows[rIndex]);\n          }\n        }\n      }\n    }\n  }\n\n  selectableButton(identifier: string, label: string, icon: string): Button {\n    return {\n      identifier: identifier,\n      label: label,\n      color: ButtonColor.PRIMARY,\n      size: ButtonSize.SMALL,\n      icon: icon,\n      type: ButtonType.FLAT,\n      onlyIcon: false\n    };\n  }\n\n  fieldChange(fieldChange: FieldChange) {\n    console.log(fieldChange);\n\n    this.onFieldChange.emit(fieldChange);\n    this.formChange(this.form);\n\n    //  if a field options are dependent on me, then reload its options \n    fieldChange.fieldKey;\n    this._listConfig.columns.forEach(column => {\n      column.fields.forEach(field => {\n        if ((<AutocompleteField | RadioField | CheckboxField | DropdownField>field).optionDependsOn == fieldChange.fieldKey) {\n          let row = FormUtils.getRawValue(this.form);\n          //let row = this.getCurrentRecord(fieldChange.sourceIndex);\n          KeyMapUtils.setOptionssUsingValues(this.keyMap, false, KeyMapOptionType.LIST, this._listConfig, row);\n        }\n      })\n    })\n  }\n\n  formChange(form: FormGroup) {\n    console.log(form);\n\n    if (form == undefined) {\n      this.onFormChange.emit(this.form);\n    } else {\n      this.onFormChange.emit(form);\n    }\n  }\n\n  buttonClick(action: Action) {\n    console.log(action);\n\n    if (action.action == 'listCrudSelectionButton') {\n      action.data = this.selection.selected;\n    }\n\n    if (action.action == ReservedButton.ROW_EXPAND || action.action == ReservedButton.ROW_COLLAPSE) {\n    } else {\n      action.event.stopPropagation();\n    }\n\n    this.onButtonClick.emit(action);\n  }\n\n  getLayout(): void {\n    this.breakpointSubscription = this.breakpointObserver.observe([\n      Breakpoints.XSmall,\n      Breakpoints.Small,\n      Breakpoints.Medium,\n      Breakpoints.Large,\n      Breakpoints.XLarge\n    ]).subscribe((state: BreakpointState) => {\n      if (state.breakpoints[Breakpoints.XSmall]) {\n        this.isMobile = true;\n        this.cellCount = this.listConfig.mobile && this.listConfig.mobile.cellCount ? this.listConfig.mobile.cellCount : 4;\n        this.hideCard = true;\n        ListUtils.getMobileConfig(this.listConfig);  \n\n        console.log('Matches XSmall viewport');\n      }\n      if (state.breakpoints[Breakpoints.Small]) {\n        this.isTablet = true;\n        console.log('Matches Small viewport');\n      }\n      if (state.breakpoints[Breakpoints.Medium]) {\n        this.isDesktop = true;\n        console.log('Matches Medium  viewport');\n      }\n      if (state.breakpoints[Breakpoints.Large]) {\n        this.isDesktop = true;\n        console.log('Matches Large viewport');\n      }\n      if (state.breakpoints[Breakpoints.XLarge]) {\n        this.isDesktop = true;\n        console.log('Matches XLarge viewport');\n      }\n\n      this.resetVerticalDisplay();\n    });\n  }\n\n  rowClick(row: any, rowIndex: any, context: any, event: any) {\n    console.log(row);\n    console.log(rowIndex);\n    console.log(context);\n\n    let actionButton: Button = null;\n    if (!CollectionUtils.isEmpty(this._listConfig.actions)) {\n      this._listConfig.actions.forEach(action => {\n        if (action.identifier == this._listConfig.rowAction) {\n          actionButton = action;\n        }\n      })\n\n      if (actionButton != null) {\n        let actionObj: Action = ButtonUtils.getAction(\n          this._listConfig.identifier,\n          rowIndex,\n          this.widgetArrayIndex,\n          actionButton.identifier,\n          this.parent,\n          event,\n          row,\n          context,\n          null);\n\n        this.onButtonClick.emit(actionObj);\n      }\n    }\n  }\n\n  resetVerticalDisplay(): void {\n    // if (this._listConfig.mobile && this._listConfig.mobile.displayVertical && this.isMobile) {\n    //   this.displayVertical = true;\n    // }\n  }\n\n  getButton(cell: CustomLayoutCell) {\n    let buttons: Array<CellControl> = new Array<CellControl>();\n    if (!CollectionUtils.isEmpty(cell) && !CollectionUtils.isEmpty(cell.controls)) {\n      buttons = cell.controls.filter(control => control.type == CellControllType.BUTTON).map(control => control.control);\n    }\n\n    return buttons;\n  }\n\n  onHover(event, rowIndex, row) {\n    this.hoverRowData = row;\n    this.hoverRowIndex = rowIndex;\n  }\n\n\n  ngOnDestroy(): void {\n    if (this.breakpointSubscription) {\n      this.breakpointSubscription.unsubscribe();\n    }\n  }\n}\n","import { Component, OnInit, ViewEncapsulation } from '@angular/core';\nimport {animate, state, style, transition, trigger} from '@angular/animations';\n\nimport { BreakpointObserver } from '@angular/cdk/layout';\n\nimport { ListComponent } from '../list.component';\nimport { ListType, Pagination } from '../../model';\nimport { Params } from '@angular/router';\nimport { Action } from '../../../button/model';\nimport { Ability } from '@casl/ability';\n\n@Component({\n  selector: 'cf-static-list', \n  templateUrl: './static-list.component.html',\n  styleUrls: ['./static-list.component.scss'],\n  animations: [\n    trigger('detailExpand', [\n      state('collapsed', style({height: '0px', minHeight: '0'})),\n      state('expanded', style({height: '*'})),\n      transition('expanded <=> collapsed', animate('225ms cubic-bezier(0.4, 0.0, 0.2, 1)')),\n    ]),\n  ],\n  encapsulation: ViewEncapsulation.None\n})\nexport class StaticListComponent extends ListComponent implements OnInit {\n  constructor(public ability: Ability, public breakpointObserver: BreakpointObserver) {\n    super(ability, breakpointObserver);\n    window.onscroll = ()=> {this.sticky()};\n  }\n\n  ngOnInit() {\n    this.init();\n  }\n\n  isList(): boolean {\n    return this.listConfig.listType == ListType.STATIC;\n  }\n\n  onSort(event) {\n    const queryParams: Params = { sorton: event['active'], sortdir: event['direction'] };\n\n    this.expandedRow = null;\n    \n    let action: Action = {\n      sourceIdentifier: this.sourceIdentifier ? this.sourceIdentifier : this._listConfig.identifier,\n      sourceIndex: this.sourceIndex ? this.sourceIndex : 0,\n      widgetArrayIndex: this.widgetArrayIndex,\n      action: this._listConfig.identifier,\n      actionData: queryParams,\n      data: this.record,\n      originalData: this.record,\n      parentHierarchy: this.parent,\n      event: event\n    }\n\n    console.log(action);\n    this.onSortChange.emit(action);\n  }\n\n  onPage(pageInfo: Pagination) {\n    console.log(\"scrolled:-\",pageInfo)\n    let action: Action = {\n      sourceIdentifier: this.sourceIdentifier ? this.sourceIdentifier : this._listConfig.identifier,\n      sourceIndex: this.sourceIndex ? this.sourceIndex : 0,\n      widgetArrayIndex: this.widgetArrayIndex,\n      action: this._listConfig.identifier,\n      actionData: pageInfo,\n      data: this.record,\n      originalData: this.record,\n      parentHierarchy: this.parent,\n      event: pageInfo\n    };\n\n    console.log(action);\n    this.onPageChange.emit(action);\n  }\n\n  ngOnDestroy() {\n  }\n}\n","import { Component, OnInit, ViewEncapsulation } from '@angular/core';\n\nimport { BreakpointObserver } from '@angular/cdk/layout';\n\nimport { ListComponent } from '../list.component';\nimport { ListType, Pagination } from '../../model';\nimport { Params } from '@angular/router';\nimport { Action } from '../../../button/model';\nimport { Ability } from '@casl/ability';\n\n@Component({\n  selector: 'cf-dynamic-list',\n  templateUrl: '../static-list/static-list.component.html',\n  styleUrls: ['../static-list/static-list.component.scss'],\n  encapsulation: ViewEncapsulation.None\n})\nexport class DynamicListComponent extends ListComponent implements OnInit {\n\n  constructor(\n    public ability: Ability,\n    public breakpointObserver: BreakpointObserver\n  ) {\n    super(ability, breakpointObserver);\n    window.onscroll = ()=> {this.sticky()};\n  }\n \n  ngOnInit() {\n    this.init();\n  }\n\n  isList(): boolean {\n    return this._listConfig.listType == ListType.DYNAMIC;\n  }\n\n  onSort(event) {\n    const queryParams: Params = { sorton: event['active'], sortdir: event['direction'] };\n\n    let action: Action = {\n      sourceIdentifier: this.sourceIdentifier ? this.sourceIdentifier : this._listConfig.identifier,\n      sourceIndex: this.sourceIndex ? this.sourceIndex : 0,\n      widgetArrayIndex: this.widgetArrayIndex,\n      action: this._listConfig.identifier,\n      actionData: queryParams,\n      data: this.record,\n      originalData: this.record,\n      parentHierarchy: this.parent,\n      event: event\n    };\n\n    console.log(action);\n    this.onSortChange.emit(action);\n  }\n\n  onPage(pageInfo: Pagination) {\n    console.log(pageInfo);\n    let action: Action = {\n      sourceIdentifier: this.sourceIdentifier ? this.sourceIdentifier : this._listConfig.identifier,\n      sourceIndex: this.sourceIndex ? this.sourceIndex : 0,\n      widgetArrayIndex: this.widgetArrayIndex,\n      action: this._listConfig.identifier,\n      actionData: pageInfo,\n      data: this.record,\n      originalData: this.record,\n      parentHierarchy: this.parent,\n      event: pageInfo\n    };\n\n    console.log(action);\n    this.onPageChange.emit(action);\n  }\n}\n","import { Component, OnInit, Inject, Output, EventEmitter, ViewEncapsulation } from '@angular/core';\nimport { Form } from '../../../form/model';\nimport { List } from '../../../list/model';\nimport { KeyMap, FieldChange } from '../../../field/model';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { AbilityUtils } from '../../../utility/ability.utility';\nimport { Ability } from '@casl/ability';\n\nexport interface DialogData {\n  type: string,\n  widgetConfig: Form | List,\n  sourceIndex: number,\n  context: any,\n  originalData: any,\n  keyMap: Array<KeyMap>,\n  reset: boolean,\n  currentInstance: any\n}\n\n@Component({\n  selector: 'cf-modal',\n  templateUrl: './modal.component.html',\n  styleUrls: ['./modal.component.scss'],\n  encapsulation: ViewEncapsulation.None\n})\nexport class ModalComponent implements OnInit {\n  @Output() onFormChange = new EventEmitter();\n  @Output() onFieldChange = new EventEmitter();\n  @Output() onButtonClick = new EventEmitter();\n\n  constructor(public dialogRef: MatDialogRef<ModalComponent>,\n    @Inject(MAT_DIALOG_DATA) public data: DialogData,\n    private ability: Ability) { \n      AbilityUtils.setAbility(this.ability);\n    }\n\n  ngOnInit(): void {\n  }\n\n  click(event: any) {\n    this.dialogRef.close(event);\n  }\n\n  fieldChange(fieldChange: FieldChange) {\n    console.log(fieldChange);\n    this.onFieldChange.emit(fieldChange);\n  }\n\n  formChange(form: any) {\n    this.onFormChange.emit(form);\n  }\n\n  buttonClick(event: any) {\n    console.log(event);\n    this.onButtonClick.emit(event);\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { AbilityUtils } from '../../../utility/ability.utility';\nimport { Ability } from '@casl/ability';\n\n@Component({\n  selector: 'app-admin-layout',\n  templateUrl: './admin-layout.component.html',\n  styleUrls: ['./admin-layout.component.scss']\n})\nexport class AdminLayoutComponent implements OnInit {\n\n  constructor(private ability: Ability) { \n    AbilityUtils.setAbility(this.ability);\n  }\n\n  ngOnInit(): void {\n  }\n\n}\n","import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\nimport { Button, ButtonColor, ButtonType, Badge, BadgeColor, ButtonGroup, HoverButton, ButtonSize } from '../../../button/model';\nimport { CollectionUtils } from '../../../utility';\nimport { CrudDescription, CrudHeaderIcon, CrudStyle } from '../../model';\nimport { FormDiaplyMode, FormTitleIconPosition } from '../../../form/model';\nimport { AbilityUtils } from '../../../utility/ability.utility';\nimport { Ability } from '@casl/ability';\n\n@Component({\n  selector: 'cf-crud-header',\n  templateUrl: './crud-header.component.html',\n  styleUrls: ['./crud-header.component.scss']\n})\nexport class CrudHeaderComponent implements OnInit {\n  @Input() identifier: string;\n  @Input() title: string; \n  @Input() subtitle: string; \n  @Input() description: CrudDescription;\n  @Input() badges: Array<Badge>;\n  @Input() icon: CrudHeaderIcon;\n  @Input() style: CrudStyle;\n\n  @Input() _pageBackRoute: Array<string>;\n  get pageBackRoute(): Array<string> {\n    return this._pageBackRoute;\n  }\n  @Input()\n  set pageBackRoute(_pageBackRoute: Array<string>) {\n    this._pageBackRoute = _pageBackRoute;\n    this.addBackButton();\n  } \n\n  @Input() formDisplayMode: FormDiaplyMode;\n  @Input() actions: Array<Button | HoverButton | ButtonGroup>;\n  @Input() showHeader: boolean;\n  @Input() originalData: any;\n  @Input() context: any;\n  @Output() onButtonClick = new EventEmitter();\n\n  iconPosition: FormTitleIconPosition;\n  badgeButtons: Array<ButtonGroup> = new Array<ButtonGroup>();\n\n  constructor(private ability: Ability) { \n    AbilityUtils.setAbility(this.ability);\n  }\n\n  ngOnInit() {\n    this.setIconPosition();\n    this.addBackButton();\n    this.transformBadgeButtons();\n  }\n\n  setIconPosition() {\n    this.iconPosition = FormTitleIconPosition.BEFORE_TITLE;\n    if (this.icon && this.icon.position)  {\n      this.iconPosition = this.icon.position;\n    }\n  }\n\n  transformBadgeButtons(): void {\n    if (this.badges && this.badges.length > 0) {\n      let index: number = 0;\n      for (let badge of this.badges) {\n        this.badgeButtons.push({\n          identifier: 'crudHeaderBadge-' + index,\n          type: ButtonType.CHIP,\n          label: badge.content,\n          color: this.badgeColorToButtonColor(badge.color),\n          size: ButtonSize.MICRO,\n          groupIdentifier: \"crudHeaderGroup\",\n        });\n      }\n    }\n  }\n\n  badgeColorToButtonColor(color: BadgeColor): ButtonColor {\n    let buttonColor: ButtonColor;\n    if (color == BadgeColor.ASCENT) {\n      buttonColor = ButtonColor.ASCENT;\n    } else if (color == BadgeColor.PRIMARY) {\n      buttonColor = ButtonColor.PRIMARY;\n    } else if (color == BadgeColor.WARN) {\n      buttonColor = ButtonColor.WARN;\n    }\n\n    return buttonColor;\n  }\n\n  addBackButton(): void {\n    if (!this._pageBackRoute || CollectionUtils.isEmpty(this._pageBackRoute)) {\n      return;\n    }\n\n    let backButton: Button;\n\n    if (CollectionUtils.isEmpty(this.actions)) {\n      this.actions = new Array<Button | HoverButton | ButtonGroup>();\n    }\n\n    backButton = {\n      identifier: \"crudBackButton\",\n      label: \"Back\",\n      color: ButtonColor.PRIMARY,\n      size: ButtonSize.SMALL,\n      icon: \"keyboard_return\",\n      type: ButtonType.GHOST,\n      onlyIcon: false,\n      routerLink: this._pageBackRoute,\n      displayInFormModes: [\n        FormDiaplyMode.CRUD_FORM\n      ]\n    };\n\n    let backAlreadyAdded = false;\n    for (let action of this.actions) {\n      if (action.identifier == \"crudBackButton\") {\n        backAlreadyAdded = true;\n      }\n    }\n\n    if (!backAlreadyAdded) {\n      this.actions.unshift(backButton);\n\n      this.actions = JSON.parse(JSON.stringify(this.actions));\n    }\n  }\n\n  buttonClick(event: any) {\n    console.log(event);\n    this.onButtonClick.emit(event);\n  }\n}\n","import { Component, OnInit, Input, ViewEncapsulation, Output, EventEmitter } from '@angular/core';\nimport { FormDiaplyMode, FormHeader, FormField, FormDescription, FormTitleIconPosition } from '../../model';\nimport { Field, TextField, InputField, DropdownField, ImageField, CalendarField, AutocompleteField, CheckboxField, FileField, RadioField, SliderField, ToggleField, FieldChange, HtmlEditorField, LabelField } from '../../../field/model';\nimport { Button } from '../../../button/model';\nimport { FormGroup } from '@angular/forms';\nimport { CollectionUtils, ButtonUtils, FormUtils } from '../../../utility';\nimport { AbilityUtils } from '../../../utility/ability.utility';\nimport { Ability } from '@casl/ability';\n\n@Component({\n  selector: 'cf-form-header',\n  templateUrl: './form-header.component.html',\n  styleUrls: ['./form-header.component.scss'],\n  encapsulation: ViewEncapsulation.None\n})\nexport class FormHeaderComponent implements OnInit {\n  @Input() form: FormGroup;\n  @Input() formHeaderConfig: FormHeader;\n  @Input() description: FormDescription;\n  @Input() formDisplayMode: FormDiaplyMode;\n  @Input() formIdentifier: string;\n  @Input() sourceIndex: number;\n  @Input() widgetArrayIndex: number;\n  @Input() originalData: any;\n  @Input() context: any;\n  @Input() formActions: Array<Field | TextField | LabelField | InputField | DropdownField | HtmlEditorField | ImageField | CalendarField | AutocompleteField | CheckboxField | FileField | RadioField | SliderField | ToggleField | Button>;\n  @Output() onFieldChange = new EventEmitter();  \n  @Output() onButtonClick = new EventEmitter();\n\n  title: string;\n  subtitle: string;\n  iconPosition: FormTitleIconPosition;\n  fields: Array<Field | TextField | LabelField | InputField | DropdownField | HtmlEditorField | ImageField | CalendarField | AutocompleteField | CheckboxField | FileField | RadioField | SliderField | ToggleField> = new Array<Field | TextField | InputField | DropdownField | HtmlEditorField | ImageField | CalendarField | AutocompleteField | CheckboxField | FileField | RadioField | SliderField | ToggleField>();\n  buttons: Array<Button> = new Array<Button>();\n\n  constructor(private ability: Ability) { \n    AbilityUtils.setAbility(this.ability);\n  }\n\n  ngOnInit() {\n    this.getFormHeader();\n    this.setIconPosition();\n    this.saperateFormActions(); \n  }\n\n  getFormHeader(): void {\n    let title: string = this.formHeaderConfig.title;\n    this.subtitle = this.formHeaderConfig.subtitle;\n\n    switch (this.formDisplayMode) {\n      case FormDiaplyMode.SEARCH: {\n        title = this.formHeaderConfig.searchModeTitle ? this.formHeaderConfig.searchModeTitle : title;\n      }\n      case FormDiaplyMode.ADD: {\n        title = this.formHeaderConfig.addModeTitle ? this.formHeaderConfig.addModeTitle : title;\n      }\n      case FormDiaplyMode.EDIT: {\n        title = this.formHeaderConfig.editModeTitle ? this.formHeaderConfig.editModeTitle : title;\n      }\n      case FormDiaplyMode.VIEW: {\n        title = this.formHeaderConfig.viewModeTitle ? this.formHeaderConfig.viewModeTitle : title;\n      }\n      default: {\n        title = this.formHeaderConfig.title;\n      }\n    }\n\n    if (this.widgetArrayIndex != null)  {\n      title += \" - \" + (this.widgetArrayIndex + 1);\n    }\n\n    this.title = title;\n  }\n\n  setIconPosition() {\n    this.iconPosition = FormTitleIconPosition.BEFORE_TITLE;\n    if (this.formHeaderConfig.icon && this.formHeaderConfig.icon.position)  {\n      this.iconPosition = this.formHeaderConfig.icon.position;\n    }\n  }\n\n  saperateFormActions() {\n    if (!CollectionUtils.isEmpty(this.formActions)) {\n      this.formActions.forEach(formAction => {\n        if (ButtonUtils.instanceOfAnyButtonType(formAction)) {\n          this.buttons.push(<Button>formAction);\n        } else {\n          this.fields.push(<Field | TextField | LabelField | InputField | DropdownField | HtmlEditorField | ImageField | CalendarField | AutocompleteField | CheckboxField | FileField | RadioField | SliderField | ToggleField>formAction);\n        }\n      })\n\n      this.initFormGroup();\n    }\n  }\n\n  initFormGroup(): void {\n    if (this.fields && this.fields.length > 0) {\n      let formFields: Array<FormField> = new Array<FormField>();\n      this.fields.map(field => formFields.push({ 'field': field, 'addMore': false }));\n\n      this.form = FormUtils.initFormGroup(formFields, {}, {}, FormDiaplyMode.ADD);\n    }\n  }\n\n  fieldChange(fieldChange: FieldChange) {\n//    console.log(fieldChange);\n\n    this.onFieldChange.emit(fieldChange); \n  }\n\n  buttonClick(event: any) {\n    this.onButtonClick.emit(event);\n  }\n}\n","import { Component, OnInit, OnDestroy, Input, EventEmitter, Output, ViewEncapsulation } from '@angular/core';\n\nimport { BreakpointObserver, Breakpoints, BreakpointState } from '@angular/cdk/layout';\n\nimport { Form, FormDiaplyMode, FormField, FormLayout, FormLayoutRow, FormSectionExpand, FormButton, FormButtonLayout } from '../../model';\nimport { Field, FieldChange, KeyMap, KeyMapOptionType } from '../../../field/model';\nimport { FormGroup } from '@angular/forms';\nimport { Action } from '../../../button/model';\nimport { FormUtils, ObjectUtils, KeyMapUtils, ButtonUtils, CollectionUtils, FormCustomUtils, DependentUtils } from '../../../utility';\nimport { AbilityUtils } from '../../../utility/ability.utility';\nimport { Ability } from '@casl/ability';\nimport { Subscription } from 'rxjs';\n\n@Component({\n  selector: 'cf-form',\n  templateUrl: './form.component.html',\n  styleUrls: ['./form.component.scss'],\n  encapsulation: ViewEncapsulation.None\n})\nexport class FormComponent implements OnInit, OnDestroy {\n  @Input() formConfig: Form;\n  @Input() sourceIdentifier: string;\n  @Input() sourceIndex: number;\n  @Input() widgetArrayIndex: number;\n  @Input() originalData: any;\n  @Input() keyMap: Array<KeyMap>; \n  @Output() onFormChange = new EventEmitter();\n  @Output() onFieldChange = new EventEmitter();\n  @Output() onButtonClick = new EventEmitter();\n\n  formFields: Array<FormField> = new Array<FormField>();\n  dependencies: any;\n\n  cellCount: number = 12;\n  isMobile: boolean;\n  isTablet: boolean;\n  isDesktop: boolean;\n  showButtons: boolean = true;\n\n  private _supportingRecord: any;\n  get supportingRecord(): any {\n    return this._supportingRecord;\n  }\n  @Input()\n  set supportingRecord(_supportingRecord: any) {\n    this._supportingRecord = _supportingRecord;\n\n    this.initFormGroup();\n  }\n\n  private _record: any;\n  get record(): any {\n    return this._record;\n  }\n  @Input()\n  set record(_record: any) {\n    this._record = _record;\n\n    this.initFormGroup();\n  }\n\n  private _reset: boolean;\n  get reset(): boolean {\n    return this._reset;\n  }\n  @Input()\n  set reset(_reset: boolean) {\n    this._reset = _reset;\n\n    if (this._reset == true) {\n      FormUtils.reset(this.form, this.formConfig);\n    }\n  }\n\n  @Input()\n  form: FormGroup;\n  formLayouts: Array<FormLayout> = new Array<FormLayout>();\n\n  formButton: FormButton;\n  formButtonLayout: FormButtonLayout;\n  breakpointSubscription: Subscription;\n\n  //  unflatten = require('flat').unflatten;\n\n  constructor(private ability: Ability, private breakpointObserver: BreakpointObserver) {\n    AbilityUtils.setAbility(this.ability);\n  }\n\n  ngOnInit() {\n    this.getLayout();\n    this.getActions();\n    //    this.fieldDefaultSetting();\n    this.dependencies = { ...DependentUtils.getDependencyTree(this.formConfig.formFields), ...DependentUtils.getDependencyTreeForButton(this.formConfig.action) };\n\n    this.getCustomLayout();\n  }\n\n  getCustomLayout(): void {\n    if (this.formConfig.showCustomLayout) {\n      FormCustomUtils.setCustomLayout(this.formConfig, this.formConfig.layout);  \n    } else  {\n      this.formConfig.showCustomLayout = false;\n    }\n  }\n\n  getActions(): void {\n    if (this.formConfig && this.formConfig.action && (<FormButton>this.formConfig.action).align && (<FormButton>this.formConfig.action).buttons && (<FormButton>this.formConfig.action).buttons.length > 0) {\n      this.formButton = (<FormButton>this.formConfig.action);\n    }\n\n    if (this.formConfig && this.formConfig.action && (<FormButtonLayout>this.formConfig.action).cells && (<FormButtonLayout>this.formConfig.action).cells.length > 0) {\n      this.formButtonLayout = (<FormButtonLayout>this.formConfig.action);\n    }\n  }\n\n  dependentFieldChange(action: Action) {\n    if (this.formConfig.identifier == action.sourceIdentifier) {\n      let newRecord = ObjectUtils.unflatten(this.form.getRawValue());\n      this.record = { ...this.record, ...newRecord };\n      console.log(this.record);\n      this.initFormGroup();\n\n      this.showButtons = false;\n      setTimeout(() => {\n        this.showButtons = true;\n      }, 50);\n    }\n  }\n\n  fieldChange(fieldChange: FieldChange) {\n    this.onFieldChange.emit(fieldChange);\n    this.onFormChange.emit(this.form);\n  }\n\n  buttonClick(event: any) {\n    this.onButtonClick.emit(event);\n  }\n\n  fieldDefaultSetting(): void {\n    if (this.formConfig) {\n      for (let formField of this.formConfig.formFields) {\n        if (!(<Field>formField.field).fieldDisplayType) {\n          (<Field>formField.field).fieldDisplayType = this.formConfig.displayType;\n        }\n      }\n\n      if (!this.formConfig.displayInColumns) {\n        this.formConfig.displayInColumns = 1;\n      }\n    }\n\n    this.setTitle();\n  }\n\n  setTitle() {\n    if (this.formConfig.header) {\n      let title = this.formConfig.header.title;\n      switch (this.formConfig.displayMode) {\n        case FormDiaplyMode.ADD:\n          if (this.formConfig.header.addModeTitle) {\n            title = this.formConfig.header.addModeTitle;\n          }\n          break;\n        case FormDiaplyMode.EDIT:\n          if (this.formConfig.header.editModeTitle) {\n            title = this.formConfig.header.editModeTitle;\n          }\n          break;\n        case FormDiaplyMode.VIEW:\n          if (this.formConfig.header.viewModeTitle) {\n            title = this.formConfig.header.viewModeTitle;\n          }\n          break;\n        case FormDiaplyMode.BLOCKED:\n          if (this.formConfig.header.viewModeTitle) {\n            title = this.formConfig.header.viewModeTitle;\n          }\n          break;\n      }\n      this.formConfig.header.title = title;\n    }\n  }\n\n  initFormGroup(): void {\n    KeyMapUtils.setOptionssUsingValues(this.keyMap, false, KeyMapOptionType.FORM, this.formConfig, this._record);\n\n    this.form = FormUtils.initFormGroup(this.formConfig.formFields, this._supportingRecord, this._record, this.formConfig.displayMode);\n\n    this.onFormChange.emit(this.form);\n\n    if (this.isMobile || this.isTablet || this.isDesktop) {\n      this.resetDisplayInColumn();\n    }\n  }\n\n  // isValidButton(button: Button): boolean {\n  //   let isValid: boolean = false;\n\n  //   if (button.displayInFormModes.indexOf(this.formConfig.displayMode) > -1) {\n  //     isValid = true;\n  //   }\n  //   return isValid;\n  // }\n\n  // isNewRow(index: number): string {\n  //   let displayRow: string = \"\";\n  //   if (index % this.formConfig.displayInColumns == 0) {\n  //     displayRow = \"row\";\n  //   }\n\n  //   return displayRow;\n  // }\n\n  getFormValue(): any {\n    return FormUtils.getRawValue(this.form);\n  }\n\n  transformRows(): void {\n    let sectionLabel: string = \"\";\n    let formLayouts: Array<FormLayout> = new Array<FormLayout>();\n    let index: number = -1;\n\n    let displayInColumns = this.formConfig.displayInColumns;\n\n    if (this.formConfig.formFields) {\n      for (let formField of this.formConfig.formFields) { \n        if (this.form.controls[formField.field.key] && DependentUtils.displayDependencyField(formField.field.dependentOnFields, this._supportingRecord, this._record)) {\n          if (formField.separator || sectionLabel == \"\") {\n            formLayouts.push({\n              sectionLabel: formField && formField.separator && formField.separator.label ? formField.separator.label : \"\",\n              sectionIcon: formField && formField.separator && formField.separator.icon ? formField.separator.icon : \"\",\n              sectionExpandable: formField && formField.separator && formField.separator.expandable ? formField.separator.expandable : null,\n              rows: new Array<FormLayoutRow>()\n            });\n            sectionLabel = \"-\";\n            index++;\n          }\n\n          if (formLayouts[index]) {\n            let rLength = formLayouts[index].rows.length;\n\n            if (formLayouts[index].rows.length == 0) {\n              formLayouts[index].rows.push({ columns: new Array<FormField>() });\n              formLayouts[index].rows[0].columns = new Array<FormField>();\n            }\n\n            let cLength = this.formFieldRowColumnCount(formLayouts, index);\n\n            if (cLength >= displayInColumns) {\n              formLayouts[index].rows[rLength] = { columns: new Array<FormField>() };\n            }\n\n            formLayouts[index].rows[formLayouts[index].rows.length - 1].columns.push(formField);\n          }\n        }\n      }\n    }\n\n    this.formLayouts = formLayouts;\n  }\n\n  private formFieldRowColumnCount(formLayouts: Array<FormLayout>, index: number): number {\n    let colCount = 0;\n\n    for (let cCnt = 0; cCnt < formLayouts[index].rows[formLayouts[index].rows.length - 1].columns.length; cCnt++) {\n      if (formLayouts[index].rows[formLayouts[index].rows.length - 1].columns[cCnt].displayInColumns) {\n        colCount += formLayouts[index].rows[formLayouts[index].rows.length - 1].columns[cCnt].displayInColumns;\n      } else {\n        colCount += 1;\n        formLayouts[index].rows[formLayouts[index].rows.length - 1].columns[cCnt].displayInColumns = 1;\n      }\n    }\n\n    return colCount;\n  }\n\n  toggleList(formLayout: FormLayout): void {\n    if (formLayout.sectionExpandable && formLayout.sectionExpandable.allowed) {\n      if (formLayout.sectionExpandable.default == FormSectionExpand.EXPAND) {\n        formLayout.sectionExpandable.default = FormSectionExpand.COLLAPSE;\n      } else {\n        formLayout.sectionExpandable.default = FormSectionExpand.EXPAND;\n      }\n    }\n  }\n\n  getLayout(): void {\n    this.breakpointSubscription = this.breakpointObserver.observe([\n      Breakpoints.XSmall,\n      Breakpoints.Small,\n      Breakpoints.Medium,\n      Breakpoints.Large,\n      Breakpoints.XLarge\n    ]).subscribe((state: BreakpointState) => {\n      if (state.breakpoints[Breakpoints.XSmall]) {\n        this.isMobile = true;\n        console.log('Matches XSmall viewport');\n      }\n      if (state.breakpoints[Breakpoints.Small]) {\n        this.isTablet = true;\n        console.log('Matches Small viewport');\n      }\n      if (state.breakpoints[Breakpoints.Medium]) {\n        this.isDesktop = true;\n        console.log('Matches Medium  viewport');\n      }\n      if (state.breakpoints[Breakpoints.Large]) {\n        this.isDesktop = true;\n        console.log('Matches Large viewport');\n      }\n      if (state.breakpoints[Breakpoints.XLarge]) {\n        this.isDesktop = true;\n        console.log('Matches XLarge viewport');\n      }\n\n      this.resetButtonDisplay();\n      this.resetDisplayInColumn();\n    });\n  }\n\n  resetButtonDisplay(): void {\n    if (this.formConfig && this.formConfig.action && !CollectionUtils.isEmpty((<FormButton>this.formConfig.action).buttons)) {\n      if ((this.isMobile || this.isTablet) && !ButtonUtils.hasWidth((<FormButton>this.formConfig.action).buttons)) {\n        ButtonUtils.setEqualWidth((<FormButton>this.formConfig.action).buttons);\n      }\n    } \n  }\n\n  resetDisplayInColumn(): void {\n    if (this.formConfig && this.formConfig.displayInColumns) {\n      if (this.isMobile) {\n        this.cellCount = 4;\n        this.formConfig.displayInColumns = this.getNewDisplayInColumn(\"mobile\", this.formConfig.displayInColumns);\n      }\n      if (this.isTablet) {\n        this.cellCount = 8;\n        this.formConfig.displayInColumns = this.getNewDisplayInColumn(\"tablet\", this.formConfig.displayInColumns);\n      }\n    }\n\n    if (this.formConfig && !CollectionUtils.isEmpty(this.formConfig.formFields)) {\n      this.formConfig.formFields.forEach(formField => {\n        if (formField.displayInColumns) {\n          if (this.isMobile) {\n            this.cellCount = 4;\n            formField.displayInColumns = this.getNewDisplayInColumn(\"mobile\", formField.displayInColumns);\n          }\n          if (this.isTablet) {\n            this.cellCount = 8;\n            formField.displayInColumns = this.getNewDisplayInColumn(\"tablet\", formField.displayInColumns);\n          }\n        } else  { \n          formField.displayInColumns = 1;\n        }\n      })\n    }\n\n    this.fieldDefaultSetting();\n    this.transformRows();\n  }\n\n  getNewDisplayInColumn(device: string, displayInColumn: number): number {\n    let displayInColumnMap: Map<string, Map<number, number>> = new Map<string, Map<number, number>>();\n\n    let mobileMap: Map<number, number> = new Map<number, number>();\n    mobileMap.set(12, 1);\n    mobileMap.set(11, 1);\n    mobileMap.set(10, 1);\n    mobileMap.set(9, 1);\n    mobileMap.set(8, 1);\n    mobileMap.set(7, 1);\n    mobileMap.set(6, 1);\n    mobileMap.set(5, 1);\n    mobileMap.set(4, 1);\n    mobileMap.set(3, 1);\n    mobileMap.set(2, 1);\n    mobileMap.set(1, 1);\n    displayInColumnMap.set(\"mobile\", mobileMap);\n\n    let tabletMap: Map<number, number> = new Map<number, number>();\n    tabletMap.set(12, 2);\n    tabletMap.set(11, 2);\n    tabletMap.set(10, 2);\n    tabletMap.set(9, 2);\n    tabletMap.set(8, 2);\n    tabletMap.set(7, 2);\n    tabletMap.set(6, 2);\n    tabletMap.set(5, 2);\n    tabletMap.set(4, 2);\n    tabletMap.set(3, 2);\n    tabletMap.set(2, 2);\n    tabletMap.set(1, 1);\n    displayInColumnMap.set(\"tablet\", tabletMap);\n\n    return displayInColumnMap.get(device).get(displayInColumn);\n  }\n\n  ngOnDestroy(): void {\n    if (this.breakpointSubscription) {\n      this.breakpointSubscription.unsubscribe();\n    }\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { CrudHeader, ActionPage, CrudList, CrudListData, Crud, CrudSearch, CrudTab } from '../../model';\nimport { Button, Badge, Action } from '../../../button/model';\nimport { KeyMap } from '../../../field/model';\nimport { List } from '../../../list/model';\nimport { CollectionUtils, SecurityUtils, CrudUtils } from '../../../utility';\nimport { FormDiaplyMode } from '../../../form/model';\n\n//extends ModalInterfaceComponent\n@Component({\n  selector: 'cf-crud-list-interface',\n  templateUrl: './crud-list.component.html',\n  styleUrls: ['./crud-list.component.scss']\n})\nexport class CrudListComponentInterface  implements OnInit {\n  //  Common Config \n  identifier: string;\n  header: CrudHeader;\n  actions: Array<Button>;\n  actionPages: Array<ActionPage>;\n  formReset: boolean;\n  listReset: boolean;\n  keyMap: Array<KeyMap> = new Array<KeyMap>();\n\n  //  List Config\n  quickLinks: Array<Button>;\n  searchConfig: CrudSearch;\n  searchData: any;\n  listConfig: CrudList;\n  listPageBackRoute: Array<string>;\n\n  expandRowIndex: number;\n  \n  configListData: CrudListData; \n  originalData: any;\n\n  constructor() { \n    // super();\n  }\n\n  ngOnInit(): void {\n    this.setCommonConfig();\n    this.setListConfig();\n  }\n\n  setCommonConfig(): void {\n\n  }\n  setListConfig(): void{\n\n  }\n  setBadges(): Array<Badge>{\n    return null;\n  }\n\n  setCommonConfigUsingCrud(crud: Crud): void {\n    //  Config\n    this.identifier = crud.identifier\n    this.header = crud.header;\n    \n    //  Tab wise data/setting\n    //this.keyMap = {};\n    this.listReset = true;\n  }\n\n  setListConfigUsingCrud(crud: Crud): void {\n    //  Config\n    this.quickLinks = crud.quickLinks;\n    this.searchConfig = crud.search;\n    this.listConfig = crud.list;\n    this.actions = crud.actions;\n\n    this.setConfigListData([], []);\n  }\n \n  loadFilterParams(filterStr: string) {\n    if (filterStr != null) {\n      const filter = SecurityUtils.decrypt(filterStr);\n\n      this.configListData.searchData = filter;\n    } else {\n    }\n    this.configListData.pageNo = 1;\n  }\n  \n  setConfigListData(records: Array<any>, badges: Array<Badge>, route?: Array<string>): void {\n    let configListDataNew = {\n      pageBackRoute: route, \n      badges: badges,\n      records: records,\n      originalData: this.originalData\n    }\n\n    this.configListData = { ...this.configListData, ...configListDataNew };    \n  }\n\n  getRowKey(lIndex: number): Array<string> {\n    let keys: Array<string>;\n\n    if (this.listConfig && this.listConfig.lists && this.listConfig.lists[lIndex]) {\n      keys = this.listConfig.lists[lIndex].uniqueKeys;\n    } else {\n      keys = new Array<string>();\n    }\n\n    return keys;\n  }\n\n  getChildRowKey(lIndex: number): Array<string> {\n    let keys: Array<string>;\n\n    if (this.listConfig && this.listConfig.lists && this.listConfig.lists[lIndex] && this.listConfig.lists[lIndex].child && this.listConfig.lists[lIndex].child.record && (<List>this.listConfig.lists[lIndex].child.record).uniqueKeys) {\n      keys = (<List>this.listConfig.lists[lIndex].child.record).uniqueKeys;\n    } else {\n      keys = new Array<string>();\n    }\n\n    return keys;\n  }\n\n  getChildRecordIdentifier(lIndex: number): string {\n    let childRecordIdentifier: string;\n\n    if (this.listConfig && this.listConfig.lists && this.listConfig.lists[lIndex] && this.listConfig.lists[lIndex].child) {\n      childRecordIdentifier = this.listConfig.lists[lIndex].child.recordIdentifier;\n    } else {\n      childRecordIdentifier = \"\";\n    }\n\n    return childRecordIdentifier;\n  }\n\n  beforeChangeMerge(action: Action, sourceIdentifier: string): { rows: Array<any>, rowIndex: number } {\n    let rows: Array<any>;\n    let rowIndex: number = -1;\n\n    if (this.configListData && this.configListData.records) {\n      for (let lIndex = 0; lIndex < this.configListData.records.length; lIndex++) {\n        if (this.listConfig.lists[lIndex].identifier == sourceIdentifier) {\n          for (let rIndex = 0; rIndex < this.configListData.records[lIndex].rows.length; rIndex++) {\n            let keys = this.getRowKey(lIndex);\n\n            let isMatchingRow = true;\n            for (let key of keys) {\n              if (this.configListData.records[lIndex].rows[rIndex][key] != action.originalData[key]) {\n                isMatchingRow = false;\n              }\n            }\n\n            if (isMatchingRow) {\n              this.configListData.records[lIndex].rows[rIndex] = { ...action.originalData, ...action.data };\n\n              rows = this.configListData.records[lIndex].rows;\n              rowIndex = rIndex;\n              break;\n            }\n          }\n        }\n      }\n    }\n\n    return { rows: rows, rowIndex: rowIndex };\n  }\n\n  addRow(action: Action, sourceIdentifier: string, data?: any): { rows: Array<any>, rowIndex: number } {\n    let rows: Array<any>;\n    let rowIndex: number = -1; \n\n    if (this.configListData && this.configListData.records) {\n      for (let lIndex = 0; lIndex < this.configListData.records.length; lIndex++) {\n        if (this.listConfig.lists[lIndex].identifier == sourceIdentifier) {\n          if (CollectionUtils.isEmpty(data))  {\n            this.configListData.records[lIndex].rows.push({});\n          } else  {\n            this.configListData.records[lIndex].rows.push(data);\n          }\n\n          rows = this.configListData.records[lIndex].rows;\n          rowIndex = this.configListData.records[lIndex].rows.length - 1;\n          break;\n        }\n      }\n    }\n\n    return { rows: rows, rowIndex: rowIndex };\n  }\n\n  afterChangeMerge() {\n    this.configListData = JSON.parse(JSON.stringify(this.configListData));\n    this.listReset = true;\n  }\n\n\n  beforeChildChangeMerge(action: Action, sourceIdentifier: string): { rows: Array<any>, rowIndex: number } {\n    let rows: Array<any>;\n    let rowIndex: number = -1;\n\n    if (this.configListData && this.configListData.records) {\n      for (let lIndex = 0; lIndex < this.configListData.records.length; lIndex++) {\n        if (this.listConfig.lists[lIndex].identifier == sourceIdentifier) {\n          for (let rIndex = 0; rIndex < this.configListData.records[lIndex].rows.length; rIndex++) {\n            let keys = this.getRowKey(lIndex);\n\n            let isMatchingRow = true;\n            for (let key of keys) {\n              if ((<Array<string>>action.parentHierarchy.parent['key']).indexOf(this.configListData.records[lIndex].rows[rIndex][key]) < -1) {\n                isMatchingRow = false;\n              }\n            }\n\n            if (isMatchingRow) {\n              let childRecordIdentifier = this.getChildRecordIdentifier(lIndex);\n\n              for (let cIndex = 0; cIndex < this.configListData.records[lIndex].rows[rIndex][childRecordIdentifier].length; cIndex++) {\n                let keys = this.getChildRowKey(lIndex);\n\n                let isChildMatchingRow = true;\n                for (let key of keys) {\n                  if (this.configListData.records[lIndex].rows[rIndex][childRecordIdentifier][cIndex][key] != action.originalData[key]) {\n                    isChildMatchingRow = false;\n                  }\n                }\n\n                if (isChildMatchingRow) {\n                  this.configListData.records[lIndex].rows[rIndex][childRecordIdentifier][cIndex] = { ...action.originalData, ...action.data };\n\n                  rows = this.configListData.records[lIndex].rows[rIndex][childRecordIdentifier];\n                  rowIndex = cIndex;\n                  break;\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return { rows: rows, rowIndex: rowIndex };\n  }\n\n  addChildRow(action: Action, sourceIdentifier: string, data?: any): { rows: Array<any>, rowIndex: number } {\n    let rows: Array<any>;\n    let rowIndex: number = -1;\n\n    if (this.configListData && this.configListData.records) {\n      for (let lIndex = 0; lIndex < this.configListData.records.length; lIndex++) {\n        if (this.listConfig.lists[lIndex].identifier == action.sourceIdentifier) {\n          for (let rIndex = 0; rIndex < this.configListData.records[lIndex].rows.length; rIndex++) {\n            let keys = this.getRowKey(lIndex);\n\n            let isMatchingRow = true;\n            for (let key of keys) {\n              if ((<Array<string>>action.originalData[key]).indexOf(this.configListData.records[lIndex].rows[rIndex][key]) < -1) {\n                isMatchingRow = false;\n              }\n            }\n\n            if (isMatchingRow) {\n              let childRecordIdentifier = this.getChildRecordIdentifier(lIndex);\n\n              for (let cIndex = 0; cIndex < this.configListData.records[lIndex].rows[rIndex][childRecordIdentifier].length; cIndex++) {\n                if (CollectionUtils.isEmpty(data))  {\n                  this.configListData.records[lIndex].rows[rIndex][childRecordIdentifier].push({});\n                } else  {\n                  this.configListData.records[lIndex].rows[rIndex][childRecordIdentifier].push(data);\n                }\n\n                rows = this.configListData.records[lIndex].rows[rIndex][childRecordIdentifier];\n                rowIndex = cIndex;\n                break;\n              }\n            }\n          } \n        }\n      }\n    }\n\n    return { rows: rows, rowIndex: rowIndex };\n  }\n\n  setTabDisplayMode(crudTabs: Array<CrudTab>, formDisplayMode: FormDiaplyMode) {\n    CrudUtils.setDisplayType(crudTabs, formDisplayMode);\n  }\n\n  afterChildChangeMerge() {\n    this.afterChangeMerge();\n  }\n\n  setHeaderTitle(title: string)  {\n    this.header.title = title;\n  }\n\n  setHeaderDescription(description: string)  {\n    this.header.description.text = description;\n  }\n}\n","import { ENTER, SPACE } from '@angular/cdk/keycodes';\nimport { Component, ElementRef, EventEmitter, Input, OnInit, Output, ViewChild } from '@angular/core';\nimport { FormControl, NgControl } from '@angular/forms';\nimport { MatAutocomplete, MatAutocompleteSelectedEvent } from '@angular/material/autocomplete';\nimport { MatChipInputEvent } from '@angular/material/chips';\nimport { ChipField, Chip, ChipItemChangedEvent, ChipOrientation, RemoveFunc } from '../../model/chips.model';\nimport { CdkDragDrop, moveItemInArray } from '@angular/cdk/drag-drop';\nimport { ErrorStateMatcher } from '@angular/material/core';\nimport { DropdownOption } from '../../model';\nimport { FieldComponent } from '../field/field.component';\nimport { Ability } from '@casl/ability';\nimport { Router } from '@angular/router';\nimport { CollectionUtils, FieldUtils } from '../../../utility';\nimport { MatFormFieldControl } from '@angular/material/form-field';\nimport { Observable } from 'rxjs';\n\n@Component({\n    selector: 'cf-chips',\n    templateUrl: './chips.component.html',\n    styleUrls: ['./chips.component.scss'],\n    // providers: [\n    //     { provide: MatFormFieldControl, useExisting: ChipsComponent }\n    // ]\n})\nexport class ChipsComponent extends FieldComponent implements OnInit {\n    @Input() field: ChipField = null;\n    @Input() disabled: boolean;\n    @Input() formControl: FormControl;\n\n    @Input() errorMatcher: ErrorStateMatcher;\n\n    @ViewChild('input') input: ElementRef<HTMLInputElement>;\n    @ViewChild('auto') matAutocomplete: MatAutocomplete;\n\n    @Output() onListChange: EventEmitter<ChipItemChangedEvent> = new EventEmitter();;\n\n    placeholder: string = '';\n    separatorKeysCodes: number[] = [ENTER];//SPACE\n    enableDragAndDrop: boolean;\n    orientation: ChipOrientation;\n    chips: Chip[] = [];\n    options: Array<DropdownOption>;\n    addOnBlur: boolean = true;\n    removable: boolean;\n\n    constructor(public router: Router, public ability: Ability) {\n        super(router, ability);\n    }\n    stateChanges: Observable<void>;\n    id: string;\n    ngControl: NgControl;\n    focused: boolean;\n    empty: boolean;\n    shouldLabelFloat: boolean;\n    errorState: boolean;\n    controlType?: string;\n    autofilled?: boolean;\n    userAriaDescribedBy?: string;\n    setDescribedByIds(ids: string[]): void {\n        throw new Error('Method not implemented.');\n    }\n    onContainerClick(event: MouseEvent): void {\n        throw new Error('Method not implemented.');\n    }\n\n    ngOnInit() {\n        this.placeholder = this.field.placeholder || '';\n        this.orientation = this.field.orientation || ChipOrientation.HORIZONTAL;\n        this.options = this.field.options || [];\n\n        this.setChips();\n    }\n\n    setChips() {\n        let values: Array<string> = this.formControl.value;\n        let isReadOnly: boolean = FieldUtils.isFieldDisabled(this.field, this.displayMode, values);\n\n        if (!CollectionUtils.isEmpty(values)) {\n            values.forEach(value => {\n                if (!CollectionUtils.isEmpty(this.field.options)) {\n                    let optionMatch: DropdownOption = null;\n                    this.field.options.forEach(option => {\n                        if (option.key == value) {\n                            optionMatch = option;\n                        }\n                    });\n\n                    if (optionMatch != null) {\n                        this.chips.push({\n                            key: optionMatch.key,\n                            value: optionMatch.value,\n                            disabled: isReadOnly,\n                            removable: true\n                        });\n                    } else {\n                        this.chips.push({\n                            key: value,\n                            value: value,\n                            disabled: isReadOnly,\n                            removable: true\n                        });\n                    }\n                } else {\n                    this.chips.push({\n                        key: value,\n                        value: value,\n                        disabled: isReadOnly,\n                        removable: true\n                    });\n                }\n            });\n        } else {\n            this.chips = [];\n        }\n    }\n\n    addItem = ($event: MatChipInputEvent): void => {\n        const input = $event.input;\n        const value = $event.value;\n\n        let keyExists = this.keyExists(value.trim());\n\n        // Add our item\n        if ((value || '').trim() && !keyExists) {\n            this.chips.push({\n                key: value.trim(),\n                value: value.trim(),\n                disabled: false,\n                removable: this.removable || true\n            });\n        }\n\n        // Reset the input value\n        if (input) {\n            input.value = '';\n        }\n        this.triggerChangedEvent($event as any);\n    }\n\n    keyExists(value: string): boolean {\n        let keyExists = false;\n        this.chips.forEach(chip => {\n            if (chip.key == value) {\n                keyExists = true;\n            }\n        });\n\n        return keyExists;\n    }\n\n    removeItem = ($event: Event, item: Chip, index: number) => {\n        this.chips.splice(index, 1);\n        // if (this.isFunctionDefined(this.field.onRemoveItem)) {\n        //     this.field.onRemoveItem(item.value).subscribe(result => {\n        //         if (result) {\n        //             this.chips.splice(index, 1);\n        //             this.triggerChangedEvent($event);\n        //         }\n        //     });\n        // }\n    }\n\n    drop = ($event: CdkDragDrop<Chip[]>) => {\n        moveItemInArray(this.chips, $event.previousIndex, $event.currentIndex);\n        this.triggerChangedEvent($event as any);\n    }\n\n    triggerChangedEvent = ($event: Event | MatAutocompleteSelectedEvent) => {\n        let values: Array<string> = this.chips.map(x => x.key);\n        this.formControl.setValue(values);\n        this.onListChange.emit(<ChipItemChangedEvent>{\n            values: values,\n            event: $event\n        });\n    }\n\n    onSelected = (event: MatAutocompleteSelectedEvent): void => {\n        let keyExists = this.keyExists(event.option.value['key']);\n\n        if (!keyExists) {\n            this.chips.push({\n                key: event.option.value['key'],\n                value: event.option.value['value'],\n                removable: true,\n                disabled: false\n            });\n            this.input.nativeElement.value = '';\n            this.triggerChangedEvent(event);\n        }\n    }\n\n    isFunctionDefined = (func: RemoveFunc) => {\n        return typeof func == 'function';\n    }\n\n    errors(): Array<{ error: string, message: string }> {\n        let errors: Array<{ error: string, message: string }> = [];\n        if (this.formControl != undefined) {\n            if (this.formControl && this.formControl.errors) {\n\n                Object.keys(this.formControl.errors).forEach(keyError => {\n                    if (this.field.validations) {\n                        for (let validation of this.field.validations) {\n                            if (keyError === validation.message.key) {\n                                errors[errors.length] = { error: keyError, message: validation.message.message };\n                            }\n                        }\n                    }\n                });\n            }\n        }\n        return errors;\n    }\n}\n","import { Component, Input, OnInit, ViewEncapsulation } from '@angular/core';\nimport { ToolbarField, MenuItem } from '../../model/toolbar.model';\n\n@Component({\n    selector: 'cf-toolbar',\n    templateUrl: './toolbar.component.html',\n    styleUrls: ['./toolbar.component.scss'],\n    encapsulation: ViewEncapsulation.None\n})\nexport class ToolbarComponent implements OnInit {\n    @Input() field: ToolbarField = null;\n    title: string;\n    menuItems: MenuItem[];\n\n    constructor() { }\n\n    ngOnInit() {\n         this.title = this.field.title;\n         this.menuItems = this.field.menuItems;\n    }\n\n    onMenuClick = (item: MenuItem)=> {\n        item.onClick(item);\n    }\n    \n}\n","import { Component, Input, OnInit, ViewEncapsulation } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { MultiImage, MultiImageField } from '../../model/multi-image-field.model';\n\n@Component({\n    selector: 'cf-multi-image',\n    templateUrl: './multi-image.component.html',\n    styleUrls: ['./multi-image.component.scss'],\n    encapsulation: ViewEncapsulation.None\n})\nexport class MultiImageComponent implements OnInit {\n    @Input() field: MultiImageField = null;\n    @Input() control: FormControl;\n    @Input() disabled: boolean;\n\n    radius: number;\n    count: number;\n    showCount: boolean;\n    showAll: boolean;\n    images: MultiImage[] | string[];\n    lastItemLabel: string;\n    showLastItem: boolean;\n    hideTooltip: boolean;\n\n    constructor() { }\n\n    ngOnInit() {\n        this.radius = (this.field.radius || 5) * 10;\n\n        this.showCount = this.field.showCount || false;\n        this.showAll = this.field.showAll || false;\n        this.images = this.field.images;\n        this.images = this.images ? this.images : <Array<string> | Array<MultiImage>>this.field.value;\n        this.count = this.field.count || (this.images ? this.images.length : 0);\n        \n        if (this.showCount && (this.showAll || !this.showAll)) {\n            this.lastItemLabel = '+' + (this.images.length - this.count);\n        } else if (this.showAll && !this.showCount) {\n            this.lastItemLabel = '>';\n        }\n\n        this.hideTooltip = this.images && this.images.length > 0 && (typeof this.images[0] == 'string');\n    }\n\n    onShowAllClick = () => {\n        this.count = this.images.length;\n    }\n}\n","import { Component, EventEmitter, Input, OnInit, Output, ViewEncapsulation } from '@angular/core';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { Form, FormDiaplyMode } from '../../../form/model';\nimport { DisplayMode, FieldChange, KeyMap } from '../../model';\nimport { FieldComponent } from '../field/field.component';\nimport { ParagraphField, TokenType } from '../../model/paragraph.model';\nimport { Ability } from '@casl/ability';\nimport { FormUtils, ButtonUtils } from '../../../utility';\n\n@Component({\n    selector: 'cf-paragraph',\n    templateUrl: './paragraph.component.html',\n    styleUrls: ['./paragraph.component.scss'],\n    encapsulation: ViewEncapsulation.None\n}) \nexport class ParagraphComponent extends FieldComponent implements OnInit {\n    tokens: Array<TokenType> = new Array<TokenType>();\n    paragraphField: ParagraphField;\n    @Output() onButtonClick = new EventEmitter();\n\n    constructor(public router: Router, public ability: Ability) {\n        super(router, ability);\n    }\n\n    ngOnInit() {\n        this.paragraphField = (<ParagraphField>this.field);\n        let words = this.paragraphField.template.split(' ');\n\n        if (words && words.length > 0) {\n            words.map(word => {\n                var key = word.slice(1, -1);\n\n                if (word.indexOf('{') == -1) {\n                    this.tokens.push({ type: 'LABEL', value: word });\n                } else if (word.indexOf('{') != -1 && this.paragraphField.fieldContexts[key] != undefined) {\n                    this.tokens.push({ type: 'FIELD', field: this.paragraphField.fieldContexts[key] });\n                    if (this.paragraphField.isReadOnly) {\n                        this.paragraphField.fieldContexts[key]['isReadOnly'] = this.paragraphField.isReadOnly;\n                    }\n                    if (this.paragraphField.displayMode == DisplayMode.LABEL) {\n                        this.paragraphField.fieldContexts[key]['displayMode'] = DisplayMode.LABEL;\n                    }\n                } else if (word.indexOf('{') != -1 && this.paragraphField.buttonContexts[key] != undefined) {\n                    this.tokens.push({ type: 'BUTTON', button: this.paragraphField.buttonContexts[key] });\n                    // if (this.paragraphField.isReadOnly) {\n                    //     this.paragraphField.buttonContexts[key]['displayMode'] = DisplayMode.DISABLED;\n                    // }\n                }\n            })\n        }\n    }\n\n    fieldChange(fieldChange: FieldChange) {\n        this.onFieldChange.emit(fieldChange);\n    }\n\n    isButtonDisable()   {\n        return ButtonUtils.isDisable(this.displayMode) || this.paragraphField.isReadOnly;\n    }\n\n    getFormValue(): any {\n        return FormUtils.getRawValue(this.form);\n    }\n\n    buttonClick(event: any) {\n        console.log(event);\n        this.onButtonClick.emit(event);\n    }\n}\n","\n\nimport { PipeTransform, Pipe } from '@angular/core';\n\n@Pipe({ name: 'highlight' })\nexport class HighlightPipe implements PipeTransform {\n  transform(text: string, search): string {\n    const pattern = search\n      .replace(/[\\-\\[\\]\\/\\{\\}\\(\\)\\*\\+\\?\\.\\\\\\^\\$\\|]/g, \"\\\\$&\")\n      .split(' ')\n      .filter(t => t.length > 0)\n      .join('|');\n    const regex = new RegExp(pattern, 'gi');\n\n    return search ? text.replace(regex, match => `<b>${match}</b>`) : text;\n  }\n}","import { Component, Input, OnInit, ViewEncapsulation } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { CollectionUtils, StringUtils } from '../../../utility';\nimport { Field, HelpTextOrientation } from '../../model';\n\n@Component({\n    selector: 'cf-tooltip',\n    templateUrl: './tooltip.component.html',\n    styleUrls: ['./tooltip.component.scss'],\n    encapsulation: ViewEncapsulation.None\n})\nexport class TooltipComponent implements OnInit {\n    @Input() field: Field = null;\n    @Input() control: FormControl;\n    hasFieldNavigate: boolean;\n    placement: string;\n    constructor() { }\n\n    ngOnInit() {\n        this.hasFieldNavigate = this.fieldNavigate();\n        if(this.field.help && this.field.help.orientation) {\n            this.placement = this.field.help.orientation.toLowerCase();\n        } else {\n            this.placement ='bottom'\n        };\n    }\n\n    fieldNavigate(): boolean {\n        let hasFieldNavigate: boolean = false;\n        if (this.field.navigate && (!StringUtils.isEmpty(this.field.navigate.icon) || !StringUtils.isEmpty(this.field.navigate.text)) && !CollectionUtils.isEmpty(this.field.navigate.routeTo)) {\n            hasFieldNavigate = true;\n        }\n        return hasFieldNavigate;\n    }\n\n}\n","import { Directive, Input, Output,EventEmitter } from '@angular/core';\n\n\n@Directive({\n  selector: '[ngInit]'\n}) \nexport class NgInit {\n  @Output()\n    ngInit: EventEmitter<any> = new EventEmitter();\n\n    ngOnInit() {\n        this.ngInit.emit();\n    }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { DomSanitizer, SafeHtml } from '@angular/platform-browser';\n\n@Pipe({\n  name: 'safeHtml'\n})\nexport class SafeHtmlPipe implements PipeTransform {\n\n  constructor(protected sanitizer: DomSanitizer) {\n  }\n\n  transform(value: any, args?: any): SafeHtml {\n    return this.sanitizer.bypassSecurityTrustHtml(value);\n  }\n\n}","import {\n  Directive,\n  Input,\n  OnChanges,\n  ComponentRef,\n  ViewContainerRef,\n  Compiler,\n  ModuleWithComponentFactories,\n  Component,\n  NgModule,\n  Type\n} from '@angular/core';\nimport { CommonModule } from '@angular/common'\n\n@Directive({\n  selector: '[cfTemplate]'\n})\nexport class cfTemplateDirective implements OnChanges {\n  @Input() cfTemplate: string;\n  @Input() cfTemplateContext: any;\n\n  componentRef: ComponentRef<any>;\n\n  constructor(private vcRef: ViewContainerRef, private compiler: Compiler) { }\n\n  ngOnChanges() {\n    if (!this.cfTemplate) {\n      if (this.componentRef) {\n        this.updateProperties();\n        return;\n      }\n      throw Error('You must provide template.');\n    }\n\n    this.vcRef.clear();\n    this.componentRef = null;\n\n    const component = this.createDynamicComponent(this.cfTemplate);\n    const module = this.createDynamicModule(component);\n\n    this.compiler.compileModuleAndAllComponentsAsync(module)\n      .then((moduleWithFactories: ModuleWithComponentFactories<any>) => {\n        let componentFactory = moduleWithFactories.componentFactories.find(x => x.componentType === component);\n\n        this.componentRef = this.vcRef.createComponent(componentFactory);\n        this.updateProperties();\n      })\n      .catch(error => {\n        console.log(error);\n      });\n  }\n\n  updateProperties() {\n    for (var prop in this.cfTemplateContext) {\n      this.componentRef.instance[prop] = this.cfTemplateContext[prop];\n    }\n  }\n\n  private createDynamicComponent(template: string) {\n    @Component({\n      selector: 'cf-dynamic-component',\n      template: template\n    })\n    class CustomDynamicComponent { }\n    return CustomDynamicComponent;\n  }\n\n  private createDynamicModule(component: Type<any>) {\n    @NgModule({\n      // Every element you might need must be known for this module\n      imports: [CommonModule],\n      declarations: [component]\n    })\n    class DynamicModule { }\n    return DynamicModule;\n  }\n}","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\n\n//import { BrowserModule } from '@angular/platform-browser';\n//import { BrowserAnimationsModule } from '@angular/platform-browser/animations';\n//import { NoopAnimationsModule } from '@angular/platform-browser/animations';\n\nimport { LayoutModule } from '@angular/cdk/layout';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatBadgeModule } from '@angular/material/badge';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatMenuModule } from '@angular/material/menu';\n\nimport { MatCardModule } from '@angular/material/card';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatBottomSheetModule } from '@angular/material/bottom-sheet'\nimport { MatDividerModule } from '@angular/material/divider';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatAutocompleteModule } from '@angular/material/autocomplete';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\n// import { MatNativeDateModule } from '@angular/material/core';\nimport { MatMomentDateModule } from '@angular/material-moment-adapter';\nimport { MatSliderModule } from '@angular/material/slider';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\n//import { MatFileUploadModule } from 'mat-file-upload';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { MatListModule } from '@angular/material/list';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\n\n//import { FroalaEditorModule, FroalaViewModule } from 'angular-froala-wysiwyg';\n//import { EditorModule } from '@progress/kendo-angular-editor';\n\nimport { HttpClientModule } from '@angular/common/http';\n\nimport { AbilityModule } from '@casl/angular';\nimport { Ability, PureAbility } from '@casl/ability';\n\nimport { TooltipModule } from 'ng2-tooltip-directive';\n\n//import { ButtonModule } from './button/button.module';\nimport { ButtonComponent } from './button/component/button/button.component';\nimport { ButtonGroupComponent } from './button/component/button-group/button-group.component';\nimport { CrudFormComponent } from './crud/component/crud-form/crud-form.component';\nimport { CrudListComponent, BottomSearchSheet } from './crud/component/crud-list/crud-list.component';\nimport { FileUploaderComponent } from './field/component/file-uploader/file-uploader.component';\nimport { FieldComponent, FieldHorizontalLayoutComponent, FieldVerticalLayoutComponent, FieldInlineLayoutComponent, FieldLayoutComponent } from './field/component';\nimport { StaticListComponent } from './list/component/static-list/static-list.component';\nimport { DynamicListComponent } from './list/component/dynamic-list/dynamic-list.component';\nimport { ModalComponent } from './modal/component/modal/modal.component';\nimport { ButtonDeleteConfirmationComponent } from './button/component/button-delete-confirmation/button-delete-confirmation.component';\nimport { AdminLayoutComponent } from './page/component/admin-layout/admin-layout.component';\nimport { ListComponent } from './list/component/list.component';\nimport { CrudHeaderComponent } from './crud/component/crud-header/crud-header.component';\nimport { FormComponent, FormHeaderComponent } from './form/component';\nimport { CrudListComponentInterface } from './crud/interface/crud-list/crud-list-interface.component';\nimport { QuillModule } from 'ngx-quill';\nimport { ChipsComponent } from './field/component/chips/chips.component';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\nimport { FlexLayoutModule } from '@angular/flex-layout';\nimport { ToolbarComponent } from './field/component/toolbar/toolbar.component';\nimport {MatToolbarModule} from '@angular/material/toolbar';\nimport { MultiImageComponent } from './field/component/multi-image/multi-image.component';\nimport { ParagraphComponent } from './field/component/paragraph/paragraph.component';\nimport { HighlightPipe } from './field/pipes/highlightPipe';\nimport { DynamicModule } from 'ng-dynamic-component';\nimport { InfiniteScrollModule } from 'ngx-infinite-scroll';\nimport { MdePopoverModule } from '@material-extended/mde';\nimport { TooltipComponent } from './field/component/tooltip/tooltip.component';\nimport { NgInit } from './list/directives/ngInit.directive';\nimport { SafeHtmlPipe } from './list/pipes/safeHtml.pipe';\nimport { cfTemplateDirective } from './list/directives/compile.directive';\n\n@NgModule({\n  declarations: [\n    ButtonComponent,\n    ButtonGroupComponent,\n    ButtonDeleteConfirmationComponent,\n    CrudHeaderComponent,\n    CrudFormComponent,\n    CrudListComponent,\n    CrudListComponentInterface,\n    BottomSearchSheet,\n    FileUploaderComponent,\n    FieldComponent,\n    FieldHorizontalLayoutComponent,\n    FieldVerticalLayoutComponent,\n    FieldInlineLayoutComponent,\n    FieldLayoutComponent,\n    FormHeaderComponent,\n    FormComponent,\n    AdminLayoutComponent, \n    ListComponent,\n    StaticListComponent,\n    DynamicListComponent,\n    ModalComponent,\n    ChipsComponent,\n    ToolbarComponent,\n    MultiImageComponent,\n    ParagraphComponent,\n    HighlightPipe,\n    TooltipComponent,\n    NgInit,\n    SafeHtmlPipe,\n    cfTemplateDirective\n  ], \n  imports: [\n    // ButtonModule,\n    // CrudModule,\n    // FieldModule,\n    // ListModule,\n    // ModalModule,\n    // NavigationModule,\n    // PageModule,\n    // PrivilegeModule, \n    // SettingModule\n    CommonModule,\n//    BrowserModule,\n//    BrowserAnimationsModule,\n//    NoopAnimationsModule,\n    HttpClientModule,\n    RouterModule,\n    DynamicModule,\n    MdePopoverModule,\n    ReactiveFormsModule,\n    TooltipModule,\n    LayoutModule,\n    MatButtonModule,\n    MatButtonToggleModule,\n    MatMenuModule,\n    MatChipsModule,\n    MatIconModule,\n    MatBadgeModule,\n    MatDialogModule,\n    MatCardModule,\n    MatTabsModule,\n    MatExpansionModule,\n    MatSidenavModule,\n    MatBottomSheetModule,\n    MatDividerModule,\n    MatIconModule,\n    MatFormFieldModule,\n    MatInputModule,\n    MatIconModule,\n    MatSelectModule,\n    MatAutocompleteModule,\n    MatCheckboxModule,\n    MatRadioModule,\n    MatDatepickerModule,\n    MatMomentDateModule,\n    MatSliderModule,\n    MatSlideToggleModule,\n    MatListModule,\n    MatTableModule,\n    MatSortModule,\n    MatPaginatorModule,\n    MatGridListModule,\n    MatProgressBarModule,\n    MatProgressSpinnerModule,\n    DragDropModule,\n    // FroalaEditorModule.forRoot(), \n    // FroalaViewModule.forRoot(),\n    //    MatFileUploadModule,\n    // ReactiveFormsModule,\n\n    // EditorModule,\n    MatTooltipModule,\n    MatDividerModule,\n    MatSidenavModule,\n    MatExpansionModule,\n    MatFormFieldModule,\n    MatCardModule,\n    MatDividerModule,\n    MatButtonModule,\n    MatIconModule,\n    MatCardModule,\n    MatDividerModule,\n    MatFormFieldModule,\n    MatIconModule,\n    MatCheckboxModule,\n    MatDialogModule,\n    QuillModule.forRoot(),\n    AbilityModule,\n    FlexLayoutModule,\n    MatToolbarModule,\n    InfiniteScrollModule\n  ],\n  exports: [\n    ButtonComponent,\n    ButtonGroupComponent,\n    CrudListComponentInterface,\n    CrudFormComponent,\n    CrudListComponent,\n    FileUploaderComponent,\n    FieldComponent,\n    // FieldHorizontalLayoutComponent,\n    // FieldVerticalLayoutComponent, \n    // FieldInlineLayoutComponent,\n    FormComponent,\n    StaticListComponent,\n    DynamicListComponent,\n    ModalComponent,\n    DynamicModule,\n    MdePopoverModule,\n    MatButtonModule,\n    MatButtonToggleModule,\n    MatMenuModule,\n    MatChipsModule,\n    MatIconModule,\n    MatBadgeModule,\n    MatDialogModule,\n    MatCardModule,\n    MatTabsModule,\n    MatExpansionModule,\n    MatSidenavModule,\n    MatBottomSheetModule,\n    MatDividerModule,\n    MatIconModule,\n    MatFormFieldModule,\n    MatInputModule,\n    MatIconModule,\n    MatSelectModule,\n    MatAutocompleteModule,\n    MatCheckboxModule,\n    MatRadioModule,\n    MatDatepickerModule,\n    MatMomentDateModule,\n    MatSliderModule,\n    MatSlideToggleModule,\n    MatListModule,\n    MatTableModule,\n    MatSortModule,\n    MatPaginatorModule,\n    MatGridListModule,\n    MatProgressBarModule,\n    MatProgressSpinnerModule,\n\n    // FroalaEditorModule.forRoot(), \n    // FroalaViewModule.forRoot(),\n    //    MatFileUploadModule,\n    // ReactiveFormsModule,\n\n    // EditorModule,\n    MatTooltipModule,\n    MatDividerModule,\n    MatSidenavModule,\n    MatExpansionModule,\n    MatFormFieldModule,\n    MatCardModule,\n    MatDividerModule,\n    MatButtonModule,\n    MatIconModule,\n    MatCardModule,\n    MatDividerModule,\n    MatFormFieldModule,\n    MatIconModule,\n    MatCheckboxModule,\n    MatDialogModule,\n    InfiniteScrollModule,\n    // AdminLayoutComponent\n    NgInit,\n    SafeHtmlPipe,\n    cfTemplateDirective\n  ],\n  providers: [\n    { provide: Ability, useValue: new Ability() },\n    { provide: PureAbility, useExisting: Ability },\n  ]\n})\nexport class AdminBuilderModule { }\n","import { Modal } from '../model';\nimport { ComponentType } from '@angular/cdk/portal';\nimport { TemplateRef } from '@angular/core';\nimport { ModalComponent } from '../component/modal/modal.component';\nimport { MatDialogRef } from '@angular/material/dialog';\nimport { FieldChange } from '../../field/model';\n\nexport class ModalUitls {\n  //    static dialogRef: MatDialogRef<any, any>;\n\n  static openDialog(modal: Modal, component?: ComponentType<any> | TemplateRef<any>): void {\n    let dialogRef: MatDialogRef<any, any>;\n    dialogRef = modal.dialog.open(component ? component : ModalComponent, {\n      width: modal.widgetConfig.modal && modal.widgetConfig.modal.width ? modal.widgetConfig.modal.width + 'px' : '250px',\n      data: {\n        type: modal.type,\n        widgetConfig: modal.widgetConfig,\n        sourceIndex: modal.sourceIndex,\n        context: modal.context,\n        originalData: modal.originalData,\n        keyMap: modal.keyMap,\n        reset: modal.reset\n      }\n    });\n\n    if (dialogRef.componentInstance.onButtonClick) {\n      dialogRef.componentInstance.onButtonClick.subscribe(event => {\n        console.log(event);\n\n        if (eval(\"this.buttonClick\")) {\n          eval(\"this.buttonClick(event)\");\n        }\n      })\n    }\n\n    if (dialogRef.componentInstance.onFieldChange) {\n      dialogRef.componentInstance.onFieldChange.subscribe((event: FieldChange) => {\n        console.log(event);\n\n        if (eval(\"this.fieldChange\")) {\n          eval(\"this.fieldChange(event)\");\n        }\n      }, this)\n    }\n\n    if (dialogRef.componentInstance.onFormChange) {\n      dialogRef.componentInstance.onFormChange.subscribe(event => {\n        console.log(event);\n\n        if (eval(\"this.formChange\")) {\n          eval(\"this.formChange(event)\");\n        }\n      })\n    }\n\n    dialogRef.afterClosed().subscribe(result => {\n      console.log('The dialog was closed');\n      //          this.invokeAction(result, event);\n    });\n  }\n}"]}